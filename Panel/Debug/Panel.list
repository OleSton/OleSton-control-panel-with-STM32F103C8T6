
Panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08006600  08006600  00016600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067dc  080067dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080067dc  080067dc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067dc  080067dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067e0  080067e0  000167e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080067e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000070  08006854  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08006854  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012579  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b12  00000000  00000000  00032612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00035128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  00036430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015669  00000000  00000000  00037628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ec6  00000000  00000000  0004cc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a16c  00000000  00000000  00060b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dacc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000544c  00000000  00000000  000dad18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080065e8 	.word	0x080065e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080065e8 	.word	0x080065e8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000160:	b088      	sub	sp, #32
 8000162:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f001 ff0e 	bl	8001f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 fa26 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 fcbc 	bl	8000ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000170:	f000 fc94 	bl	8000a9c <MX_DMA_Init>
  MX_RTC_Init();
 8000174:	f000 fb0a 	bl	800078c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000178:	f000 fc66 	bl	8000a48 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800017c:	f000 fb50 	bl	8000820 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000180:	f000 fa7a 	bl	8000678 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000184:	f000 fad4 	bl	8000730 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000188:	f000 fc34 	bl	80009f4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800018c:	f000 fbe4 	bl	8000958 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000190:	f000 fb96 	bl	80008c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, "\nI'm panel.\n\0", 12, 1000);
 8000194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000198:	220c      	movs	r2, #12
 800019a:	49a6      	ldr	r1, [pc, #664]	; (8000434 <main+0x2d8>)
 800019c:	48a6      	ldr	r0, [pc, #664]	; (8000438 <main+0x2dc>)
 800019e:	f005 f8c3 	bl	8005328 <HAL_UART_Transmit>
  setup();
 80001a2:	f000 fddb 	bl	8000d5c <setup>
 // check_errors(200);check_errors(201); check_errors(202); check_errors(203);

  while (1)
  {

	         HAL_Delay(500);
 80001a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001aa:	f001 ff4d 	bl	8002048 <HAL_Delay>
	                 //snprintf(Uart_str, 63, "ADC %d    %d    %d\n", (uint16_t)adc[0], (uint16_t)ADC[1], (uint16_t)adc[2]);
	                 //HAL_UART_Transmit(&huart1, (uint8_t*)Uart_str, strlen(Uart_str), 1000);


	                		 	 	 	 	 	 	 	 	 	 	 //get_selector_position(selectorSpeed, ADC[selectorSpeed]);
	         snprintf(Uart_str, 63, "Prog %d (%d) Speed  %d (%d) Temper  %d (%d)\r\n\0", get_selector_position(selectorProg,  ADC[selectorProg]),  ADC[selectorProg],
 80001ae:	4ba3      	ldr	r3, [pc, #652]	; (800043c <main+0x2e0>)
 80001b0:	881b      	ldrh	r3, [r3, #0]
 80001b2:	b29b      	uxth	r3, r3
 80001b4:	4619      	mov	r1, r3
 80001b6:	2000      	movs	r0, #0
 80001b8:	f001 f940 	bl	800143c <get_selector_position>
 80001bc:	4603      	mov	r3, r0
 80001be:	4698      	mov	r8, r3
 80001c0:	4b9e      	ldr	r3, [pc, #632]	; (800043c <main+0x2e0>)
 80001c2:	881b      	ldrh	r3, [r3, #0]
 80001c4:	b29b      	uxth	r3, r3
 80001c6:	461c      	mov	r4, r3
	         	                		 	 	 	 	 	 	 	 	 	 	      get_selector_position(selectorSpeed, ADC[selectorSpeed]), ADC[selectorSpeed],
 80001c8:	4b9c      	ldr	r3, [pc, #624]	; (800043c <main+0x2e0>)
 80001ca:	885b      	ldrh	r3, [r3, #2]
 80001cc:	b29b      	uxth	r3, r3
 80001ce:	4619      	mov	r1, r3
 80001d0:	2001      	movs	r0, #1
 80001d2:	f001 f933 	bl	800143c <get_selector_position>
 80001d6:	4603      	mov	r3, r0
	         snprintf(Uart_str, 63, "Prog %d (%d) Speed  %d (%d) Temper  %d (%d)\r\n\0", get_selector_position(selectorProg,  ADC[selectorProg]),  ADC[selectorProg],
 80001d8:	461d      	mov	r5, r3
	         	                		 	 	 	 	 	 	 	 	 	 	      get_selector_position(selectorSpeed, ADC[selectorSpeed]), ADC[selectorSpeed],
 80001da:	4b98      	ldr	r3, [pc, #608]	; (800043c <main+0x2e0>)
 80001dc:	885b      	ldrh	r3, [r3, #2]
 80001de:	b29b      	uxth	r3, r3
	         snprintf(Uart_str, 63, "Prog %d (%d) Speed  %d (%d) Temper  %d (%d)\r\n\0", get_selector_position(selectorProg,  ADC[selectorProg]),  ADC[selectorProg],
 80001e0:	461e      	mov	r6, r3
	         																	      get_selector_position(selectorTemp,  ADC[selectorTemp]),  ADC[selectorTemp]);
 80001e2:	4b96      	ldr	r3, [pc, #600]	; (800043c <main+0x2e0>)
 80001e4:	889b      	ldrh	r3, [r3, #4]
 80001e6:	b29b      	uxth	r3, r3
 80001e8:	4619      	mov	r1, r3
 80001ea:	2002      	movs	r0, #2
 80001ec:	f001 f926 	bl	800143c <get_selector_position>
 80001f0:	4603      	mov	r3, r0
	         snprintf(Uart_str, 63, "Prog %d (%d) Speed  %d (%d) Temper  %d (%d)\r\n\0", get_selector_position(selectorProg,  ADC[selectorProg]),  ADC[selectorProg],
 80001f2:	461a      	mov	r2, r3
	         																	      get_selector_position(selectorTemp,  ADC[selectorTemp]),  ADC[selectorTemp]);
 80001f4:	4b91      	ldr	r3, [pc, #580]	; (800043c <main+0x2e0>)
 80001f6:	889b      	ldrh	r3, [r3, #4]
 80001f8:	b29b      	uxth	r3, r3
	         snprintf(Uart_str, 63, "Prog %d (%d) Speed  %d (%d) Temper  %d (%d)\r\n\0", get_selector_position(selectorProg,  ADC[selectorProg]),  ADC[selectorProg],
 80001fa:	9304      	str	r3, [sp, #16]
 80001fc:	9203      	str	r2, [sp, #12]
 80001fe:	9602      	str	r6, [sp, #8]
 8000200:	9501      	str	r5, [sp, #4]
 8000202:	9400      	str	r4, [sp, #0]
 8000204:	4643      	mov	r3, r8
 8000206:	4a8e      	ldr	r2, [pc, #568]	; (8000440 <main+0x2e4>)
 8000208:	213f      	movs	r1, #63	; 0x3f
 800020a:	488e      	ldr	r0, [pc, #568]	; (8000444 <main+0x2e8>)
 800020c:	f005 fd9e 	bl	8005d4c <sniprintf>
	         //HAL_UART_Transmit(&huart1, (uint8_t*)Uart_str, strlen(Uart_str), 1000);

	         //snprintf(Uart_str, 63, "Radio %d Mashine %d Start %d Prog %d  Speed  %d  Temper  %d \n", Flag_radio_ON, Flag_power_ON, Command_Massive[Start], Command_Massive[ProgNum], Command_Massive[Spin], Command_Massive[Temp]);

	         //snprintf(Uart_str, 63, "Delay %d Flag_start_wash %d Status %d step %d\r\n\0",  Sec_delay_start_wash, Flag_start_wash, buf_cmd_mass[Status], Step_wash_session);
	         snprintf(Uart_str, 63, "cmdA[Start]: %d buf[Start]: %d Sess: %d buf[END]: %d\r\n\0",  Command_Massive[Start], buf_cmd_mass[Start], Sec_count_sesion_connect, buf_cmd_mass[END]);
 8000210:	4b8d      	ldr	r3, [pc, #564]	; (8000448 <main+0x2ec>)
 8000212:	785b      	ldrb	r3, [r3, #1]
 8000214:	b2db      	uxtb	r3, r3
 8000216:	4618      	mov	r0, r3
 8000218:	4b8c      	ldr	r3, [pc, #560]	; (800044c <main+0x2f0>)
 800021a:	785b      	ldrb	r3, [r3, #1]
 800021c:	b2db      	uxtb	r3, r3
 800021e:	461a      	mov	r2, r3
 8000220:	4b8b      	ldr	r3, [pc, #556]	; (8000450 <main+0x2f4>)
 8000222:	881b      	ldrh	r3, [r3, #0]
 8000224:	b29b      	uxth	r3, r3
 8000226:	4619      	mov	r1, r3
 8000228:	4b88      	ldr	r3, [pc, #544]	; (800044c <main+0x2f0>)
 800022a:	799b      	ldrb	r3, [r3, #6]
 800022c:	b2db      	uxtb	r3, r3
 800022e:	9302      	str	r3, [sp, #8]
 8000230:	9101      	str	r1, [sp, #4]
 8000232:	9200      	str	r2, [sp, #0]
 8000234:	4603      	mov	r3, r0
 8000236:	4a87      	ldr	r2, [pc, #540]	; (8000454 <main+0x2f8>)
 8000238:	213f      	movs	r1, #63	; 0x3f
 800023a:	4882      	ldr	r0, [pc, #520]	; (8000444 <main+0x2e8>)
 800023c:	f005 fd86 	bl	8005d4c <sniprintf>
	         HAL_UART_Transmit(&huart1, (uint8_t*)Uart_str, strlen(Uart_str), 1000);
 8000240:	4880      	ldr	r0, [pc, #512]	; (8000444 <main+0x2e8>)
 8000242:	f7ff ff83 	bl	800014c <strlen>
 8000246:	4603      	mov	r3, r0
 8000248:	b29a      	uxth	r2, r3
 800024a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024e:	497d      	ldr	r1, [pc, #500]	; (8000444 <main+0x2e8>)
 8000250:	4879      	ldr	r0, [pc, #484]	; (8000438 <main+0x2dc>)
 8000252:	f005 f869 	bl	8005328 <HAL_UART_Transmit>

	                if (!Flag_power_ON && !Flag_radio_ON)  // если питание выкл и радио выкл гасим индикаторы отключаем стирку
 8000256:	4b80      	ldr	r3, [pc, #512]	; (8000458 <main+0x2fc>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	d12a      	bne.n	80002b6 <main+0x15a>
 8000260:	4b7e      	ldr	r3, [pc, #504]	; (800045c <main+0x300>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	2b00      	cmp	r3, #0
 8000268:	d125      	bne.n	80002b6 <main+0x15a>
	                {
	                	stop_wash(0);
 800026a:	2000      	movs	r0, #0
 800026c:	f001 f94c 	bl	8001508 <stop_wash>
	                	Flag_start_wash = Flag_wash = Step_wash_session = buf_cmd_mass[Status] = buf_cmd_mass[Start] = 0; status_wash_led(0);
 8000270:	2200      	movs	r2, #0
 8000272:	4b76      	ldr	r3, [pc, #472]	; (800044c <main+0x2f0>)
 8000274:	4611      	mov	r1, r2
 8000276:	7059      	strb	r1, [r3, #1]
 8000278:	4b74      	ldr	r3, [pc, #464]	; (800044c <main+0x2f0>)
 800027a:	4611      	mov	r1, r2
 800027c:	7159      	strb	r1, [r3, #5]
 800027e:	4b78      	ldr	r3, [pc, #480]	; (8000460 <main+0x304>)
 8000280:	701a      	strb	r2, [r3, #0]
 8000282:	4b77      	ldr	r3, [pc, #476]	; (8000460 <main+0x304>)
 8000284:	781a      	ldrb	r2, [r3, #0]
 8000286:	4b77      	ldr	r3, [pc, #476]	; (8000464 <main+0x308>)
 8000288:	701a      	strb	r2, [r3, #0]
 800028a:	4b76      	ldr	r3, [pc, #472]	; (8000464 <main+0x308>)
 800028c:	781a      	ldrb	r2, [r3, #0]
 800028e:	4b76      	ldr	r3, [pc, #472]	; (8000468 <main+0x30c>)
 8000290:	701a      	strb	r2, [r3, #0]
 8000292:	2000      	movs	r0, #0
 8000294:	f001 fa16 	bl	80016c4 <status_wash_led>
	                	led_off();
 8000298:	f001 f96c 	bl	8001574 <led_off>
	                	HAL_Delay(500);
 800029c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002a0:	f001 fed2 	bl	8002048 <HAL_Delay>
	                	Power_out_OFF;
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002aa:	4870      	ldr	r0, [pc, #448]	; (800046c <main+0x310>)
 80002ac:	f003 f8d3 	bl	8003456 <HAL_GPIO_WritePin>
	                	Sec_count_sesion_connect = 0;
 80002b0:	4b67      	ldr	r3, [pc, #412]	; (8000450 <main+0x2f4>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	801a      	strh	r2, [r3, #0]
	                }
/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
	                if (!Flag_power_ON && Flag_radio_ON)   // включено радио
 80002b6:	4b68      	ldr	r3, [pc, #416]	; (8000458 <main+0x2fc>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d10a      	bne.n	80002d6 <main+0x17a>
 80002c0:	4b66      	ldr	r3, [pc, #408]	; (800045c <main+0x300>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d005      	beq.n	80002d6 <main+0x17a>
	                {
	                	Power_out_OFF;
 80002ca:	2200      	movs	r2, #0
 80002cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002d0:	4866      	ldr	r0, [pc, #408]	; (800046c <main+0x310>)
 80002d2:	f003 f8c0 	bl	8003456 <HAL_GPIO_WritePin>



	                }
/*-------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
	                if (Flag_power_ON) 						// режим стирка
 80002d6:	4b60      	ldr	r3, [pc, #384]	; (8000458 <main+0x2fc>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	2b00      	cmp	r3, #0
 80002de:	f43f af62 	beq.w	80001a6 <main+0x4a>
	                {
	                   Power_out_ON;						// ВКЛ питание на контрол. машины
 80002e2:	2201      	movs	r2, #1
 80002e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002e8:	4860      	ldr	r0, [pc, #384]	; (800046c <main+0x310>)
 80002ea:	f003 f8b4 	bl	8003456 <HAL_GPIO_WritePin>
	                   if(Sec_count_sesion_connect == 10)setModeRXuart2();
 80002ee:	4b58      	ldr	r3, [pc, #352]	; (8000450 <main+0x2f4>)
 80002f0:	881b      	ldrh	r3, [r3, #0]
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	2b0a      	cmp	r3, #10
 80002f6:	d101      	bne.n	80002fc <main+0x1a0>
 80002f8:	f000 fec4 	bl	8001084 <setModeRXuart2>
	                   uint16_t sum_err = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	80fb      	strh	r3, [r7, #6]
	                   for(uint8_t i = 0; i < Tot_arr_err; i++) sum_err += Error_Arr[i];
 8000300:	2300      	movs	r3, #0
 8000302:	717b      	strb	r3, [r7, #5]
 8000304:	e009      	b.n	800031a <main+0x1be>
 8000306:	797b      	ldrb	r3, [r7, #5]
 8000308:	4a59      	ldr	r2, [pc, #356]	; (8000470 <main+0x314>)
 800030a:	5cd3      	ldrb	r3, [r2, r3]
 800030c:	b29a      	uxth	r2, r3
 800030e:	88fb      	ldrh	r3, [r7, #6]
 8000310:	4413      	add	r3, r2
 8000312:	80fb      	strh	r3, [r7, #6]
 8000314:	797b      	ldrb	r3, [r7, #5]
 8000316:	3301      	adds	r3, #1
 8000318:	717b      	strb	r3, [r7, #5]
 800031a:	797b      	ldrb	r3, [r7, #5]
 800031c:	2b0f      	cmp	r3, #15
 800031e:	d9f2      	bls.n	8000306 <main+0x1aa>
	                   if (sum_err > 1 && Flag_start_wash == OFF) error_display(); // если есть ощибки в памяти то выводим их на панель
 8000320:	88fb      	ldrh	r3, [r7, #6]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d906      	bls.n	8000334 <main+0x1d8>
 8000326:	4b50      	ldr	r3, [pc, #320]	; (8000468 <main+0x30c>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	b2db      	uxtb	r3, r3
 800032c:	2b00      	cmp	r3, #0
 800032e:	d101      	bne.n	8000334 <main+0x1d8>
 8000330:	f001 fa90 	bl	8001854 <error_display>

	                   if (Sec_delay_start_wash == 0 && Flag_start_wash == ON && Flag_wash == 0 && Step_wash_session < 4)
 8000334:	4b4f      	ldr	r3, [pc, #316]	; (8000474 <main+0x318>)
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	b29b      	uxth	r3, r3
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 810d 	bne.w	800055a <main+0x3fe>
 8000340:	4b49      	ldr	r3, [pc, #292]	; (8000468 <main+0x30c>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b01      	cmp	r3, #1
 8000348:	f040 8107 	bne.w	800055a <main+0x3fe>
 800034c:	4b45      	ldr	r3, [pc, #276]	; (8000464 <main+0x308>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	f040 8102 	bne.w	800055a <main+0x3fe>
 8000356:	4b42      	ldr	r3, [pc, #264]	; (8000460 <main+0x304>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b03      	cmp	r3, #3
 800035c:	f200 80fd 	bhi.w	800055a <main+0x3fe>
	                   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	  {
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   status_wash_led(OFF);	// гасим индикаторы статуса стирки - отсрочки
 8000360:	2000      	movs	r0, #0
 8000362:	f001 f9af 	bl	80016c4 <status_wash_led>
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   Led_array[3] = OFF;      // индикатор кнопки таймера отсрочки стирки
 8000366:	4b44      	ldr	r3, [pc, #272]	; (8000478 <main+0x31c>)
 8000368:	2200      	movs	r2, #0
 800036a:	80da      	strh	r2, [r3, #6]
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   Flag_wash = 1;
 800036c:	4b3d      	ldr	r3, [pc, #244]	; (8000464 <main+0x308>)
 800036e:	2201      	movs	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	// супер стирка доп. прог                             здесь номер программы
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   		 if ( Led_array[6] && Step_wash_session == 0) {Step_wash_session = 1; start_wash(_get_Num_Prog, _get_Speed_Spin, _get_Temp_Wash); goto Exit;}
 8000372:	4b41      	ldr	r3, [pc, #260]	; (8000478 <main+0x31c>)
 8000374:	899b      	ldrh	r3, [r3, #12]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d026      	beq.n	80003c8 <main+0x26c>
 800037a:	4b39      	ldr	r3, [pc, #228]	; (8000460 <main+0x304>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d122      	bne.n	80003c8 <main+0x26c>
 8000382:	4b37      	ldr	r3, [pc, #220]	; (8000460 <main+0x304>)
 8000384:	2201      	movs	r2, #1
 8000386:	701a      	strb	r2, [r3, #0]
 8000388:	4b2c      	ldr	r3, [pc, #176]	; (800043c <main+0x2e0>)
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	b29b      	uxth	r3, r3
 800038e:	4619      	mov	r1, r3
 8000390:	2000      	movs	r0, #0
 8000392:	f001 f853 	bl	800143c <get_selector_position>
 8000396:	4603      	mov	r3, r0
 8000398:	461c      	mov	r4, r3
 800039a:	4b28      	ldr	r3, [pc, #160]	; (800043c <main+0x2e0>)
 800039c:	885b      	ldrh	r3, [r3, #2]
 800039e:	b29b      	uxth	r3, r3
 80003a0:	4619      	mov	r1, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	f001 f84a 	bl	800143c <get_selector_position>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461d      	mov	r5, r3
 80003ac:	4b23      	ldr	r3, [pc, #140]	; (800043c <main+0x2e0>)
 80003ae:	889b      	ldrh	r3, [r3, #4]
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	4619      	mov	r1, r3
 80003b4:	2002      	movs	r0, #2
 80003b6:	f001 f841 	bl	800143c <get_selector_position>
 80003ba:	4603      	mov	r3, r0
 80003bc:	461a      	mov	r2, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	4620      	mov	r0, r4
 80003c2:	f001 f87d 	bl	80014c0 <start_wash>
 80003c6:	e0cb      	b.n	8000560 <main+0x404>
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   		 if (!Led_array[6] && Step_wash_session == 0)  Step_wash_session = 1;
 80003c8:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <main+0x31c>)
 80003ca:	899b      	ldrh	r3, [r3, #12]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d106      	bne.n	80003de <main+0x282>
 80003d0:	4b23      	ldr	r3, [pc, #140]	; (8000460 <main+0x304>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d102      	bne.n	80003de <main+0x282>
 80003d8:	4b21      	ldr	r3, [pc, #132]	; (8000460 <main+0x304>)
 80003da:	2201      	movs	r2, #1
 80003dc:	701a      	strb	r2, [r3, #0]
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   		 	 	 	 	 	   // быстрая стирка доп. прог                            здесь номер программы
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   		 if ( Led_array[5] && Step_wash_session == 1) {Step_wash_session = 2; start_wash(_get_Num_Prog, _get_Speed_Spin, _get_Temp_Wash); goto Exit;}
 80003de:	4b26      	ldr	r3, [pc, #152]	; (8000478 <main+0x31c>)
 80003e0:	895b      	ldrh	r3, [r3, #10]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d04a      	beq.n	800047c <main+0x320>
 80003e6:	4b1e      	ldr	r3, [pc, #120]	; (8000460 <main+0x304>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d146      	bne.n	800047c <main+0x320>
 80003ee:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <main+0x304>)
 80003f0:	2202      	movs	r2, #2
 80003f2:	701a      	strb	r2, [r3, #0]
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <main+0x2e0>)
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	4619      	mov	r1, r3
 80003fc:	2000      	movs	r0, #0
 80003fe:	f001 f81d 	bl	800143c <get_selector_position>
 8000402:	4603      	mov	r3, r0
 8000404:	461c      	mov	r4, r3
 8000406:	4b0d      	ldr	r3, [pc, #52]	; (800043c <main+0x2e0>)
 8000408:	885b      	ldrh	r3, [r3, #2]
 800040a:	b29b      	uxth	r3, r3
 800040c:	4619      	mov	r1, r3
 800040e:	2001      	movs	r0, #1
 8000410:	f001 f814 	bl	800143c <get_selector_position>
 8000414:	4603      	mov	r3, r0
 8000416:	461d      	mov	r5, r3
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <main+0x2e0>)
 800041a:	889b      	ldrh	r3, [r3, #4]
 800041c:	b29b      	uxth	r3, r3
 800041e:	4619      	mov	r1, r3
 8000420:	2002      	movs	r0, #2
 8000422:	f001 f80b 	bl	800143c <get_selector_position>
 8000426:	4603      	mov	r3, r0
 8000428:	461a      	mov	r2, r3
 800042a:	4629      	mov	r1, r5
 800042c:	4620      	mov	r0, r4
 800042e:	f001 f847 	bl	80014c0 <start_wash>
 8000432:	e095      	b.n	8000560 <main+0x404>
 8000434:	08006600 	.word	0x08006600
 8000438:	20000210 	.word	0x20000210
 800043c:	20000090 	.word	0x20000090
 8000440:	08006610 	.word	0x08006610
 8000444:	20000098 	.word	0x20000098
 8000448:	200000ec 	.word	0x200000ec
 800044c:	200000d8 	.word	0x200000d8
 8000450:	200003bc 	.word	0x200003bc
 8000454:	08006640 	.word	0x08006640
 8000458:	20000338 	.word	0x20000338
 800045c:	20000339 	.word	0x20000339
 8000460:	200002b0 	.word	0x200002b0
 8000464:	20000298 	.word	0x20000298
 8000468:	200001dc 	.word	0x200001dc
 800046c:	40011000 	.word	0x40011000
 8000470:	20000114 	.word	0x20000114
 8000474:	20000140 	.word	0x20000140
 8000478:	20000100 	.word	0x20000100
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   		 if (!Led_array[5] && Step_wash_session == 1)  Step_wash_session = 2;
 800047c:	4b48      	ldr	r3, [pc, #288]	; (80005a0 <main+0x444>)
 800047e:	895b      	ldrh	r3, [r3, #10]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d106      	bne.n	8000492 <main+0x336>
 8000484:	4b47      	ldr	r3, [pc, #284]	; (80005a4 <main+0x448>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d102      	bne.n	8000492 <main+0x336>
 800048c:	4b45      	ldr	r3, [pc, #276]	; (80005a4 <main+0x448>)
 800048e:	2202      	movs	r2, #2
 8000490:	701a      	strb	r2, [r3, #0]
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   		 	 	 	 	 	 	 // обязательная стирка выбранная на селекторе
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   		 if (Step_wash_session == 2) {Step_wash_session = 3; start_wash(_get_Num_Prog, _get_Speed_Spin, _get_Temp_Wash);
 8000492:	4b44      	ldr	r3, [pc, #272]	; (80005a4 <main+0x448>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b02      	cmp	r3, #2
 8000498:	d129      	bne.n	80004ee <main+0x392>
 800049a:	4b42      	ldr	r3, [pc, #264]	; (80005a4 <main+0x448>)
 800049c:	2203      	movs	r2, #3
 800049e:	701a      	strb	r2, [r3, #0]
 80004a0:	4b41      	ldr	r3, [pc, #260]	; (80005a8 <main+0x44c>)
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	4619      	mov	r1, r3
 80004a8:	2000      	movs	r0, #0
 80004aa:	f000 ffc7 	bl	800143c <get_selector_position>
 80004ae:	4603      	mov	r3, r0
 80004b0:	461c      	mov	r4, r3
 80004b2:	4b3d      	ldr	r3, [pc, #244]	; (80005a8 <main+0x44c>)
 80004b4:	885b      	ldrh	r3, [r3, #2]
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	4619      	mov	r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	f000 ffbe 	bl	800143c <get_selector_position>
 80004c0:	4603      	mov	r3, r0
 80004c2:	461d      	mov	r5, r3
 80004c4:	4b38      	ldr	r3, [pc, #224]	; (80005a8 <main+0x44c>)
 80004c6:	889b      	ldrh	r3, [r3, #4]
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	4619      	mov	r1, r3
 80004cc:	2002      	movs	r0, #2
 80004ce:	f000 ffb5 	bl	800143c <get_selector_position>
 80004d2:	4603      	mov	r3, r0
 80004d4:	461a      	mov	r2, r3
 80004d6:	4629      	mov	r1, r5
 80004d8:	4620      	mov	r0, r4
 80004da:	f000 fff1 	bl	80014c0 <start_wash>
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   		 	 	 	 	 if (!Led_array[4]) Step_wash_session = 4;
 80004de:	4b30      	ldr	r3, [pc, #192]	; (80005a0 <main+0x444>)
 80004e0:	891b      	ldrh	r3, [r3, #8]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d13b      	bne.n	800055e <main+0x402>
 80004e6:	4b2f      	ldr	r3, [pc, #188]	; (80005a4 <main+0x448>)
 80004e8:	2204      	movs	r2, #4
 80004ea:	701a      	strb	r2, [r3, #0]
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   		 	 	 	 	 goto Exit;}
 80004ec:	e037      	b.n	800055e <main+0x402>
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   		 	 	 	 	 	 	 // дополнит полоскание доп. прог                   здесь номер программы
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   		 if ( Led_array[4] && Step_wash_session == 3) {Step_wash_session = 4; start_wash(_get_Num_Prog, _get_Speed_Spin, _get_Temp_Wash);}
 80004ee:	4b2c      	ldr	r3, [pc, #176]	; (80005a0 <main+0x444>)
 80004f0:	891b      	ldrh	r3, [r3, #8]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d025      	beq.n	8000542 <main+0x3e6>
 80004f6:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <main+0x448>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	d121      	bne.n	8000542 <main+0x3e6>
 80004fe:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <main+0x448>)
 8000500:	2204      	movs	r2, #4
 8000502:	701a      	strb	r2, [r3, #0]
 8000504:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <main+0x44c>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	b29b      	uxth	r3, r3
 800050a:	4619      	mov	r1, r3
 800050c:	2000      	movs	r0, #0
 800050e:	f000 ff95 	bl	800143c <get_selector_position>
 8000512:	4603      	mov	r3, r0
 8000514:	461c      	mov	r4, r3
 8000516:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <main+0x44c>)
 8000518:	885b      	ldrh	r3, [r3, #2]
 800051a:	b29b      	uxth	r3, r3
 800051c:	4619      	mov	r1, r3
 800051e:	2001      	movs	r0, #1
 8000520:	f000 ff8c 	bl	800143c <get_selector_position>
 8000524:	4603      	mov	r3, r0
 8000526:	461d      	mov	r5, r3
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <main+0x44c>)
 800052a:	889b      	ldrh	r3, [r3, #4]
 800052c:	b29b      	uxth	r3, r3
 800052e:	4619      	mov	r1, r3
 8000530:	2002      	movs	r0, #2
 8000532:	f000 ff83 	bl	800143c <get_selector_position>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	4629      	mov	r1, r5
 800053c:	4620      	mov	r0, r4
 800053e:	f000 ffbf 	bl	80014c0 <start_wash>
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   		 if (!Led_array[4] && Step_wash_session == 3)  Step_wash_session = 4;
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <main+0x444>)
 8000544:	891b      	ldrh	r3, [r3, #8]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d107      	bne.n	800055a <main+0x3fe>
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <main+0x448>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b03      	cmp	r3, #3
 8000550:	d103      	bne.n	800055a <main+0x3fe>
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <main+0x448>)
 8000554:	2204      	movs	r2, #4
 8000556:	701a      	strb	r2, [r3, #0]
 8000558:	e002      	b.n	8000560 <main+0x404>


	                   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   }
	                   Exit:
 800055a:	bf00      	nop
 800055c:	e000      	b.n	8000560 <main+0x404>
	                	   	   	   	   	   	   	   	   	   	   	   	   	   	   		 	 	 	 	 goto Exit;}
 800055e:	bf00      	nop
	                   if (Flag_start_wash == ON) {status_wash_led(0); status_wash_led(buf_cmd_mass[Status]);} 					// выдаем статус на панель если режим ON
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <main+0x450>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b01      	cmp	r3, #1
 8000568:	d108      	bne.n	800057c <main+0x420>
 800056a:	2000      	movs	r0, #0
 800056c:	f001 f8aa 	bl	80016c4 <status_wash_led>
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <main+0x454>)
 8000572:	795b      	ldrb	r3, [r3, #5]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f001 f8a4 	bl	80016c4 <status_wash_led>
	                   if (Flag_wash == ON && Flag_start_wash == OFF) {Step_wash_session = 0; stop_wash(OFF);	}					// остановка стирки по кнопке
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <main+0x458>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	f47f ae10 	bne.w	80001a6 <main+0x4a>
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <main+0x450>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	2b00      	cmp	r3, #0
 800058e:	f47f ae0a 	bne.w	80001a6 <main+0x4a>
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <main+0x448>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	2000      	movs	r0, #0
 800059a:	f000 ffb5 	bl	8001508 <stop_wash>
  {
 800059e:	e602      	b.n	80001a6 <main+0x4a>
 80005a0:	20000100 	.word	0x20000100
 80005a4:	200002b0 	.word	0x200002b0
 80005a8:	20000090 	.word	0x20000090
 80005ac:	200001dc 	.word	0x200001dc
 80005b0:	200000d8 	.word	0x200000d8
 80005b4:	20000298 	.word	0x20000298

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005c2:	2228      	movs	r2, #40	; 0x28
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 fbb8 	bl	8005d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005e8:	2309      	movs	r3, #9
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f6:	2301      	movs	r3, #1
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005fa:	2301      	movs	r3, #1
 80005fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000608:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000612:	4618      	mov	r0, r3
 8000614:	f003 f8a8 	bl	8003768 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800061e:	f001 f98b 	bl	8001938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000632:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2102      	movs	r1, #2
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fb12 	bl	8003c68 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800064a:	f001 f975 	bl	8001938 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800064e:	2303      	movs	r3, #3
 8000650:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000656:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000658:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800065c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fc9b 	bl	8003f9c <HAL_RCCEx_PeriphCLKConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800066c:	f001 f964 	bl	8001938 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	; 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000688:	4b27      	ldr	r3, [pc, #156]	; (8000728 <MX_ADC1_Init+0xb0>)
 800068a:	4a28      	ldr	r2, [pc, #160]	; (800072c <MX_ADC1_Init+0xb4>)
 800068c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_ADC1_Init+0xb0>)
 8000690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000694:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000696:	4b24      	ldr	r3, [pc, #144]	; (8000728 <MX_ADC1_Init+0xb0>)
 8000698:	2200      	movs	r2, #0
 800069a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <MX_ADC1_Init+0xb0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a2:	4b21      	ldr	r3, [pc, #132]	; (8000728 <MX_ADC1_Init+0xb0>)
 80006a4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_ADC1_Init+0xb0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <MX_ADC1_Init+0xb0>)
 80006b2:	2203      	movs	r2, #3
 80006b4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b6:	481c      	ldr	r0, [pc, #112]	; (8000728 <MX_ADC1_Init+0xb0>)
 80006b8:	f001 fcea 	bl	8002090 <HAL_ADC_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80006c2:	f001 f939 	bl	8001938 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80006ce:	2306      	movs	r3, #6
 80006d0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	4814      	ldr	r0, [pc, #80]	; (8000728 <MX_ADC1_Init+0xb0>)
 80006d8:	f001 fef0 	bl	80024bc <HAL_ADC_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006e2:	f001 f929 	bl	8001938 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4619      	mov	r1, r3
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_ADC1_Init+0xb0>)
 80006f4:	f001 fee2 	bl	80024bc <HAL_ADC_ConfigChannel>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80006fe:	f001 f91b 	bl	8001938 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000702:	2303      	movs	r3, #3
 8000704:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000706:	2303      	movs	r3, #3
 8000708:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <MX_ADC1_Init+0xb0>)
 8000710:	f001 fed4 	bl	80024bc <HAL_ADC_ConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800071a:	f001 f90d 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200001e0 	.word	0x200001e0
 800072c:	40012400 	.word	0x40012400

08000730 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_I2C2_Init+0x50>)
 8000736:	4a13      	ldr	r2, [pc, #76]	; (8000784 <MX_I2C2_Init+0x54>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_I2C2_Init+0x50>)
 800073c:	4a12      	ldr	r2, [pc, #72]	; (8000788 <MX_I2C2_Init+0x58>)
 800073e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_I2C2_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_I2C2_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_I2C2_Init+0x50>)
 800074e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000752:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_I2C2_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_I2C2_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_I2C2_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_I2C2_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_I2C2_Init+0x50>)
 800076e:	f002 febb 	bl	80034e8 <HAL_I2C_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000778:	f001 f8de 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000188 	.word	0x20000188
 8000784:	40005800 	.word	0x40005800
 8000788:	000186a0 	.word	0x000186a0

0800078c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2100      	movs	r1, #0
 8000796:	460a      	mov	r2, r1
 8000798:	801a      	strh	r2, [r3, #0]
 800079a:	460a      	mov	r2, r1
 800079c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_RTC_Init+0x8c>)
 80007a4:	4a1d      	ldr	r2, [pc, #116]	; (800081c <MX_RTC_Init+0x90>)
 80007a6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_RTC_Init+0x8c>)
 80007aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_RTC_Init+0x8c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007b6:	4818      	ldr	r0, [pc, #96]	; (8000818 <MX_RTC_Init+0x8c>)
 80007b8:	f003 fd6a 	bl	8004290 <HAL_RTC_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80007c2:	f001 f8b9 	bl	8001938 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2201      	movs	r2, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	480f      	ldr	r0, [pc, #60]	; (8000818 <MX_RTC_Init+0x8c>)
 80007da:	f003 fdef 	bl	80043bc <HAL_RTC_SetTime>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80007e4:	f001 f8a8 	bl	8001938 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007e8:	2301      	movs	r3, #1
 80007ea:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80007ec:	2301      	movs	r3, #1
 80007ee:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	2201      	movs	r2, #1
 80007fc:	4619      	mov	r1, r3
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <MX_RTC_Init+0x8c>)
 8000800:	f003 fe74 	bl	80044ec <HAL_RTC_SetDate>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800080a:	f001 f895 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000029c 	.word	0x2000029c
 800081c:	40002800 	.word	0x40002800

08000820 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_TIM1_Init+0x98>)
 800083e:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <MX_TIM1_Init+0x9c>)
 8000840:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200;
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_TIM1_Init+0x98>)
 8000844:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000848:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_TIM1_Init+0x98>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 22;
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_TIM1_Init+0x98>)
 8000852:	2216      	movs	r2, #22
 8000854:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_TIM1_Init+0x98>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_TIM1_Init+0x98>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_TIM1_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000868:	4813      	ldr	r0, [pc, #76]	; (80008b8 <MX_TIM1_Init+0x98>)
 800086a:	f004 f905 	bl	8004a78 <HAL_TIM_Base_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000874:	f001 f860 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	4619      	mov	r1, r3
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <MX_TIM1_Init+0x98>)
 8000886:	f004 fa77 	bl	8004d78 <HAL_TIM_ConfigClockSource>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000890:	f001 f852 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000894:	2300      	movs	r3, #0
 8000896:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_TIM1_Init+0x98>)
 80008a2:	f004 fc49 	bl	8005138 <HAL_TIMEx_MasterConfigSynchronization>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008ac:	f001 f844 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200002b4 	.word	0x200002b4
 80008bc:	40012c00 	.word	0x40012c00

080008c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d4:	463b      	mov	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008dc:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_TIM2_Init+0x94>)
 80008de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_TIM2_Init+0x94>)
 80008e6:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80008ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_TIM2_Init+0x94>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_TIM2_Init+0x94>)
 80008f4:	2264      	movs	r2, #100	; 0x64
 80008f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_TIM2_Init+0x94>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_TIM2_Init+0x94>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000904:	4813      	ldr	r0, [pc, #76]	; (8000954 <MX_TIM2_Init+0x94>)
 8000906:	f004 f8b7 	bl	8004a78 <HAL_TIM_Base_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000910:	f001 f812 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	4619      	mov	r1, r3
 8000920:	480c      	ldr	r0, [pc, #48]	; (8000954 <MX_TIM2_Init+0x94>)
 8000922:	f004 fa29 	bl	8004d78 <HAL_TIM_ConfigClockSource>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800092c:	f001 f804 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000930:	2300      	movs	r3, #0
 8000932:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_TIM2_Init+0x94>)
 800093e:	f004 fbfb 	bl	8005138 <HAL_TIMEx_MasterConfigSynchronization>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000948:	f000 fff6 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000033c 	.word	0x2000033c

08000958 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_TIM4_Init+0x94>)
 8000976:	4a1e      	ldr	r2, [pc, #120]	; (80009f0 <MX_TIM4_Init+0x98>)
 8000978:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_TIM4_Init+0x94>)
 800097c:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000980:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_TIM4_Init+0x94>)
 8000984:	2210      	movs	r2, #16
 8000986:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_TIM4_Init+0x94>)
 800098a:	2232      	movs	r2, #50	; 0x32
 800098c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_TIM4_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_TIM4_Init+0x94>)
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800099a:	4814      	ldr	r0, [pc, #80]	; (80009ec <MX_TIM4_Init+0x94>)
 800099c:	f004 f86c 	bl	8004a78 <HAL_TIM_Base_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80009a6:	f000 ffc7 	bl	8001938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	4619      	mov	r1, r3
 80009b6:	480d      	ldr	r0, [pc, #52]	; (80009ec <MX_TIM4_Init+0x94>)
 80009b8:	f004 f9de 	bl	8004d78 <HAL_TIM_ConfigClockSource>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80009c2:	f000 ffb9 	bl	8001938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009ce:	463b      	mov	r3, r7
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_TIM4_Init+0x94>)
 80009d4:	f004 fbb0 	bl	8005138 <HAL_TIMEx_MasterConfigSynchronization>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80009de:	f000 ffab 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000144 	.word	0x20000144
 80009f0:	40000800 	.word	0x40000800

080009f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_USART1_UART_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART1_UART_Init+0x4c>)
 8000a2c:	f004 fbda 	bl	80051e4 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a36:	f000 ff7f 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000210 	.word	0x20000210
 8000a44:	40013800 	.word	0x40013800

08000a48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <MX_USART2_UART_Init+0x50>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a80:	f004 fbfd 	bl	800527e <HAL_HalfDuplex_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a8a:	f000 ff55 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000037c 	.word	0x2000037c
 8000a98:	40004400 	.word	0x40004400

08000a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_DMA_Init+0x48>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <MX_DMA_Init+0x48>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6153      	str	r3, [r2, #20]
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_DMA_Init+0x48>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	200b      	movs	r0, #11
 8000ac0:	f002 f859 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ac4:	200b      	movs	r0, #11
 8000ac6:	f002 f872 	bl	8002bae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f002 f851 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ad4:	200f      	movs	r0, #15
 8000ad6:	f002 f86a 	bl	8002bae <HAL_NVIC_EnableIRQ>

}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afc:	4b58      	ldr	r3, [pc, #352]	; (8000c60 <MX_GPIO_Init+0x178>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a57      	ldr	r2, [pc, #348]	; (8000c60 <MX_GPIO_Init+0x178>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b55      	ldr	r3, [pc, #340]	; (8000c60 <MX_GPIO_Init+0x178>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b14:	4b52      	ldr	r3, [pc, #328]	; (8000c60 <MX_GPIO_Init+0x178>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a51      	ldr	r2, [pc, #324]	; (8000c60 <MX_GPIO_Init+0x178>)
 8000b1a:	f043 0320 	orr.w	r3, r3, #32
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b4f      	ldr	r3, [pc, #316]	; (8000c60 <MX_GPIO_Init+0x178>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0320 	and.w	r3, r3, #32
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	4b4c      	ldr	r3, [pc, #304]	; (8000c60 <MX_GPIO_Init+0x178>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a4b      	ldr	r2, [pc, #300]	; (8000c60 <MX_GPIO_Init+0x178>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b49      	ldr	r3, [pc, #292]	; (8000c60 <MX_GPIO_Init+0x178>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b44:	4b46      	ldr	r3, [pc, #280]	; (8000c60 <MX_GPIO_Init+0x178>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a45      	ldr	r2, [pc, #276]	; (8000c60 <MX_GPIO_Init+0x178>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b43      	ldr	r3, [pc, #268]	; (8000c60 <MX_GPIO_Init+0x178>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000b62:	4840      	ldr	r0, [pc, #256]	; (8000c64 <MX_GPIO_Init+0x17c>)
 8000b64:	f002 fc77 	bl	8003456 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f247 0138 	movw	r1, #28728	; 0x7038
 8000b6e:	483e      	ldr	r0, [pc, #248]	; (8000c68 <MX_GPIO_Init+0x180>)
 8000b70:	f002 fc71 	bl	8003456 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2302      	movs	r3, #2
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4835      	ldr	r0, [pc, #212]	; (8000c64 <MX_GPIO_Init+0x17c>)
 8000b8e:	f002 fac7 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b92:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	482e      	ldr	r0, [pc, #184]	; (8000c64 <MX_GPIO_Init+0x17c>)
 8000bac:	f002 fab8 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_11
 8000bb0:	f649 1330 	movw	r3, #39216	; 0x9930
 8000bb4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <MX_GPIO_Init+0x184>)
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	482a      	ldr	r0, [pc, #168]	; (8000c70 <MX_GPIO_Init+0x188>)
 8000bc6:	f002 faab 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 8000bca:	f247 0338 	movw	r3, #28728	; 0x7038
 8000bce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4821      	ldr	r0, [pc, #132]	; (8000c68 <MX_GPIO_Init+0x180>)
 8000be4:	f002 fa9c 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481a      	ldr	r0, [pc, #104]	; (8000c68 <MX_GPIO_Init+0x180>)
 8000bfe:	f002 fa8f 	bl	8003120 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_CAN1_2();
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_GPIO_Init+0x18c>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <MX_GPIO_Init+0x18c>)
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	200a      	movs	r0, #10
 8000c2c:	f001 ffa3 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f001 ffbc 	bl	8002bae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2107      	movs	r1, #7
 8000c3a:	2017      	movs	r0, #23
 8000c3c:	f001 ff9b 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c40:	2017      	movs	r0, #23
 8000c42:	f001 ffb4 	bl	8002bae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2107      	movs	r1, #7
 8000c4a:	2028      	movs	r0, #40	; 0x28
 8000c4c:	f001 ff93 	bl	8002b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c50:	2028      	movs	r0, #40	; 0x28
 8000c52:	f001 ffac 	bl	8002bae <HAL_NVIC_EnableIRQ>

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40011000 	.word	0x40011000
 8000c68:	40010c00 	.word	0x40010c00
 8000c6c:	10210000 	.word	0x10210000
 8000c70:	40010800 	.word	0x40010800
 8000c74:	40010000 	.word	0x40010000

08000c78 <HAL_RTCEx_RTCEventCallback>:

/* USER CODE BEGIN 4 */
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
void HAL_RTCEx_RTCEventCallback (RTC_HandleTypeDef *hrtc)				// прерывание 1 раз в секунду
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 if(RTC_IT_SEC)
 {
	 Sec_count++;
 8000c80:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <HAL_RTCEx_RTCEventCallback+0xc0>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	3301      	adds	r3, #1
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <HAL_RTCEx_RTCEventCallback+0xc0>)
 8000c8c:	801a      	strh	r2, [r3, #0]
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c92:	482a      	ldr	r0, [pc, #168]	; (8000d3c <HAL_RTCEx_RTCEventCallback+0xc4>)
 8000c94:	f002 fbf7 	bl	8003486 <HAL_GPIO_TogglePin>

	 if(Sec_count %2 == 0 && Flag_power_ON && !Flag_start_wash) 											// если только вкл питания
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <HAL_RTCEx_RTCEventCallback+0xc0>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10f      	bne.n	8000cc8 <HAL_RTCEx_RTCEventCallback+0x50>
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <HAL_RTCEx_RTCEventCallback+0xc8>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d00a      	beq.n	8000cc8 <HAL_RTCEx_RTCEventCallback+0x50>
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <HAL_RTCEx_RTCEventCallback+0xcc>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d105      	bne.n	8000cc8 <HAL_RTCEx_RTCEventCallback+0x50>
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 {
		 	 	 	 	 	 	 	 	 	 	 	 	 	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC, 3); // стартуем АЦП  для преобразования
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	4922      	ldr	r1, [pc, #136]	; (8000d48 <HAL_RTCEx_RTCEventCallback+0xd0>)
 8000cc0:	4822      	ldr	r0, [pc, #136]	; (8000d4c <HAL_RTCEx_RTCEventCallback+0xd4>)
 8000cc2:	f001 fabd 	bl	8002240 <HAL_ADC_Start_DMA>
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	  return;
 8000cc6:	e034      	b.n	8000d32 <HAL_RTCEx_RTCEventCallback+0xba>
	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 }
	 if(Sec_delay_start_wash != 0 && Flag_start_wash == ON) Sec_delay_start_wash--;								// если таймер включен и флаг старта стирки уменьшаем его на 1
 8000cc8:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <HAL_RTCEx_RTCEventCallback+0xd8>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00b      	beq.n	8000cea <HAL_RTCEx_RTCEventCallback+0x72>
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <HAL_RTCEx_RTCEventCallback+0xcc>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d106      	bne.n	8000cea <HAL_RTCEx_RTCEventCallback+0x72>
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <HAL_RTCEx_RTCEventCallback+0xd8>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <HAL_RTCEx_RTCEventCallback+0xd8>)
 8000ce8:	801a      	strh	r2, [r3, #0]
	 HAL_ADC_Stop_DMA(&hadc1); 																				// стоп АЦП
 8000cea:	4818      	ldr	r0, [pc, #96]	; (8000d4c <HAL_RTCEx_RTCEventCallback+0xd4>)
 8000cec:	f001 fb86 	bl	80023fc <HAL_ADC_Stop_DMA>
	 if(!Flag_power_ON)  Led_array[led_power] = 0; else Sec_count_sesion_connect++;									// если флаг выкл питание гасим индикатор, а если ВКЛ счет сек между сенсами связи
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HAL_RTCEx_RTCEventCallback+0xc8>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d103      	bne.n	8000d02 <HAL_RTCEx_RTCEventCallback+0x8a>
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_RTCEx_RTCEventCallback+0xdc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	821a      	strh	r2, [r3, #16]
 8000d00:	e006      	b.n	8000d10 <HAL_RTCEx_RTCEventCallback+0x98>
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_RTCEx_RTCEventCallback+0xe0>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	3301      	adds	r3, #1
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_RTCEx_RTCEventCallback+0xe0>)
 8000d0e:	801a      	strh	r2, [r3, #0]
	 if(Flag_power_ON && Flag_start_wash) Led_array[led_power] = led_8;												// если есть питание и старт стирки включаем индикатор
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_RTCEx_RTCEventCallback+0xc8>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d008      	beq.n	8000d2c <HAL_RTCEx_RTCEventCallback+0xb4>
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_RTCEx_RTCEventCallback+0xcc>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d003      	beq.n	8000d2c <HAL_RTCEx_RTCEventCallback+0xb4>
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_RTCEx_RTCEventCallback+0xdc>)
 8000d26:	f241 0230 	movw	r2, #4144	; 0x1030
 8000d2a:	821a      	strh	r2, [r3, #16]
	 check_errors(0);																						// если от мастера пришли ошибки узлов то их обрабатываем \ выводим
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f000 fc89 	bl	8001644 <check_errors>
	 //status_wash_led(buf_cmd_mass[Status]);
 }
}
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2000008c 	.word	0x2000008c
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	20000338 	.word	0x20000338
 8000d44:	200001dc 	.word	0x200001dc
 8000d48:	20000090 	.word	0x20000090
 8000d4c:	200001e0 	.word	0x200001e0
 8000d50:	20000140 	.word	0x20000140
 8000d54:	20000100 	.word	0x20000100
 8000d58:	200003bc 	.word	0x200003bc

08000d5c <setup>:
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
void setup(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	  Power_out_OFF;
 8000d60:	2200      	movs	r2, #0
 8000d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d66:	4826      	ldr	r0, [pc, #152]	; (8000e00 <setup+0xa4>)
 8000d68:	f002 fb75 	bl	8003456 <HAL_GPIO_WritePin>
	  setModeRXuart2();													// настройка послед порта 2 на прием
 8000d6c:	f000 f98a 	bl	8001084 <setModeRXuart2>

	  HAL_ADCEx_Calibration_Start(&hadc1);  							// калибровкa АЦП
 8000d70:	4824      	ldr	r0, [pc, #144]	; (8000e04 <setup+0xa8>)
 8000d72:	f001 fd8d 	bl	8002890 <HAL_ADCEx_Calibration_Start>
	  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 3); 					// стартуем АЦП
	  //HAL_ADC_Stop_DMA(&hadc1); 										// стоп АЦП
	  HAL_RTCEx_SetSecond_IT(&hrtc);									// старт RTC прерывание 1 сек
 8000d76:	4824      	ldr	r0, [pc, #144]	; (8000e08 <setup+0xac>)
 8000d78:	f003 fe18 	bl	80049ac <HAL_RTCEx_SetSecond_IT>
	  HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_UPDATE], (uint32_t)Led_array, (uint32_t)&GPIOB->ODR, 9);  // запуск таймера 1 и ДМА для вывода   LED индикации
 8000d7c:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <setup+0xb0>)
 8000d7e:	6a18      	ldr	r0, [r3, #32]
 8000d80:	4923      	ldr	r1, [pc, #140]	; (8000e10 <setup+0xb4>)
 8000d82:	2309      	movs	r3, #9
 8000d84:	4a23      	ldr	r2, [pc, #140]	; (8000e14 <setup+0xb8>)
 8000d86:	f001 ff87 	bl	8002c98 <HAL_DMA_Start_IT>
	  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <setup+0xb0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <setup+0xb0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d98:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_ENABLE(&htim1);
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <setup+0xb0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <setup+0xb0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f042 0201 	orr.w	r2, r2, #1
 8000da8:	601a      	str	r2, [r3, #0]

	  HAL_TIM_Base_Stop_IT(&htim4); 									// останавливаем таймер
 8000daa:	481b      	ldr	r0, [pc, #108]	; (8000e18 <setup+0xbc>)
 8000dac:	f003 feb2 	bl	8004b14 <HAL_TIM_Base_Stop_IT>
	  HAL_TIM_Base_Start_IT(&htim2);
 8000db0:	481a      	ldr	r0, [pc, #104]	; (8000e1c <setup+0xc0>)
 8000db2:	f003 fe8c 	bl	8004ace <HAL_TIM_Base_Start_IT>
	  Flag_power_ON 	= 0;											// флаг панели управления Вкл Выкл ее
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <setup+0xc4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
	  Flag_radio_ON 	= 0;											// флаг рвдио вкл выкл
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <setup+0xc8>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
	  Flag_start_wash 	= 0;											// флаг старта стирки от сост кнопки
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <setup+0xcc>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
	  Flag_wash 		= 0;    //<<<<<<<<<<<<
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <setup+0xd0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
	  Step_wash_session = 0;
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <setup+0xd4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
	  Sec_count_sesion_connect = 0;										// счетчик паузы между сенсами связи с мастером
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <setup+0xd8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	801a      	strh	r2, [r3, #0]
	  Sec_delay_start_wash     = 0;										// таймер отсрочки старта стирки
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <setup+0xdc>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	801a      	strh	r2, [r3, #0]
	  Count_mode_delay_wash    = 0;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <setup+0xe0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
	  led_on();															// тест индикаторов
 8000de6:	f000 fbdf 	bl	80015a8 <led_on>
	  beep(Power_ON);													// бип при включении контроллера
 8000dea:	20c8      	movs	r0, #200	; 0xc8
 8000dec:	f000 fbfa 	bl	80015e4 <beep>
	  HAL_Delay(500);													// задержка что бы увидеть индикаторы
 8000df0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df4:	f001 f928 	bl	8002048 <HAL_Delay>
	  led_off();														// гасим индикаторы
 8000df8:	f000 fbbc 	bl	8001574 <led_off>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40011000 	.word	0x40011000
 8000e04:	200001e0 	.word	0x200001e0
 8000e08:	2000029c 	.word	0x2000029c
 8000e0c:	200002b4 	.word	0x200002b4
 8000e10:	20000100 	.word	0x20000100
 8000e14:	40010c0c 	.word	0x40010c0c
 8000e18:	20000144 	.word	0x20000144
 8000e1c:	2000033c 	.word	0x2000033c
 8000e20:	20000338 	.word	0x20000338
 8000e24:	20000339 	.word	0x20000339
 8000e28:	200001dc 	.word	0x200001dc
 8000e2c:	20000298 	.word	0x20000298
 8000e30:	200002b0 	.word	0x200002b0
 8000e34:	200003bc 	.word	0x200003bc
 8000e38:	20000140 	.word	0x20000140
 8000e3c:	20000250 	.word	0x20000250

08000e40 <HAL_UART_TxCpltCallback>:
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) 				// По окончании отправки  в huart2 сработает прерывание и вызовет колбек
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
          if(huart == &huart2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_UART_TxCpltCallback+0x1c>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d101      	bne.n	8000e54 <HAL_UART_TxCpltCallback+0x14>
          { 															// можно установить какой-то флаг, сообщающий об окончании отправки
        	  setModeRXuart2();                                         // переходим в режим чтения порта
 8000e50:	f000 f918 	bl	8001084 <setModeRXuart2>
          }
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000037c 	.word	0x2000037c

08000e60 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)					// По окончании приема  в huart2 сработает прерывание и вызовет колбек
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
          if(huart == &huart2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a1a      	ldr	r2, [pc, #104]	; (8000ed4 <HAL_UART_RxCpltCallback+0x74>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d12c      	bne.n	8000eca <HAL_UART_RxCpltCallback+0x6a>
		  {																// что-то делаем -- возможно тут проверка CRC если не понадобится то избавимся от буф. массива
        	  uint8_t crc_l =0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
        	  for(uint8_t i =0; i<20-1; i++) crc_l ^= buf_cmd_mass[i];
 8000e74:	2300      	movs	r3, #0
 8000e76:	73bb      	strb	r3, [r7, #14]
 8000e78:	e009      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x2e>
 8000e7a:	7bbb      	ldrb	r3, [r7, #14]
 8000e7c:	4a16      	ldr	r2, [pc, #88]	; (8000ed8 <HAL_UART_RxCpltCallback+0x78>)
 8000e7e:	5cd3      	ldrb	r3, [r2, r3]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	4053      	eors	r3, r2
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	73bb      	strb	r3, [r7, #14]
 8000e8e:	7bbb      	ldrb	r3, [r7, #14]
 8000e90:	2b12      	cmp	r3, #18
 8000e92:	d9f2      	bls.n	8000e7a <HAL_UART_RxCpltCallback+0x1a>
        	  if (buf_cmd_mass[ID] == ControlPanelID && (20^crc_l+2 == buf_cmd_mass[CRCdata]))// если от мастера пришло сообщение и CRC совпадает
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <HAL_UART_RxCpltCallback+0x78>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d115      	bne.n	8000eca <HAL_UART_RxCpltCallback+0x6a>
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_UART_RxCpltCallback+0x78>)
 8000ea0:	7cdb      	ldrb	r3, [r3, #19]
        	  {
        		  if (buf_cmd_mass[END] == 1) stop_wash(0);				// если 1 то пришел флаг конца стирки от мастера, значит переходим в режим конца стирки
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <HAL_UART_RxCpltCallback+0x78>)
 8000ea4:	799b      	ldrb	r3, [r3, #6]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d102      	bne.n	8000eb2 <HAL_UART_RxCpltCallback+0x52>
 8000eac:	2000      	movs	r0, #0
 8000eae:	f000 fb2b 	bl	8001508 <stop_wash>
        		  Sec_count_sesion_connect = 0;							// сброс счетчика контроля связи между платой панели и мастером
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_UART_RxCpltCallback+0x7c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	801a      	strh	r2, [r3, #0]
        		  check_errors(buf_cmd_mass[Status]);					// если от мастера пришли ошибки узлов то их обрабатываем \ выводим
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <HAL_UART_RxCpltCallback+0x78>)
 8000eba:	795b      	ldrb	r3, [r3, #5]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fbc0 	bl	8001644 <check_errors>
        		  //status_wash_led(buf_cmd_mass[Status]);
        		  sendDataFromPanel(ControlMasterlID);					// отвечаем мастеру
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f000 f8ed 	bl	80010a4 <sendDataFromPanel>
        	  }
          }
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000037c 	.word	0x2000037c
 8000ed8:	200000d8 	.word	0x200000d8
 8000edc:	200003bc 	.word	0x200003bc

08000ee0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)    				// колбек ошибки при приёме/отправке
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
#if(DEBUG)
	if(huart == &huart2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a5f      	ldr	r2, [pc, #380]	; (8001068 <HAL_UART_ErrorCallback+0x188>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	f040 80b7 	bne.w	8001060 <HAL_UART_ErrorCallback+0x180>
        {																//  ошибки
        	uint32_t er = HAL_UART_GetError(&huart2);
 8000ef2:	485d      	ldr	r0, [pc, #372]	; (8001068 <HAL_UART_ErrorCallback+0x188>)
 8000ef4:	f004 fcaa 	bl	800584c <HAL_UART_GetError>
 8000ef8:	6278      	str	r0, [r7, #36]	; 0x24
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	3b01      	subs	r3, #1
 8000efe:	2b0f      	cmp	r3, #15
 8000f00:	f200 8087 	bhi.w	8001012 <HAL_UART_ErrorCallback+0x132>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <HAL_UART_ErrorCallback+0x2c>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000f4d 	.word	0x08000f4d
 8000f10:	08000f79 	.word	0x08000f79
 8000f14:	08001013 	.word	0x08001013
 8000f18:	08000fa5 	.word	0x08000fa5
 8000f1c:	08001013 	.word	0x08001013
 8000f20:	08001013 	.word	0x08001013
 8000f24:	08001013 	.word	0x08001013
 8000f28:	08000fd1 	.word	0x08000fd1
 8000f2c:	08001013 	.word	0x08001013
 8000f30:	08001013 	.word	0x08001013
 8000f34:	08001013 	.word	0x08001013
 8000f38:	08001013 	.word	0x08001013
 8000f3c:	08001013 	.word	0x08001013
 8000f40:	08001013 	.word	0x08001013
 8000f44:	08001013 	.word	0x08001013
 8000f48:	08000ffd 	.word	0x08000ffd
            switch(er)
                {
                 case HAL_UART_ERROR_PE:
                 HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Uart - Parity error\n", 27, 1000);
 8000f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f50:	221b      	movs	r2, #27
 8000f52:	4946      	ldr	r1, [pc, #280]	; (800106c <HAL_UART_ErrorCallback+0x18c>)
 8000f54:	4846      	ldr	r0, [pc, #280]	; (8001070 <HAL_UART_ErrorCallback+0x190>)
 8000f56:	f004 f9e7 	bl	8005328 <HAL_UART_Transmit>
                 __HAL_UART_CLEAR_PEFLAG(huart);
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	623b      	str	r3, [r7, #32]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	623b      	str	r3, [r7, #32]
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
                 huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	63da      	str	r2, [r3, #60]	; 0x3c
                 break;
 8000f76:	e04d      	b.n	8001014 <HAL_UART_ErrorCallback+0x134>
                 case HAL_UART_ERROR_NE:
                 HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Uart - Noise error\n", 26, 1000);
 8000f78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7c:	221a      	movs	r2, #26
 8000f7e:	493d      	ldr	r1, [pc, #244]	; (8001074 <HAL_UART_ErrorCallback+0x194>)
 8000f80:	483b      	ldr	r0, [pc, #236]	; (8001070 <HAL_UART_ErrorCallback+0x190>)
 8000f82:	f004 f9d1 	bl	8005328 <HAL_UART_Transmit>
                 __HAL_UART_CLEAR_NEFLAG(huart);
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
                 huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	63da      	str	r2, [r3, #60]	; 0x3c
                 break;
 8000fa2:	e037      	b.n	8001014 <HAL_UART_ErrorCallback+0x134>
                 case HAL_UART_ERROR_FE:
                 HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Uart - Frame error\n", 26, 1000);
 8000fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa8:	221a      	movs	r2, #26
 8000faa:	4933      	ldr	r1, [pc, #204]	; (8001078 <HAL_UART_ErrorCallback+0x198>)
 8000fac:	4830      	ldr	r0, [pc, #192]	; (8001070 <HAL_UART_ErrorCallback+0x190>)
 8000fae:	f004 f9bb 	bl	8005328 <HAL_UART_Transmit>
                 __HAL_UART_CLEAR_FEFLAG(huart);
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	61bb      	str	r3, [r7, #24]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
                 huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	63da      	str	r2, [r3, #60]	; 0x3c
                 break;
 8000fce:	e021      	b.n	8001014 <HAL_UART_ErrorCallback+0x134>
                 case HAL_UART_ERROR_ORE:
                 HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Uart - Overrun error\n", 28, 1000);
 8000fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd4:	221c      	movs	r2, #28
 8000fd6:	4929      	ldr	r1, [pc, #164]	; (800107c <HAL_UART_ErrorCallback+0x19c>)
 8000fd8:	4825      	ldr	r0, [pc, #148]	; (8001070 <HAL_UART_ErrorCallback+0x190>)
 8000fda:	f004 f9a5 	bl	8005328 <HAL_UART_Transmit>
                 __HAL_UART_CLEAR_OREFLAG(huart);
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697b      	ldr	r3, [r7, #20]
                 huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	63da      	str	r2, [r3, #60]	; 0x3c
                 break;
 8000ffa:	e00b      	b.n	8001014 <HAL_UART_ErrorCallback+0x134>
                 case HAL_UART_ERROR_DMA:
                 HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Uart - DMA transfer error\n", 33, 1000);
 8000ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001000:	2221      	movs	r2, #33	; 0x21
 8001002:	491f      	ldr	r1, [pc, #124]	; (8001080 <HAL_UART_ErrorCallback+0x1a0>)
 8001004:	481a      	ldr	r0, [pc, #104]	; (8001070 <HAL_UART_ErrorCallback+0x190>)
 8001006:	f004 f98f 	bl	8005328 <HAL_UART_Transmit>
                 huart->ErrorCode = HAL_UART_ERROR_NONE;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	63da      	str	r2, [r3, #60]	; 0x3c
                 break;
 8001010:	e000      	b.n	8001014 <HAL_UART_ErrorCallback+0x134>
                 default:
                 break;
 8001012:	bf00      	nop
                }
#endif
                __HAL_UART_FLUSH_DRREGISTER(huart);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
                __HAL_UART_CLEAR_OREFLAG(huart);
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	693b      	ldr	r3, [r7, #16]
                __HAL_UART_CLEAR_NEFLAG(huart);
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
                __HAL_UART_CLEAR_FEFLAG(huart);
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
                /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
                //__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
                setModeRXuart2();													// настройка послед порта 2 на прием
 800105c:	f000 f812 	bl	8001084 <setModeRXuart2>
        }
}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000037c 	.word	0x2000037c
 800106c:	08006678 	.word	0x08006678
 8001070:	20000210 	.word	0x20000210
 8001074:	08006694 	.word	0x08006694
 8001078:	080066ac 	.word	0x080066ac
 800107c:	080066c4 	.word	0x080066c4
 8001080:	080066e0 	.word	0x080066e0

08001084 <setModeRXuart2>:
void setModeRXuart2(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	HAL_HalfDuplex_EnableReceiver(&huart2); 							//  перевод устройства в режиме приёма
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <setModeRXuart2+0x18>)
 800108a:	f004 fbac 	bl	80057e6 <HAL_HalfDuplex_EnableReceiver>
	HAL_UART_Receive_IT(&huart2, (uint8_t*)buf_cmd_mass, lenArr);
 800108e:	2214      	movs	r2, #20
 8001090:	4903      	ldr	r1, [pc, #12]	; (80010a0 <setModeRXuart2+0x1c>)
 8001092:	4802      	ldr	r0, [pc, #8]	; (800109c <setModeRXuart2+0x18>)
 8001094:	f004 fa25 	bl	80054e2 <HAL_UART_Receive_IT>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000037c 	.word	0x2000037c
 80010a0:	200000d8 	.word	0x200000d8

080010a4 <sendDataFromPanel>:
void sendDataFromPanel(uint8_t idPanel)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(&huart2); 							// перевод устройство в режиме отправки
 80010ae:	4813      	ldr	r0, [pc, #76]	; (80010fc <sendDataFromPanel+0x58>)
 80010b0:	f004 fb66 	bl	8005780 <HAL_HalfDuplex_EnableTransmitter>
	Command_Massive[ID] = idPanel;
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <sendDataFromPanel+0x5c>)
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	7013      	strb	r3, [r2, #0]
	uint8_t crc_l = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i<20-1; i++) crc_l ^= Command_Massive[i];		// подсчет CRC
 80010be:	2300      	movs	r3, #0
 80010c0:	73bb      	strb	r3, [r7, #14]
 80010c2:	e009      	b.n	80010d8 <sendDataFromPanel+0x34>
 80010c4:	7bbb      	ldrb	r3, [r7, #14]
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <sendDataFromPanel+0x5c>)
 80010c8:	5cd3      	ldrb	r3, [r2, r3]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	4053      	eors	r3, r2
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	7bbb      	ldrb	r3, [r7, #14]
 80010d4:	3301      	adds	r3, #1
 80010d6:	73bb      	strb	r3, [r7, #14]
 80010d8:	7bbb      	ldrb	r3, [r7, #14]
 80010da:	2b12      	cmp	r3, #18
 80010dc:	d9f2      	bls.n	80010c4 <sendDataFromPanel+0x20>
	Command_Massive[CRCdata]	= crc_l^20+2;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	f083 0316 	eor.w	r3, r3, #22
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <sendDataFromPanel+0x5c>)
 80010e8:	74da      	strb	r2, [r3, #19]
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)Command_Massive, lenArr);	// отпрпавляем данные в шину
 80010ea:	2214      	movs	r2, #20
 80010ec:	4904      	ldr	r1, [pc, #16]	; (8001100 <sendDataFromPanel+0x5c>)
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <sendDataFromPanel+0x58>)
 80010f0:	f004 f9b3 	bl	800545a <HAL_UART_Transmit_IT>
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2000037c 	.word	0x2000037c
 8001100:	200000ec 	.word	0x200000ec

08001104 <HAL_GPIO_EXTI_Callback>:
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)							// прерывание от кнопок
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
	if(TIM4->CR1 == 1) return;											// если таймер 4 запущен (1) то выходим из ф-ции
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <HAL_GPIO_EXTI_Callback+0x28>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d006      	beq.n	8001124 <HAL_GPIO_EXTI_Callback+0x20>
	//HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); 								// отключаем прерывания на этом пине
    Pin_button = GPIO_Pin;												// запом. номер пина кнопки
 8001116:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	8013      	strh	r3, [r2, #0]
    HAL_TIM_Base_Start_IT(&htim4); 										// запускаем таймер 4
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_GPIO_EXTI_Callback+0x30>)
 800111e:	f003 fcd6 	bl	8004ace <HAL_TIM_Base_Start_IT>
 8001122:	e000      	b.n	8001126 <HAL_GPIO_EXTI_Callback+0x22>
	if(TIM4->CR1 == 1) return;											// если таймер 4 запущен (1) то выходим из ф-ции
 8001124:	bf00      	nop
}
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40000800 	.word	0x40000800
 8001130:	20000184 	.word	0x20000184
 8001134:	20000144 	.word	0x20000144

08001138 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)				// колбэк таймера 2, 4
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	// 	 sprintf(StringCMD, "\nAutoRun: %d\r\n%c", AutoStart, '\0');
    //	HAL_UART_Transmit(&huart1, (uint8_t*)StringCMD, strlen(StringCMD), 30);
	 if(htim->Instance == TIM2)											// если прерывание от тамера 2
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001148:	d136      	bne.n	80011b8 <HAL_TIM_PeriodElapsedCallback+0x80>
	  {
		 beep(0);
 800114a:	2000      	movs	r0, #0
 800114c:	f000 fa4a 	bl	80015e4 <beep>
		 if (Flag_power_ON && !Flag_start_wash)
 8001150:	4ba0      	ldr	r3, [pc, #640]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00d      	beq.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x3e>
 800115a:	4b9f      	ldr	r3, [pc, #636]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d108      	bne.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x3e>
		 {
			 Led_array[led_power] ^= led_8; 						// мигаем индикатором
 8001164:	4b9d      	ldr	r3, [pc, #628]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001166:	8a1b      	ldrh	r3, [r3, #16]
 8001168:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800116c:	f083 0310 	eor.w	r3, r3, #16
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b9a      	ldr	r3, [pc, #616]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001174:	821a      	strh	r2, [r3, #16]
			 //running_lights();										// бегущие огни статуса индикаторов - шутиха
		}
		 if (Flag_power_ON && Flag_start_wash) Led_array[led_power] = led_8; 						// зажигаем индикатором
 8001176:	4b97      	ldr	r3, [pc, #604]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <HAL_TIM_PeriodElapsedCallback+0x5a>
 8001180:	4b95      	ldr	r3, [pc, #596]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_TIM_PeriodElapsedCallback+0x5a>
 800118a:	4b94      	ldr	r3, [pc, #592]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800118c:	f241 0230 	movw	r2, #4144	; 0x1030
 8001190:	821a      	strh	r2, [r3, #16]
		 if (Flag_power_ON && Sec_delay_start_wash != 0) Led_array[3] ^= led_3;  // мигаем если таймер отсрочки включен
 8001192:	4b90      	ldr	r3, [pc, #576]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00d      	beq.n	80011b8 <HAL_TIM_PeriodElapsedCallback+0x80>
 800119c:	4b90      	ldr	r3, [pc, #576]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d008      	beq.n	80011b8 <HAL_TIM_PeriodElapsedCallback+0x80>
 80011a6:	4b8d      	ldr	r3, [pc, #564]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80011a8:	88db      	ldrh	r3, [r3, #6]
 80011aa:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80011ae:	f083 0328 	eor.w	r3, r3, #40	; 0x28
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b89      	ldr	r3, [pc, #548]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80011b6:	80da      	strh	r2, [r3, #6]





     if(htim->Instance == TIM4 && HAL_GPIO_ReadPin(GPIOA, Pin_button) == 0) // если прерывание от тамера 4 и кнопка нажата
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a89      	ldr	r2, [pc, #548]	; (80013e4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	f040 8131 	bne.w	8001426 <HAL_TIM_PeriodElapsedCallback+0x2ee>
 80011c4:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	4887      	ldr	r0, [pc, #540]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011ce:	f002 f92b 	bl	8003428 <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f040 8126 	bne.w	8001426 <HAL_TIM_PeriodElapsedCallback+0x2ee>
        {
        	static uint8_t count_press_bt;								// счетчик времени нажатия кнопки
        	count_press_bt++;											// инкримент его
 80011da:	4b85      	ldr	r3, [pc, #532]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b83      	ldr	r3, [pc, #524]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80011e4:	701a      	strb	r2, [r3, #0]
        	if (count_press_bt > 30)									// если больше 30
 80011e6:	4b82      	ldr	r3, [pc, #520]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b1e      	cmp	r3, #30
 80011ec:	f240 8114 	bls.w	8001418 <HAL_TIM_PeriodElapsedCallback+0x2e0>
            {
				switch (Pin_button)
 80011f0:	4b7d      	ldr	r3, [pc, #500]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011fa:	f000 80aa 	beq.w	8001352 <HAL_TIM_PeriodElapsedCallback+0x21a>
 80011fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001202:	f300 80fd 	bgt.w	8001400 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8001206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800120a:	f000 80c4 	beq.w	8001396 <HAL_TIM_PeriodElapsedCallback+0x25e>
 800120e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001212:	f300 80f5 	bgt.w	8001400 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8001216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800121a:	d07f      	beq.n	800131c <HAL_TIM_PeriodElapsedCallback+0x1e4>
 800121c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001220:	f300 80ee 	bgt.w	8001400 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8001224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001228:	d05d      	beq.n	80012e6 <HAL_TIM_PeriodElapsedCallback+0x1ae>
 800122a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800122e:	f300 80e7 	bgt.w	8001400 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8001232:	2b10      	cmp	r3, #16
 8001234:	d002      	beq.n	800123c <HAL_TIM_PeriodElapsedCallback+0x104>
 8001236:	2b20      	cmp	r3, #32
 8001238:	d03a      	beq.n	80012b0 <HAL_TIM_PeriodElapsedCallback+0x178>
 800123a:	e0e1      	b.n	8001400 <HAL_TIM_PeriodElapsedCallback+0x2c8>
				{
				case GPIO_PIN_4: //BT_3 Таймер отсрочки стирки
					if (Flag_power_ON || Flag_radio_ON)
 800123c:	4b65      	ldr	r3, [pc, #404]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d104      	bne.n	8001250 <HAL_TIM_PeriodElapsedCallback+0x118>
 8001246:	4b6b      	ldr	r3, [pc, #428]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d028      	beq.n	80012a2 <HAL_TIM_PeriodElapsedCallback+0x16a>
														{
														 Led_array[3] = led_3;
 8001250:	4b62      	ldr	r3, [pc, #392]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001252:	f244 0228 	movw	r2, #16424	; 0x4028
 8001256:	80da      	strh	r2, [r3, #6]
														 Count_mode_delay_wash++;
 8001258:	4b67      	ldr	r3, [pc, #412]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	3301      	adds	r3, #1
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b65      	ldr	r3, [pc, #404]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001264:	701a      	strb	r2, [r3, #0]
														 if (Count_mode_delay_wash > 4) {
 8001266:	4b64      	ldr	r3, [pc, #400]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b04      	cmp	r3, #4
 800126e:	d905      	bls.n	800127c <HAL_TIM_PeriodElapsedCallback+0x144>
															 	 	 	 	 	 	 	 Count_mode_delay_wash = 0;
 8001270:	4b61      	ldr	r3, [pc, #388]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
															 	 	 	 	 	 	 	 Led_array[3] = 0;
 8001276:	4b59      	ldr	r3, [pc, #356]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001278:	2200      	movs	r2, #0
 800127a:	80da      	strh	r2, [r3, #6]
														 	 	 	 	 	 	 	 	 }
														 status_wash_led(0);
 800127c:	2000      	movs	r0, #0
 800127e:	f000 fa21 	bl	80016c4 <status_wash_led>
														 status_wash_led(Count_mode_delay_wash);
 8001282:	4b5d      	ldr	r3, [pc, #372]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fa1b 	bl	80016c4 <status_wash_led>
														 Sec_delay_start_wash = Time_Delay_Arr[Count_mode_delay_wash];
 800128e:	4b5a      	ldr	r3, [pc, #360]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	4b59      	ldr	r3, [pc, #356]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001298:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800129c:	4b50      	ldr	r3, [pc, #320]	; (80013e0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800129e:	801a      	strh	r2, [r3, #0]
 80012a0:	e002      	b.n	80012a8 <HAL_TIM_PeriodElapsedCallback+0x170>
														} else {
															     Led_array[3] ^= Led_array[3];
 80012a2:	4b4e      	ldr	r3, [pc, #312]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	80da      	strh	r2, [r3, #6]
																}
					count_press_bt = 0;
 80012a8:	4b51      	ldr	r3, [pc, #324]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
					break;
 80012ae:	e0ab      	b.n	8001408 <HAL_TIM_PeriodElapsedCallback+0x2d0>

				case GPIO_PIN_5:  //BT_4  Супер стирка
					if (Flag_power_ON || Flag_radio_ON)Led_array[6] ^= led_6; else Led_array[6] ^= Led_array[6];
 80012b0:	4b48      	ldr	r3, [pc, #288]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d104      	bne.n	80012c4 <HAL_TIM_PeriodElapsedCallback+0x18c>
 80012ba:	4b4e      	ldr	r3, [pc, #312]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d009      	beq.n	80012d8 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 80012c4:	4b45      	ldr	r3, [pc, #276]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80012c6:	899b      	ldrh	r3, [r3, #12]
 80012c8:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80012cc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	4b42      	ldr	r3, [pc, #264]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80012d4:	819a      	strh	r2, [r3, #12]
 80012d6:	e002      	b.n	80012de <HAL_TIM_PeriodElapsedCallback+0x1a6>
 80012d8:	4b40      	ldr	r3, [pc, #256]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	819a      	strh	r2, [r3, #12]
					count_press_bt = 0;
 80012de:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
					break;
 80012e4:	e090      	b.n	8001408 <HAL_TIM_PeriodElapsedCallback+0x2d0>

				case GPIO_PIN_8:  //BT_2 Быстрая Стирка
					if (Flag_power_ON || Flag_radio_ON)Led_array[5] ^= led_5; else Led_array[5] ^= Led_array[5];
 80012e6:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d104      	bne.n	80012fa <HAL_TIM_PeriodElapsedCallback+0x1c2>
 80012f0:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d009      	beq.n	800130e <HAL_TIM_PeriodElapsedCallback+0x1d6>
 80012fa:	4b38      	ldr	r3, [pc, #224]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80012fc:	895b      	ldrh	r3, [r3, #10]
 80012fe:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001302:	f083 0308 	eor.w	r3, r3, #8
 8001306:	b29a      	uxth	r2, r3
 8001308:	4b34      	ldr	r3, [pc, #208]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800130a:	815a      	strh	r2, [r3, #10]
 800130c:	e002      	b.n	8001314 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 800130e:	4b33      	ldr	r3, [pc, #204]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001310:	2200      	movs	r2, #0
 8001312:	815a      	strh	r2, [r3, #10]
					count_press_bt = 0;
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
					break;
 800131a:	e075      	b.n	8001408 <HAL_TIM_PeriodElapsedCallback+0x2d0>

				case GPIO_PIN_11: //BT_1 Дополнительное полоскание
					if (Flag_power_ON || Flag_radio_ON)Led_array[4] ^= led_4; else Led_array[4] ^= Led_array[4];
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d104      	bne.n	8001330 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 8001326:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d009      	beq.n	8001344 <HAL_TIM_PeriodElapsedCallback+0x20c>
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001332:	891b      	ldrh	r3, [r3, #8]
 8001334:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001338:	f083 0328 	eor.w	r3, r3, #40	; 0x28
 800133c:	b29a      	uxth	r2, r3
 800133e:	4b27      	ldr	r3, [pc, #156]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001340:	811a      	strh	r2, [r3, #8]
 8001342:	e002      	b.n	800134a <HAL_TIM_PeriodElapsedCallback+0x212>
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001346:	2200      	movs	r2, #0
 8001348:	811a      	strh	r2, [r3, #8]
					count_press_bt = 0;
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
					break;
 8001350:	e05a      	b.n	8001408 <HAL_TIM_PeriodElapsedCallback+0x2d0>

				case GPIO_PIN_15: // Button Start / Stop
					if (Flag_power_ON)
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d008      	beq.n	800136e <HAL_TIM_PeriodElapsedCallback+0x236>
									{
									 Flag_start_wash ^= 1;
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f083 0301 	eor.w	r3, r3, #1
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	e002      	b.n	8001374 <HAL_TIM_PeriodElapsedCallback+0x23c>
									}else{
										Led_array[led_power] ^= Led_array[led_power];  // led off
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001370:	2200      	movs	r2, #0
 8001372:	821a      	strh	r2, [r3, #16]
									}

					if (!Flag_power_ON) Flag_radio_ON ^= 1;								// radio ON/OFF
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d107      	bne.n	800138e <HAL_TIM_PeriodElapsedCallback+0x256>
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	f083 0301 	eor.w	r3, r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800138c:	701a      	strb	r2, [r3, #0]
					count_press_bt = 0;
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
					break;
 8001394:	e038      	b.n	8001408 <HAL_TIM_PeriodElapsedCallback+0x2d0>

				case GPIO_PIN_12:                  // Button POWER
					if(!Flag_radio_ON)
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d111      	bne.n	80013c4 <HAL_TIM_PeriodElapsedCallback+0x28c>
					{
					 Led_array[led_power]  ^= led_8;
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80013a2:	8a1b      	ldrh	r3, [r3, #16]
 80013a4:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80013a8:	f083 0310 	eor.w	r3, r3, #16
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80013b0:	821a      	strh	r2, [r3, #16]
					 Flag_power_ON ^= count_press_bt;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4053      	eors	r3, r2
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80013c2:	701a      	strb	r2, [r3, #0]
					 //if (Flag_power_ON)Power_out_ON; else {Power_out_OFF;	led_off();}		// ВКЛ / Выкл питане мастера путем открытия закрытия транзистора
					}
					beep(70);
 80013c4:	2046      	movs	r0, #70	; 0x46
 80013c6:	f000 f90d 	bl	80015e4 <beep>
					count_press_bt = 0;
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
					break;
 80013d0:	e01a      	b.n	8001408 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 80013d2:	bf00      	nop
 80013d4:	20000338 	.word	0x20000338
 80013d8:	200001dc 	.word	0x200001dc
 80013dc:	20000100 	.word	0x20000100
 80013e0:	20000140 	.word	0x20000140
 80013e4:	40000800 	.word	0x40000800
 80013e8:	20000184 	.word	0x20000184
 80013ec:	40010800 	.word	0x40010800
 80013f0:	20000124 	.word	0x20000124
 80013f4:	20000339 	.word	0x20000339
 80013f8:	20000250 	.word	0x20000250
 80013fc:	08006784 	.word	0x08006784

				default:
					count_press_bt = 0;
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
					break;
 8001406:	bf00      	nop
				}
				if (Flag_power_ON) beep(Btton_press);
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8001412:	2046      	movs	r0, #70	; 0x46
 8001414:	f000 f8e6 	bl	80015e4 <beep>
            }
        	if (count_press_bt == 0) HAL_TIM_Base_Stop_IT(&htim4); 			// останавливаем таймер
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <HAL_TIM_PeriodElapsedCallback+0x2ee>
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001422:	f003 fb77 	bl	8004b14 <HAL_TIM_Base_Stop_IT>
        	//HAL_TIM_Base_Stop_IT(&htim4); 			// останавливаем таймер
             // __HAL_GPIO_EXTI_CLEAR_IT(Pin_button);   // очищаем бит EXTI_PR (бит прерывания)
            //  NVIC_ClearPendingIRQ(EXTI15_10_IRQn);   // очищаем бит NVIC_ICPRx (бит очереди)
            //  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);     // включаем внешнее прерывание
        }
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000124 	.word	0x20000124
 8001434:	20000338 	.word	0x20000338
 8001438:	20000144 	.word	0x20000144

0800143c <get_selector_position>:
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
uint8_t get_selector_position(uint8_t selector, uint16_t value)         // преобразов значен АЦП к номмеру программы стирки, темпер, скорости
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	460a      	mov	r2, r1
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	4613      	mov	r3, r2
 800144a:	80bb      	strh	r3, [r7, #4]
 if (selector == selectorProg)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d113      	bne.n	800147a <get_selector_position+0x3e>
  {
   for (uint8_t i=0; i < totall_Prog; i++)
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	e00d      	b.n	8001474 <get_selector_position+0x38>
     if (value < selectorProg_values[i])
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <get_selector_position+0x7c>)
 800145c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001460:	88ba      	ldrh	r2, [r7, #4]
 8001462:	429a      	cmp	r2, r3
 8001464:	d203      	bcs.n	800146e <get_selector_position+0x32>
    	 	 	 	 	 	 	 	 	   return i+1;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	3301      	adds	r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	e01f      	b.n	80014ae <get_selector_position+0x72>
   for (uint8_t i=0; i < totall_Prog; i++)
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	3301      	adds	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	d9ee      	bls.n	8001458 <get_selector_position+0x1c>
  }


  for (uint8_t i=0; i < tempSpeedNum; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	73bb      	strb	r3, [r7, #14]
 800147e:	e012      	b.n	80014a6 <get_selector_position+0x6a>
  {
    if (value < selectorTempSpeed_values[0][i])
 8001480:	7bbb      	ldrb	r3, [r7, #14]
 8001482:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <get_selector_position+0x80>)
 8001484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001488:	88ba      	ldrh	r2, [r7, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	d208      	bcs.n	80014a0 <get_selector_position+0x64>
    										return selectorTempSpeed_values[selector][i];
 800148e:	79fa      	ldrb	r2, [r7, #7]
 8001490:	7bbb      	ldrb	r3, [r7, #14]
 8001492:	490a      	ldr	r1, [pc, #40]	; (80014bc <get_selector_position+0x80>)
 8001494:	00d2      	lsls	r2, r2, #3
 8001496:	4413      	add	r3, r2
 8001498:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	e006      	b.n	80014ae <get_selector_position+0x72>
  for (uint8_t i=0; i < tempSpeedNum; i++)
 80014a0:	7bbb      	ldrb	r3, [r7, #14]
 80014a2:	3301      	adds	r3, #1
 80014a4:	73bb      	strb	r3, [r7, #14]
 80014a6:	7bbb      	ldrb	r3, [r7, #14]
 80014a8:	2b07      	cmp	r3, #7
 80014aa:	d9e9      	bls.n	8001480 <get_selector_position+0x44>
   }

 return 0;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	08006720 	.word	0x08006720
 80014bc:	08006740 	.word	0x08006740

080014c0 <start_wash>:
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
void start_wash(uint8_t prog_num, uint8_t spin_set, uint8_t temp_set) //
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	460b      	mov	r3, r1
 80014cc:	71bb      	strb	r3, [r7, #6]
 80014ce:	4613      	mov	r3, r2
 80014d0:	717b      	strb	r3, [r7, #5]
		Command_Massive[Start]   = 1;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <start_wash+0x40>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	705a      	strb	r2, [r3, #1]
		Command_Massive[ProgNum] = prog_num;//get_selector_position(selectorProg,  ADC[selectorProg]);
 80014d8:	4a09      	ldr	r2, [pc, #36]	; (8001500 <start_wash+0x40>)
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	7093      	strb	r3, [r2, #2]
		Command_Massive[Spin] 	 = spin_set;//get_selector_position(selectorSpeed, ADC[selectorSpeed]);
 80014de:	4a08      	ldr	r2, [pc, #32]	; (8001500 <start_wash+0x40>)
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	7113      	strb	r3, [r2, #4]
		Command_Massive[Temp] 	 = temp_set;//get_selector_position(selectorTemp,  ADC[selectorTemp]);
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <start_wash+0x40>)
 80014e6:	797b      	ldrb	r3, [r7, #5]
 80014e8:	70d3      	strb	r3, [r2, #3]
		//Command_Massive[END]     = 0;
		Command_Massive[ID] 	 = ControlMasterlID;
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <start_wash+0x40>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
		//Flag_start_wash			 = 1;
		Count_mode_delay_wash = 0;
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <start_wash+0x44>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
		//led_off();

}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	200000ec 	.word	0x200000ec
 8001504:	20000250 	.word	0x20000250

08001508 <stop_wash>:
void stop_wash(uint8_t mode) // 1 run 0 stop
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
	    Command_Massive[Start]   = 0;
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <stop_wash+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	705a      	strb	r2, [r3, #1]
		Flag_start_wash			 = 0;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <stop_wash+0x5c>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
		Flag_wash 				 = 0;
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <stop_wash+0x60>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
		Count_mode_delay_wash	 = 0;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <stop_wash+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
		if (Step_wash_session > 3) {
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <stop_wash+0x68>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b03      	cmp	r3, #3
 8001530:	d906      	bls.n	8001540 <stop_wash+0x38>
									Step_wash_session = 0; beep(Wash_end);}
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <stop_wash+0x68>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	f240 6072 	movw	r0, #1650	; 0x672
 800153c:	f000 f852 	bl	80015e4 <beep>
		if (Step_wash_session != 0 && Step_wash_session < 4) Flag_start_wash	= 1;
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <stop_wash+0x68>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <stop_wash+0x4e>
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <stop_wash+0x68>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b03      	cmp	r3, #3
 800154e:	d802      	bhi.n	8001556 <stop_wash+0x4e>
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <stop_wash+0x5c>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200000ec 	.word	0x200000ec
 8001564:	200001dc 	.word	0x200001dc
 8001568:	20000298 	.word	0x20000298
 800156c:	20000250 	.word	0x20000250
 8001570:	200002b0 	.word	0x200002b0

08001574 <led_off>:
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
void led_off(void)														// индикаторы  гасим
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 9; i++) Led_array[i] = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	e007      	b.n	8001590 <led_off+0x1c>
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <led_off+0x30>)
 8001584:	2100      	movs	r1, #0
 8001586:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	3301      	adds	r3, #1
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	2b08      	cmp	r3, #8
 8001594:	d9f4      	bls.n	8001580 <led_off+0xc>
}
 8001596:	bf00      	nop
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000100 	.word	0x20000100

080015a8 <led_on>:
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
void led_on(void)														// индикаторы  все зажигаем например для теста индикаторов
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 9; i++) Led_array[i] = Led_array_ON[i];
 80015ae:	2300      	movs	r3, #0
 80015b0:	71fb      	strb	r3, [r7, #7]
 80015b2:	e00a      	b.n	80015ca <led_on+0x22>
 80015b4:	79fa      	ldrb	r2, [r7, #7]
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4908      	ldr	r1, [pc, #32]	; (80015dc <led_on+0x34>)
 80015ba:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <led_on+0x38>)
 80015c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	3301      	adds	r3, #1
 80015c8:	71fb      	strb	r3, [r7, #7]
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d9f1      	bls.n	80015b4 <led_on+0xc>

}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	08006770 	.word	0x08006770
 80015e0:	20000100 	.word	0x20000100

080015e4 <beep>:
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
void beep(uint16_t hold)												// вывод звука на активный излучатель, просто поднимаем ногу на опред время
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
static uint32_t holdTime, lastTime;
	    if (hold > 0)
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00d      	beq.n	8001610 <beep+0x2c>
	        {
	    	  Beep_ON;
 80015f4:	2201      	movs	r2, #1
 80015f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015fa:	480f      	ldr	r0, [pc, #60]	; (8001638 <beep+0x54>)
 80015fc:	f001 ff2b 	bl	8003456 <HAL_GPIO_WritePin>
	          holdTime = hold;
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <beep+0x58>)
 8001604:	6013      	str	r3, [r2, #0]
	          lastTime = HAL_GetTick();
 8001606:	f000 fd15 	bl	8002034 <HAL_GetTick>
 800160a:	4603      	mov	r3, r0
 800160c:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <beep+0x5c>)
 800160e:	6013      	str	r3, [r2, #0]
	          }

	    if ((lastTime + holdTime) < HAL_GetTick())
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <beep+0x5c>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <beep+0x58>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	18d4      	adds	r4, r2, r3
 800161a:	f000 fd0b 	bl	8002034 <HAL_GetTick>
 800161e:	4603      	mov	r3, r0
 8001620:	429c      	cmp	r4, r3
 8001622:	d205      	bcs.n	8001630 <beep+0x4c>
	        {
	          Beep_OFF;
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <beep+0x54>)
 800162c:	f001 ff13 	bl	8003456 <HAL_GPIO_WritePin>
	          }
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bd90      	pop	{r4, r7, pc}
 8001638:	40011000 	.word	0x40011000
 800163c:	20000128 	.word	0x20000128
 8001640:	2000012c 	.word	0x2000012c

08001644 <check_errors>:
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
void check_errors(uint8_t var)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
	uint8_t Error = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
	if (Sec_count_sesion_connect > limit_Sec_ses_conn) Error = 1; 		//  нет связи с мастером
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <check_errors+0x78>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	2b32      	cmp	r3, #50	; 0x32
 800165a:	d901      	bls.n	8001660 <check_errors+0x1c>
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
	if (Error) stop_wash(OFF);											//  если есть ошибки останавливаем стирку
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <check_errors+0x28>
 8001666:	2000      	movs	r0, #0
 8001668:	f7ff ff4e 	bl	8001508 <stop_wash>
	if (var < 200) return;						  						//  если меньше 200 значит нет ошибок у мастера
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	2bc7      	cmp	r3, #199	; 0xc7
 8001670:	d91d      	bls.n	80016ae <check_errors+0x6a>

	for (uint8_t i=0; i < Tot_arr_err; i++)
 8001672:	2300      	movs	r3, #0
 8001674:	73bb      	strb	r3, [r7, #14]
 8001676:	e016      	b.n	80016a6 <check_errors+0x62>
	{
	 if(Error_Arr[i] == var - 199)	break;							// если код ошибки уже есть в массиве, то выходим
 8001678:	7bbb      	ldrb	r3, [r7, #14]
 800167a:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <check_errors+0x7c>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	461a      	mov	r2, r3
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	3bc7      	subs	r3, #199	; 0xc7
 8001684:	429a      	cmp	r2, r3
 8001686:	d014      	beq.n	80016b2 <check_errors+0x6e>
	 if(Error_Arr[i] == 0) {Error_Arr[i] = var - 199; break;}
 8001688:	7bbb      	ldrb	r3, [r7, #14]
 800168a:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <check_errors+0x7c>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d106      	bne.n	80016a0 <check_errors+0x5c>
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	79fa      	ldrb	r2, [r7, #7]
 8001696:	3239      	adds	r2, #57	; 0x39
 8001698:	b2d1      	uxtb	r1, r2
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <check_errors+0x7c>)
 800169c:	54d1      	strb	r1, [r2, r3]
 800169e:	e009      	b.n	80016b4 <check_errors+0x70>
	for (uint8_t i=0; i < Tot_arr_err; i++)
 80016a0:	7bbb      	ldrb	r3, [r7, #14]
 80016a2:	3301      	adds	r3, #1
 80016a4:	73bb      	strb	r3, [r7, #14]
 80016a6:	7bbb      	ldrb	r3, [r7, #14]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d9e5      	bls.n	8001678 <check_errors+0x34>
 80016ac:	e002      	b.n	80016b4 <check_errors+0x70>
	if (var < 200) return;						  						//  если меньше 200 значит нет ошибок у мастера
 80016ae:	bf00      	nop
 80016b0:	e000      	b.n	80016b4 <check_errors+0x70>
	 if(Error_Arr[i] == var - 199)	break;							// если код ошибки уже есть в массиве, то выходим
 80016b2:	bf00      	nop
	}

}
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200003bc 	.word	0x200003bc
 80016c0:	20000114 	.word	0x20000114

080016c4 <status_wash_led>:
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
void status_wash_led(uint8_t status)									// зажигаем индикаторы статуса стирки. Всего 4 статуса у нас на панеле
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
	//Led_array[0] = Led_array[1] = Led_array[2] = Led_array[7] = 0;
	switch (status)
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d831      	bhi.n	8001738 <status_wash_led+0x74>
 80016d4:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <status_wash_led+0x18>)
 80016d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016da:	bf00      	nop
 80016dc:	080016f1 	.word	0x080016f1
 80016e0:	08001711 	.word	0x08001711
 80016e4:	0800171b 	.word	0x0800171b
 80016e8:	08001725 	.word	0x08001725
 80016ec:	0800172f 	.word	0x0800172f
	{
	case 0:
		Led_array[0] = Led_array[1] = Led_array[2] = Led_array[7] = 0;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <status_wash_led+0x80>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	81da      	strh	r2, [r3, #14]
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <status_wash_led+0x80>)
 80016f8:	89da      	ldrh	r2, [r3, #14]
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <status_wash_led+0x80>)
 80016fc:	809a      	strh	r2, [r3, #4]
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <status_wash_led+0x80>)
 8001700:	889a      	ldrh	r2, [r3, #4]
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <status_wash_led+0x80>)
 8001704:	805a      	strh	r2, [r3, #2]
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <status_wash_led+0x80>)
 8001708:	885a      	ldrh	r2, [r3, #2]
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <status_wash_led+0x80>)
 800170c:	801a      	strh	r2, [r3, #0]
		break;
 800170e:	e013      	b.n	8001738 <status_wash_led+0x74>
	case 1:
		Led_array[0] = led_7;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <status_wash_led+0x80>)
 8001712:	f242 0230 	movw	r2, #8240	; 0x2030
 8001716:	801a      	strh	r2, [r3, #0]
		break;
 8001718:	e00e      	b.n	8001738 <status_wash_led+0x74>
	case 2:
		Led_array[1] = led_2;
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <status_wash_led+0x80>)
 800171c:	f241 0218 	movw	r2, #4120	; 0x1018
 8001720:	805a      	strh	r2, [r3, #2]
		break;
 8001722:	e009      	b.n	8001738 <status_wash_led+0x74>
	case 3:
		Led_array[2] = led_1;
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <status_wash_led+0x80>)
 8001726:	f242 0218 	movw	r2, #8216	; 0x2018
 800172a:	809a      	strh	r2, [r3, #4]
		break;
 800172c:	e004      	b.n	8001738 <status_wash_led+0x74>
	case 4:
		Led_array[7] = led_0;
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <status_wash_led+0x80>)
 8001730:	f244 0218 	movw	r2, #16408	; 0x4018
 8001734:	81da      	strh	r2, [r3, #14]
		break;
 8001736:	bf00      	nop

	}
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000100 	.word	0x20000100

08001748 <running_lights>:
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
void running_lights()
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
	static uint8_t p;
	p++;
 800174c:	4b3f      	ldr	r3, [pc, #252]	; (800184c <running_lights+0x104>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b3d      	ldr	r3, [pc, #244]	; (800184c <running_lights+0x104>)
 8001756:	701a      	strb	r2, [r3, #0]
	if (p > 40) {p=0; }
 8001758:	4b3c      	ldr	r3, [pc, #240]	; (800184c <running_lights+0x104>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b28      	cmp	r3, #40	; 0x28
 800175e:	d902      	bls.n	8001766 <running_lights+0x1e>
 8001760:	4b3a      	ldr	r3, [pc, #232]	; (800184c <running_lights+0x104>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]

	switch (p)
 8001766:	4b39      	ldr	r3, [pc, #228]	; (800184c <running_lights+0x104>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	3b0a      	subs	r3, #10
 800176c:	2b1e      	cmp	r3, #30
 800176e:	d869      	bhi.n	8001844 <running_lights+0xfc>
 8001770:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <running_lights+0x30>)
 8001772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001776:	bf00      	nop
 8001778:	080017f5 	.word	0x080017f5
 800177c:	08001845 	.word	0x08001845
 8001780:	08001845 	.word	0x08001845
 8001784:	08001845 	.word	0x08001845
 8001788:	08001845 	.word	0x08001845
 800178c:	08001845 	.word	0x08001845
 8001790:	08001845 	.word	0x08001845
 8001794:	08001845 	.word	0x08001845
 8001798:	08001845 	.word	0x08001845
 800179c:	08001845 	.word	0x08001845
 80017a0:	08001809 	.word	0x08001809
 80017a4:	08001845 	.word	0x08001845
 80017a8:	08001845 	.word	0x08001845
 80017ac:	08001845 	.word	0x08001845
 80017b0:	08001845 	.word	0x08001845
 80017b4:	08001845 	.word	0x08001845
 80017b8:	08001845 	.word	0x08001845
 80017bc:	08001845 	.word	0x08001845
 80017c0:	08001845 	.word	0x08001845
 80017c4:	08001845 	.word	0x08001845
 80017c8:	0800181d 	.word	0x0800181d
 80017cc:	08001845 	.word	0x08001845
 80017d0:	08001845 	.word	0x08001845
 80017d4:	08001845 	.word	0x08001845
 80017d8:	08001845 	.word	0x08001845
 80017dc:	08001845 	.word	0x08001845
 80017e0:	08001845 	.word	0x08001845
 80017e4:	08001845 	.word	0x08001845
 80017e8:	08001845 	.word	0x08001845
 80017ec:	08001845 	.word	0x08001845
 80017f0:	08001831 	.word	0x08001831
	{
		case 10:
		Led_array[0] ^= led_0;
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <running_lights+0x108>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80017fc:	f083 0318 	eor.w	r3, r3, #24
 8001800:	b29a      	uxth	r2, r3
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <running_lights+0x108>)
 8001804:	801a      	strh	r2, [r3, #0]
		break;
 8001806:	e01d      	b.n	8001844 <running_lights+0xfc>
		case 20:
		Led_array[1] ^= led_1;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <running_lights+0x108>)
 800180a:	885b      	ldrh	r3, [r3, #2]
 800180c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001810:	f083 0318 	eor.w	r3, r3, #24
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <running_lights+0x108>)
 8001818:	805a      	strh	r2, [r3, #2]
		break;
 800181a:	e013      	b.n	8001844 <running_lights+0xfc>
		case 30:
		Led_array[2] ^= led_2;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <running_lights+0x108>)
 800181e:	889b      	ldrh	r3, [r3, #4]
 8001820:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001824:	f083 0318 	eor.w	r3, r3, #24
 8001828:	b29a      	uxth	r2, r3
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <running_lights+0x108>)
 800182c:	809a      	strh	r2, [r3, #4]
		break;
 800182e:	e009      	b.n	8001844 <running_lights+0xfc>
		case 40:
		Led_array[7] ^= led_7;
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <running_lights+0x108>)
 8001832:	89db      	ldrh	r3, [r3, #14]
 8001834:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001838:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800183c:	b29a      	uxth	r2, r3
 800183e:	4b04      	ldr	r3, [pc, #16]	; (8001850 <running_lights+0x108>)
 8001840:	81da      	strh	r2, [r3, #14]
		break;
 8001842:	bf00      	nop
	}
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	20000130 	.word	0x20000130
 8001850:	20000100 	.word	0x20000100

08001854 <error_display>:
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
void error_display()		//  процедура декодирования ошибки и вывод ее не панель в двоичном виде
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	80fb      	strh	r3, [r7, #6]
	status_wash_led(0);		// тушим индикаторы
 800185e:	2000      	movs	r0, #0
 8001860:	f7ff ff30 	bl	80016c4 <status_wash_led>
	while (i < 4)
 8001864:	e008      	b.n	8001878 <error_display+0x24>
	{
	 beep(Err_beep);		// зуммер для превлесения внимания
 8001866:	2064      	movs	r0, #100	; 0x64
 8001868:	f7ff febc 	bl	80015e4 <beep>
	 HAL_Delay(170);
 800186c:	20aa      	movs	r0, #170	; 0xaa
 800186e:	f000 fbeb 	bl	8002048 <HAL_Delay>
	 i++;
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	3301      	adds	r3, #1
 8001876:	80fb      	strh	r3, [r7, #6]
	while (i < 4)
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d9f3      	bls.n	8001866 <error_display+0x12>
	}
	i = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	80fb      	strh	r3, [r7, #6]
	while (i < 500)
 8001882:	e007      	b.n	8001894 <error_display+0x40>
	{
	  running_lights();		// бегущие огни для превлесения внимания
 8001884:	f7ff ff60 	bl	8001748 <running_lights>
	  HAL_Delay(5);
 8001888:	2005      	movs	r0, #5
 800188a:	f000 fbdd 	bl	8002048 <HAL_Delay>
	  i++;
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	3301      	adds	r3, #1
 8001892:	80fb      	strh	r3, [r7, #6]
	while (i < 500)
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800189a:	d3f3      	bcc.n	8001884 <error_display+0x30>
	}
	i = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	80fb      	strh	r3, [r7, #6]
	status_wash_led(0);		// тушим индикаторы
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff ff0f 	bl	80016c4 <status_wash_led>
	while (i < Tot_arr_err)
 80018a6:	e03d      	b.n	8001924 <error_display+0xd0>
	{
		if (Error_Arr[i] !=0 )		// если ячейка имеет ошибку то индицируем
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	4a22      	ldr	r2, [pc, #136]	; (8001934 <error_display+0xe0>)
 80018ac:	5cd3      	ldrb	r3, [r2, r3]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d035      	beq.n	800191e <error_display+0xca>
		{
			status_wash_led(0);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff ff06 	bl	80016c4 <status_wash_led>
			HAL_Delay(1000);
 80018b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018bc:	f000 fbc4 	bl	8002048 <HAL_Delay>
			beep(Err_beep);
 80018c0:	2064      	movs	r0, #100	; 0x64
 80018c2:	f7ff fe8f 	bl	80015e4 <beep>
			if(Error_Arr[i]  & 1) status_wash_led(1);	// AND 0x00000001;
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	4a1a      	ldr	r2, [pc, #104]	; (8001934 <error_display+0xe0>)
 80018ca:	5cd3      	ldrb	r3, [r2, r3]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <error_display+0x86>
 80018d4:	2001      	movs	r0, #1
 80018d6:	f7ff fef5 	bl	80016c4 <status_wash_led>
			if(Error_Arr[i]  & 2) status_wash_led(2);	// AND 0x00000010;
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	4a15      	ldr	r2, [pc, #84]	; (8001934 <error_display+0xe0>)
 80018de:	5cd3      	ldrb	r3, [r2, r3]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <error_display+0x9a>
 80018e8:	2002      	movs	r0, #2
 80018ea:	f7ff feeb 	bl	80016c4 <status_wash_led>
			if(Error_Arr[i]  & 4) status_wash_led(3);	// AND 0x00000100;
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	4a10      	ldr	r2, [pc, #64]	; (8001934 <error_display+0xe0>)
 80018f2:	5cd3      	ldrb	r3, [r2, r3]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <error_display+0xae>
 80018fc:	2003      	movs	r0, #3
 80018fe:	f7ff fee1 	bl	80016c4 <status_wash_led>
			if(Error_Arr[i]  & 8) status_wash_led(4);	// AND 0x00001000;
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <error_display+0xe0>)
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <error_display+0xc2>
 8001910:	2004      	movs	r0, #4
 8001912:	f7ff fed7 	bl	80016c4 <status_wash_led>
			HAL_Delay(1000*3);
 8001916:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800191a:	f000 fb95 	bl	8002048 <HAL_Delay>
		}
	 i++;
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	3301      	adds	r3, #1
 8001922:	80fb      	strh	r3, [r7, #6]
	while (i < Tot_arr_err)
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	2b0f      	cmp	r3, #15
 8001928:	d9be      	bls.n	80018a8 <error_display+0x54>
	}

}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000114 	.word	0x20000114

08001938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_MspInit+0x5c>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <HAL_MspInit+0x5c>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6193      	str	r3, [r2, #24]
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_MspInit+0x5c>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_MspInit+0x5c>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_MspInit+0x5c>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	61d3      	str	r3, [r2, #28]
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_MspInit+0x5c>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_MspInit+0x60>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_MspInit+0x60>)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010000 	.word	0x40010000

080019a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a28      	ldr	r2, [pc, #160]	; (8001a64 <HAL_ADC_MspInit+0xbc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d149      	bne.n	8001a5c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019c8:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <HAL_ADC_MspInit+0xc0>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a26      	ldr	r2, [pc, #152]	; (8001a68 <HAL_ADC_MspInit+0xc0>)
 80019ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_ADC_MspInit+0xc0>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e0:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_ADC_MspInit+0xc0>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a20      	ldr	r2, [pc, #128]	; (8001a68 <HAL_ADC_MspInit+0xc0>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <HAL_ADC_MspInit+0xc0>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80019f8:	230b      	movs	r3, #11
 80019fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fc:	2303      	movs	r3, #3
 80019fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	4619      	mov	r1, r3
 8001a06:	4819      	ldr	r0, [pc, #100]	; (8001a6c <HAL_ADC_MspInit+0xc4>)
 8001a08:	f001 fb8a 	bl	8003120 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_ADC_MspInit+0xc8>)
 8001a0e:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <HAL_ADC_MspInit+0xcc>)
 8001a10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_ADC_MspInit+0xc8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_ADC_MspInit+0xc8>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_ADC_MspInit+0xc8>)
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_ADC_MspInit+0xc8>)
 8001a26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a2c:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_ADC_MspInit+0xc8>)
 8001a2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a32:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_ADC_MspInit+0xc8>)
 8001a36:	2220      	movs	r2, #32
 8001a38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_ADC_MspInit+0xc8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a40:	480b      	ldr	r0, [pc, #44]	; (8001a70 <HAL_ADC_MspInit+0xc8>)
 8001a42:	f001 f8cf 	bl	8002be4 <HAL_DMA_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001a4c:	f7ff ff74 	bl	8001938 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_ADC_MspInit+0xc8>)
 8001a54:	621a      	str	r2, [r3, #32]
 8001a56:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <HAL_ADC_MspInit+0xc8>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a5c:	bf00      	nop
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40012400 	.word	0x40012400
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010800 	.word	0x40010800
 8001a70:	20000254 	.word	0x20000254
 8001a74:	40020008 	.word	0x40020008

08001a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a16      	ldr	r2, [pc, #88]	; (8001aec <HAL_I2C_MspInit+0x74>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d124      	bne.n	8001ae2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a98:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_I2C_MspInit+0x78>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <HAL_I2C_MspInit+0x78>)
 8001a9e:	f043 0308 	orr.w	r3, r3, #8
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_I2C_MspInit+0x78>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ab0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ab4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab6:	2312      	movs	r3, #18
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480b      	ldr	r0, [pc, #44]	; (8001af4 <HAL_I2C_MspInit+0x7c>)
 8001ac6:	f001 fb2b 	bl	8003120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_I2C_MspInit+0x78>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_I2C_MspInit+0x78>)
 8001ad0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_I2C_MspInit+0x78>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40005800 	.word	0x40005800
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010c00 	.word	0x40010c00

08001af8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0f      	ldr	r2, [pc, #60]	; (8001b44 <HAL_RTC_MspInit+0x4c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d118      	bne.n	8001b3c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001b0a:	f001 fe21 	bl	8003750 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_RTC_MspInit+0x50>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <HAL_RTC_MspInit+0x50>)
 8001b14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b18:	61d3      	str	r3, [r2, #28]
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RTC_MspInit+0x50>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RTC_MspInit+0x54>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 15, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	210f      	movs	r1, #15
 8001b30:	2003      	movs	r0, #3
 8001b32:	f001 f820 	bl	8002b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001b36:	2003      	movs	r0, #3
 8001b38:	f001 f839 	bl	8002bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b3c:	bf00      	nop
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40002800 	.word	0x40002800
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	4242043c 	.word	0x4242043c

08001b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a37      	ldr	r2, [pc, #220]	; (8001c3c <HAL_TIM_Base_MspInit+0xec>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d134      	bne.n	8001bcc <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b62:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <HAL_TIM_Base_MspInit+0xf0>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	4a36      	ldr	r2, [pc, #216]	; (8001c40 <HAL_TIM_Base_MspInit+0xf0>)
 8001b68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b6c:	6193      	str	r3, [r2, #24]
 8001b6e:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <HAL_TIM_Base_MspInit+0xf0>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel5;
 8001b7a:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <HAL_TIM_Base_MspInit+0xf4>)
 8001b7c:	4a32      	ldr	r2, [pc, #200]	; (8001c48 <HAL_TIM_Base_MspInit+0xf8>)
 8001b7e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b80:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <HAL_TIM_Base_MspInit+0xf4>)
 8001b82:	2210      	movs	r2, #16
 8001b84:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b86:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <HAL_TIM_Base_MspInit+0xf4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <HAL_TIM_Base_MspInit+0xf4>)
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b92:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <HAL_TIM_Base_MspInit+0xf4>)
 8001b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b98:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <HAL_TIM_Base_MspInit+0xf4>)
 8001b9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba0:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <HAL_TIM_Base_MspInit+0xf4>)
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8001ba8:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_TIM_Base_MspInit+0xf4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001bae:	4825      	ldr	r0, [pc, #148]	; (8001c44 <HAL_TIM_Base_MspInit+0xf4>)
 8001bb0:	f001 f818 	bl	8002be4 <HAL_DMA_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001bba:	f7ff febd 	bl	8001938 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a20      	ldr	r2, [pc, #128]	; (8001c44 <HAL_TIM_Base_MspInit+0xf4>)
 8001bc2:	621a      	str	r2, [r3, #32]
 8001bc4:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <HAL_TIM_Base_MspInit+0xf4>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bca:	e032      	b.n	8001c32 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd4:	d114      	bne.n	8001c00 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_TIM_Base_MspInit+0xf0>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_TIM_Base_MspInit+0xf0>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_TIM_Base_MspInit+0xf0>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	201c      	movs	r0, #28
 8001bf4:	f000 ffbf 	bl	8002b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bf8:	201c      	movs	r0, #28
 8001bfa:	f000 ffd8 	bl	8002bae <HAL_NVIC_EnableIRQ>
}
 8001bfe:	e018      	b.n	8001c32 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM4)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <HAL_TIM_Base_MspInit+0xfc>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d113      	bne.n	8001c32 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_TIM_Base_MspInit+0xf0>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <HAL_TIM_Base_MspInit+0xf0>)
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	61d3      	str	r3, [r2, #28]
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_TIM_Base_MspInit+0xf0>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2102      	movs	r1, #2
 8001c26:	201e      	movs	r0, #30
 8001c28:	f000 ffa5 	bl	8002b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c2c:	201e      	movs	r0, #30
 8001c2e:	f000 ffbe 	bl	8002bae <HAL_NVIC_EnableIRQ>
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40012c00 	.word	0x40012c00
 8001c40:	40021000 	.word	0x40021000
 8001c44:	200002f4 	.word	0x200002f4
 8001c48:	40020058 	.word	0x40020058
 8001c4c:	40000800 	.word	0x40000800

08001c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0318 	add.w	r3, r7, #24
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a35      	ldr	r2, [pc, #212]	; (8001d40 <HAL_UART_MspInit+0xf0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d132      	bne.n	8001cd6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c70:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <HAL_UART_MspInit+0xf4>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a33      	ldr	r2, [pc, #204]	; (8001d44 <HAL_UART_MspInit+0xf4>)
 8001c76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <HAL_UART_MspInit+0xf4>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c88:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <HAL_UART_MspInit+0xf4>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	4a2d      	ldr	r2, [pc, #180]	; (8001d44 <HAL_UART_MspInit+0xf4>)
 8001c8e:	f043 0304 	orr.w	r3, r3, #4
 8001c92:	6193      	str	r3, [r2, #24]
 8001c94:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <HAL_UART_MspInit+0xf4>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0318 	add.w	r3, r7, #24
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4824      	ldr	r0, [pc, #144]	; (8001d48 <HAL_UART_MspInit+0xf8>)
 8001cb6:	f001 fa33 	bl	8003120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc8:	f107 0318 	add.w	r3, r7, #24
 8001ccc:	4619      	mov	r1, r3
 8001cce:	481e      	ldr	r0, [pc, #120]	; (8001d48 <HAL_UART_MspInit+0xf8>)
 8001cd0:	f001 fa26 	bl	8003120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cd4:	e030      	b.n	8001d38 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <HAL_UART_MspInit+0xfc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d12b      	bne.n	8001d38 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_UART_MspInit+0xf4>)
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	4a17      	ldr	r2, [pc, #92]	; (8001d44 <HAL_UART_MspInit+0xf4>)
 8001ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cea:	61d3      	str	r3, [r2, #28]
 8001cec:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_UART_MspInit+0xf4>)
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_UART_MspInit+0xf4>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4a11      	ldr	r2, [pc, #68]	; (8001d44 <HAL_UART_MspInit+0xf4>)
 8001cfe:	f043 0304 	orr.w	r3, r3, #4
 8001d02:	6193      	str	r3, [r2, #24]
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <HAL_UART_MspInit+0xf4>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d10:	2304      	movs	r3, #4
 8001d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d14:	2312      	movs	r3, #18
 8001d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 0318 	add.w	r3, r7, #24
 8001d20:	4619      	mov	r1, r3
 8001d22:	4809      	ldr	r0, [pc, #36]	; (8001d48 <HAL_UART_MspInit+0xf8>)
 8001d24:	f001 f9fc 	bl	8003120 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	210a      	movs	r1, #10
 8001d2c:	2026      	movs	r0, #38	; 0x26
 8001d2e:	f000 ff22 	bl	8002b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d32:	2026      	movs	r0, #38	; 0x26
 8001d34:	f000 ff3b 	bl	8002bae <HAL_NVIC_EnableIRQ>
}
 8001d38:	bf00      	nop
 8001d3a:	3728      	adds	r7, #40	; 0x28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40013800 	.word	0x40013800
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40010800 	.word	0x40010800
 8001d4c:	40004400 	.word	0x40004400

08001d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <HardFault_Handler+0x4>

08001d62 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <MemManage_Handler+0x4>

08001d68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <BusFault_Handler+0x4>

08001d6e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <UsageFault_Handler+0x4>

08001d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9c:	f000 f938 	bl	8002010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <RTC_IRQHandler+0x10>)
 8001daa:	f002 fe28 	bl	80049fe <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2000029c 	.word	0x2000029c

08001db8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001dbc:	2010      	movs	r0, #16
 8001dbe:	f001 fb7b 	bl	80034b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <DMA1_Channel1_IRQHandler+0x10>)
 8001dce:	f001 f873 	bl	8002eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000254 	.word	0x20000254

08001ddc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <DMA1_Channel5_IRQHandler+0x10>)
 8001de2:	f001 f869 	bl	8002eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200002f4 	.word	0x200002f4

08001df0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001df4:	2020      	movs	r0, #32
 8001df6:	f001 fb5f 	bl	80034b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001dfa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dfe:	f001 fb5b 	bl	80034b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <TIM2_IRQHandler+0x10>)
 8001e0e:	f002 feab 	bl	8004b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000033c 	.word	0x2000033c

08001e1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <TIM4_IRQHandler+0x10>)
 8001e22:	f002 fea1 	bl	8004b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000144 	.word	0x20000144

08001e30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <USART2_IRQHandler+0x10>)
 8001e36:	f003 fba9 	bl	800558c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000037c 	.word	0x2000037c

08001e44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001e48:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e4c:	f001 fb34 	bl	80034b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001e50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e54:	f001 fb30 	bl	80034b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001e58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e5c:	f001 fb2c 	bl	80034b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e6c:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <_sbrk+0x5c>)
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <_sbrk+0x60>)
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <_sbrk+0x64>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <_sbrk+0x68>)
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d207      	bcs.n	8001ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e94:	f003 ff28 	bl	8005ce8 <__errno>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ea2:	e009      	b.n	8001eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <_sbrk+0x64>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <_sbrk+0x64>)
 8001eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20005000 	.word	0x20005000
 8001ec4:	00000400 	.word	0x00000400
 8001ec8:	20000134 	.word	0x20000134
 8001ecc:	200003d8 	.word	0x200003d8

08001ed0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001ed4:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <SystemInit+0x5c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <SystemInit+0x5c>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <SystemInit+0x5c>)
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4911      	ldr	r1, [pc, #68]	; (8001f2c <SystemInit+0x5c>)
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <SystemInit+0x60>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <SystemInit+0x5c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <SystemInit+0x5c>)
 8001ef2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <SystemInit+0x5c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <SystemInit+0x5c>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f06:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <SystemInit+0x5c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <SystemInit+0x5c>)
 8001f0e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001f12:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SystemInit+0x5c>)
 8001f16:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f1a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <SystemInit+0x64>)
 8001f1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f22:	609a      	str	r2, [r3, #8]
#endif 
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	f8ff0000 	.word	0xf8ff0000
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f3a:	e003      	b.n	8001f44 <LoopCopyDataInit>

08001f3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f42:	3104      	adds	r1, #4

08001f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f44:	480a      	ldr	r0, [pc, #40]	; (8001f70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f4c:	d3f6      	bcc.n	8001f3c <CopyDataInit>
  ldr r2, =_sbss
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f50:	e002      	b.n	8001f58 <LoopFillZerobss>

08001f52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001f54:	f842 3b04 	str.w	r3, [r2], #4

08001f58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001f5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f5c:	d3f9      	bcc.n	8001f52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f5e:	f7ff ffb7 	bl	8001ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f62:	f003 fec7 	bl	8005cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f66:	f7fe f8f9 	bl	800015c <main>
  bx lr
 8001f6a:	4770      	bx	lr
  ldr r3, =_sidata
 8001f6c:	080067e4 	.word	0x080067e4
  ldr r0, =_sdata
 8001f70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f74:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001f78:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001f7c:	200003d4 	.word	0x200003d4

08001f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC1_2_IRQHandler>
	...

08001f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_Init+0x28>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	; (8001fac <HAL_Init+0x28>)
 8001f8e:	f043 0310 	orr.w	r3, r3, #16
 8001f92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f94:	2003      	movs	r0, #3
 8001f96:	f000 fde3 	bl	8002b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f000 f808 	bl	8001fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa0:	f7ff fcd0 	bl	8001944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40022000 	.word	0x40022000

08001fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb8:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_InitTick+0x54>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_InitTick+0x58>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fdfb 	bl	8002bca <HAL_SYSTICK_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00e      	b.n	8001ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b0f      	cmp	r3, #15
 8001fe2:	d80a      	bhi.n	8001ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fec:	f000 fdc3 	bl	8002b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff0:	4a06      	ldr	r2, [pc, #24]	; (800200c <HAL_InitTick+0x5c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000000 	.word	0x20000000
 8002008:	20000008 	.word	0x20000008
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_IncTick+0x1c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_IncTick+0x20>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a03      	ldr	r2, [pc, #12]	; (8002030 <HAL_IncTick+0x20>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	20000008 	.word	0x20000008
 8002030:	200003c0 	.word	0x200003c0

08002034 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b02      	ldr	r3, [pc, #8]	; (8002044 <HAL_GetTick+0x10>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	200003c0 	.word	0x200003c0

08002048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff fff0 	bl	8002034 <HAL_GetTick>
 8002054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002060:	d005      	beq.n	800206e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_Delay+0x44>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800206e:	bf00      	nop
 8002070:	f7ff ffe0 	bl	8002034 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	429a      	cmp	r2, r3
 800207e:	d8f7      	bhi.n	8002070 <HAL_Delay+0x28>
  {
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000008 	.word	0x20000008

08002090 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0be      	b.n	8002230 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fc6a 	bl	80019a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fb3b 	bl	8002750 <ADC_ConversionStop_Disable>
 80020da:	4603      	mov	r3, r0
 80020dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 8099 	bne.w	800221e <HAL_ADC_Init+0x18e>
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 8095 	bne.w	800221e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020fc:	f023 0302 	bic.w	r3, r3, #2
 8002100:	f043 0202 	orr.w	r2, r3, #2
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002110:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7b1b      	ldrb	r3, [r3, #12]
 8002116:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002118:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	4313      	orrs	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002128:	d003      	beq.n	8002132 <HAL_ADC_Init+0xa2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d102      	bne.n	8002138 <HAL_ADC_Init+0xa8>
 8002132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002136:	e000      	b.n	800213a <HAL_ADC_Init+0xaa>
 8002138:	2300      	movs	r3, #0
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7d1b      	ldrb	r3, [r3, #20]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d119      	bne.n	800217c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7b1b      	ldrb	r3, [r3, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	3b01      	subs	r3, #1
 8002156:	035a      	lsls	r2, r3, #13
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	e00b      	b.n	800217c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f043 0220 	orr.w	r2, r3, #32
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	430a      	orrs	r2, r1
 800218e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	4b28      	ldr	r3, [pc, #160]	; (8002238 <HAL_ADC_Init+0x1a8>)
 8002198:	4013      	ands	r3, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ac:	d003      	beq.n	80021b6 <HAL_ADC_Init+0x126>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d104      	bne.n	80021c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	051b      	lsls	r3, r3, #20
 80021be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <HAL_ADC_Init+0x1ac>)
 80021dc:	4013      	ands	r3, r2
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d10b      	bne.n	80021fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021fa:	e018      	b.n	800222e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	f023 0312 	bic.w	r3, r3, #18
 8002204:	f043 0210 	orr.w	r2, r3, #16
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	f043 0201 	orr.w	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800221c:	e007      	b.n	800222e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	f043 0210 	orr.w	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800222e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	ffe1f7fd 	.word	0xffe1f7fd
 800223c:	ff1f0efe 	.word	0xff1f0efe

08002240 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a64      	ldr	r2, [pc, #400]	; (80023e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d004      	beq.n	8002264 <HAL_ADC_Start_DMA+0x24>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a63      	ldr	r2, [pc, #396]	; (80023ec <HAL_ADC_Start_DMA+0x1ac>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d106      	bne.n	8002272 <HAL_ADC_Start_DMA+0x32>
 8002264:	4b60      	ldr	r3, [pc, #384]	; (80023e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 80b3 	bne.w	80023d8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_ADC_Start_DMA+0x40>
 800227c:	2302      	movs	r3, #2
 800227e:	e0ae      	b.n	80023de <HAL_ADC_Start_DMA+0x19e>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fa0f 	bl	80026ac <ADC_Enable>
 800228e:	4603      	mov	r3, r0
 8002290:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	2b00      	cmp	r3, #0
 8002296:	f040 809a 	bne.w	80023ce <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a4e      	ldr	r2, [pc, #312]	; (80023ec <HAL_ADC_Start_DMA+0x1ac>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_Start_DMA+0x84>
 80022b8:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <HAL_ADC_Start_DMA+0x1a8>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d115      	bne.n	80022f0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d026      	beq.n	800232c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022ee:	e01d      	b.n	800232c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a39      	ldr	r2, [pc, #228]	; (80023e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d004      	beq.n	8002310 <HAL_ADC_Start_DMA+0xd0>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a38      	ldr	r2, [pc, #224]	; (80023ec <HAL_ADC_Start_DMA+0x1ac>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d10d      	bne.n	800232c <HAL_ADC_Start_DMA+0xec>
 8002310:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002324:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d006      	beq.n	8002346 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	f023 0206 	bic.w	r2, r3, #6
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c
 8002344:	e002      	b.n	800234c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a25      	ldr	r2, [pc, #148]	; (80023f0 <HAL_ADC_Start_DMA+0x1b0>)
 800235a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4a24      	ldr	r2, [pc, #144]	; (80023f4 <HAL_ADC_Start_DMA+0x1b4>)
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4a23      	ldr	r2, [pc, #140]	; (80023f8 <HAL_ADC_Start_DMA+0x1b8>)
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0202 	mvn.w	r2, #2
 8002374:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002384:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a18      	ldr	r0, [r3, #32]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	334c      	adds	r3, #76	; 0x4c
 8002390:	4619      	mov	r1, r3
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f000 fc7f 	bl	8002c98 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023a4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023a8:	d108      	bne.n	80023bc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80023b8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80023ba:	e00f      	b.n	80023dc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023ca:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80023cc:	e006      	b.n	80023dc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80023d6:	e001      	b.n	80023dc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40012400 	.word	0x40012400
 80023ec:	40012800 	.word	0x40012800
 80023f0:	080027c5 	.word	0x080027c5
 80023f4:	08002841 	.word	0x08002841
 80023f8:	0800285d 	.word	0x0800285d

080023fc <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_ADC_Stop_DMA+0x1a>
 8002412:	2302      	movs	r3, #2
 8002414:	e033      	b.n	800247e <HAL_ADC_Stop_DMA+0x82>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f996 	bl	8002750 <ADC_ConversionStop_Disable>
 8002424:	4603      	mov	r3, r0
 8002426:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d122      	bne.n	8002474 <HAL_ADC_Stop_DMA+0x78>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800243c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fc87 	bl	8002d56 <HAL_DMA_Abort>
 8002448:	4603      	mov	r3, r0
 800244a:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10a      	bne.n	8002468 <HAL_ADC_Stop_DMA+0x6c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	f043 0201 	orr.w	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
 8002466:	e005      	b.n	8002474 <HAL_ADC_Stop_DMA+0x78>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 800247c:	7bfb      	ldrb	r3, [r7, #15]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x20>
 80024d8:	2302      	movs	r3, #2
 80024da:	e0dc      	b.n	8002696 <HAL_ADC_ConfigChannel+0x1da>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b06      	cmp	r3, #6
 80024ea:	d81c      	bhi.n	8002526 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	3b05      	subs	r3, #5
 80024fe:	221f      	movs	r2, #31
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	4019      	ands	r1, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	3b05      	subs	r3, #5
 8002518:	fa00 f203 	lsl.w	r2, r0, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	635a      	str	r2, [r3, #52]	; 0x34
 8002524:	e03c      	b.n	80025a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b0c      	cmp	r3, #12
 800252c:	d81c      	bhi.n	8002568 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	3b23      	subs	r3, #35	; 0x23
 8002540:	221f      	movs	r2, #31
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	4019      	ands	r1, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	3b23      	subs	r3, #35	; 0x23
 800255a:	fa00 f203 	lsl.w	r2, r0, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	631a      	str	r2, [r3, #48]	; 0x30
 8002566:	e01b      	b.n	80025a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	3b41      	subs	r3, #65	; 0x41
 800257a:	221f      	movs	r2, #31
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	4019      	ands	r1, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	3b41      	subs	r3, #65	; 0x41
 8002594:	fa00 f203 	lsl.w	r2, r0, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b09      	cmp	r3, #9
 80025a6:	d91c      	bls.n	80025e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68d9      	ldr	r1, [r3, #12]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	3b1e      	subs	r3, #30
 80025ba:	2207      	movs	r2, #7
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	4019      	ands	r1, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6898      	ldr	r0, [r3, #8]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	3b1e      	subs	r3, #30
 80025d4:	fa00 f203 	lsl.w	r2, r0, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	e019      	b.n	8002616 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6919      	ldr	r1, [r3, #16]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	2207      	movs	r2, #7
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	4019      	ands	r1, r3
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6898      	ldr	r0, [r3, #8]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	fa00 f203 	lsl.w	r2, r0, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b10      	cmp	r3, #16
 800261c:	d003      	beq.n	8002626 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002622:	2b11      	cmp	r3, #17
 8002624:	d132      	bne.n	800268c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d125      	bne.n	800267c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d126      	bne.n	800268c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800264c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b10      	cmp	r3, #16
 8002654:	d11a      	bne.n	800268c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a13      	ldr	r2, [pc, #76]	; (80026a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	0c9a      	lsrs	r2, r3, #18
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800266c:	e002      	b.n	8002674 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	3b01      	subs	r3, #1
 8002672:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f9      	bne.n	800266e <HAL_ADC_ConfigChannel+0x1b2>
 800267a:	e007      	b.n	800268c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	f043 0220 	orr.w	r2, r3, #32
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	40012400 	.word	0x40012400
 80026a4:	20000000 	.word	0x20000000
 80026a8:	431bde83 	.word	0x431bde83

080026ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d039      	beq.n	800273e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026da:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <ADC_Enable+0x9c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a1b      	ldr	r2, [pc, #108]	; (800274c <ADC_Enable+0xa0>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	0c9b      	lsrs	r3, r3, #18
 80026e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026e8:	e002      	b.n	80026f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f9      	bne.n	80026ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026f6:	f7ff fc9d 	bl	8002034 <HAL_GetTick>
 80026fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026fc:	e018      	b.n	8002730 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026fe:	f7ff fc99 	bl	8002034 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d911      	bls.n	8002730 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	f043 0210 	orr.w	r2, r3, #16
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	f043 0201 	orr.w	r2, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e007      	b.n	8002740 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b01      	cmp	r3, #1
 800273c:	d1df      	bne.n	80026fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000000 	.word	0x20000000
 800274c:	431bde83 	.word	0x431bde83

08002750 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b01      	cmp	r3, #1
 8002768:	d127      	bne.n	80027ba <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800277a:	f7ff fc5b 	bl	8002034 <HAL_GetTick>
 800277e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002780:	e014      	b.n	80027ac <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002782:	f7ff fc57 	bl	8002034 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d90d      	bls.n	80027ac <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	f043 0210 	orr.w	r2, r3, #16
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e007      	b.n	80027bc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d0e3      	beq.n	8002782 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d127      	bne.n	800282e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027f4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027f8:	d115      	bne.n	8002826 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d111      	bne.n	8002826 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d105      	bne.n	8002826 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f7ff fe2d 	bl	8002486 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800282c:	e004      	b.n	8002838 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
}
 8002838:	bf00      	nop
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff fe22 	bl	8002498 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	f043 0204 	orr.w	r2, r3, #4
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f7ff fe11 	bl	80024aa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_ADCEx_Calibration_Start+0x1e>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e086      	b.n	80029bc <HAL_ADCEx_Calibration_Start+0x12c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff4a 	bl	8002750 <ADC_ConversionStop_Disable>
 80028bc:	4603      	mov	r3, r0
 80028be:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d175      	bne.n	80029b2 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028ce:	f023 0302 	bic.w	r3, r3, #2
 80028d2:	f043 0202 	orr.w	r2, r3, #2
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80028da:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <HAL_ADCEx_Calibration_Start+0x134>)
 80028dc:	681c      	ldr	r4, [r3, #0]
 80028de:	2002      	movs	r0, #2
 80028e0:	f001 fc12 	bl	8004108 <HAL_RCCEx_GetPeriphCLKFreq>
 80028e4:	4603      	mov	r3, r0
 80028e6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80028ea:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80028ec:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80028ee:	e002      	b.n	80028f6 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f9      	bne.n	80028f0 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff fed5 	bl	80026ac <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0208 	orr.w	r2, r2, #8
 8002910:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002912:	f7ff fb8f 	bl	8002034 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002918:	e014      	b.n	8002944 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800291a:	f7ff fb8b 	bl	8002034 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b0a      	cmp	r3, #10
 8002926:	d90d      	bls.n	8002944 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	f023 0312 	bic.w	r3, r3, #18
 8002930:	f043 0210 	orr.w	r2, r3, #16
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e03b      	b.n	80029bc <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1e3      	bne.n	800291a <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0204 	orr.w	r2, r2, #4
 8002960:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002962:	f7ff fb67 	bl	8002034 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002968:	e014      	b.n	8002994 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800296a:	f7ff fb63 	bl	8002034 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b0a      	cmp	r3, #10
 8002976:	d90d      	bls.n	8002994 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	f023 0312 	bic.w	r3, r3, #18
 8002980:	f043 0210 	orr.w	r2, r3, #16
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e013      	b.n	80029bc <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1e3      	bne.n	800296a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	f023 0303 	bic.w	r3, r3, #3
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd90      	pop	{r4, r7, pc}
 80029c4:	20000000 	.word	0x20000000

080029c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <__NVIC_SetPriorityGrouping+0x44>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e4:	4013      	ands	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029fa:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <__NVIC_SetPriorityGrouping+0x44>)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	60d3      	str	r3, [r2, #12]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <__NVIC_GetPriorityGrouping+0x18>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	f003 0307 	and.w	r3, r3, #7
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	db0b      	blt.n	8002a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	f003 021f 	and.w	r2, r3, #31
 8002a44:	4906      	ldr	r1, [pc, #24]	; (8002a60 <__NVIC_EnableIRQ+0x34>)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	e000e100 	.word	0xe000e100

08002a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	6039      	str	r1, [r7, #0]
 8002a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	db0a      	blt.n	8002a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	490c      	ldr	r1, [pc, #48]	; (8002ab0 <__NVIC_SetPriority+0x4c>)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	0112      	lsls	r2, r2, #4
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	440b      	add	r3, r1
 8002a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a8c:	e00a      	b.n	8002aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4908      	ldr	r1, [pc, #32]	; (8002ab4 <__NVIC_SetPriority+0x50>)
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	3b04      	subs	r3, #4
 8002a9c:	0112      	lsls	r2, r2, #4
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	761a      	strb	r2, [r3, #24]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000e100 	.word	0xe000e100
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	; 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f1c3 0307 	rsb	r3, r3, #7
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	bf28      	it	cs
 8002ad6:	2304      	movcs	r3, #4
 8002ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3304      	adds	r3, #4
 8002ade:	2b06      	cmp	r3, #6
 8002ae0:	d902      	bls.n	8002ae8 <NVIC_EncodePriority+0x30>
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3b03      	subs	r3, #3
 8002ae6:	e000      	b.n	8002aea <NVIC_EncodePriority+0x32>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43da      	mvns	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	401a      	ands	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0a:	43d9      	mvns	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	4313      	orrs	r3, r2
         );
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3724      	adds	r7, #36	; 0x24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b2c:	d301      	bcc.n	8002b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00f      	b.n	8002b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <SysTick_Config+0x40>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b3a:	210f      	movs	r1, #15
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b40:	f7ff ff90 	bl	8002a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <SysTick_Config+0x40>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <SysTick_Config+0x40>)
 8002b4c:	2207      	movs	r2, #7
 8002b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	e000e010 	.word	0xe000e010

08002b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ff2d 	bl	80029c8 <__NVIC_SetPriorityGrouping>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b88:	f7ff ff42 	bl	8002a10 <__NVIC_GetPriorityGrouping>
 8002b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	6978      	ldr	r0, [r7, #20]
 8002b94:	f7ff ff90 	bl	8002ab8 <NVIC_EncodePriority>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff5f 	bl	8002a64 <__NVIC_SetPriority>
}
 8002ba6:	bf00      	nop
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff35 	bl	8002a2c <__NVIC_EnableIRQ>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff ffa2 	bl	8002b1c <SysTick_Config>
 8002bd8:	4603      	mov	r3, r0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e043      	b.n	8002c82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <HAL_DMA_Init+0xa8>)
 8002c02:	4413      	add	r3, r2
 8002c04:	4a22      	ldr	r2, [pc, #136]	; (8002c90 <HAL_DMA_Init+0xac>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	091b      	lsrs	r3, r3, #4
 8002c0c:	009a      	lsls	r2, r3, #2
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a1f      	ldr	r2, [pc, #124]	; (8002c94 <HAL_DMA_Init+0xb0>)
 8002c16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	bffdfff8 	.word	0xbffdfff8
 8002c90:	cccccccd 	.word	0xcccccccd
 8002c94:	40020000 	.word	0x40020000

08002c98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_DMA_Start_IT+0x20>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e04a      	b.n	8002d4e <HAL_DMA_Start_IT+0xb6>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d13a      	bne.n	8002d40 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f9e8 	bl	80030c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 020e 	orr.w	r2, r2, #14
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e00f      	b.n	8002d2e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0204 	bic.w	r2, r2, #4
 8002d1c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 020a 	orr.w	r2, r2, #10
 8002d2c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e005      	b.n	8002d4c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d008      	beq.n	8002d7e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e020      	b.n	8002dc0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 020e 	bic.w	r2, r2, #14
 8002d8c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d005      	beq.n	8002dee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2204      	movs	r2, #4
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
 8002dec:	e051      	b.n	8002e92 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 020e 	bic.w	r2, r2, #14
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a22      	ldr	r2, [pc, #136]	; (8002e9c <HAL_DMA_Abort_IT+0xd0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d029      	beq.n	8002e6c <HAL_DMA_Abort_IT+0xa0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a20      	ldr	r2, [pc, #128]	; (8002ea0 <HAL_DMA_Abort_IT+0xd4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d022      	beq.n	8002e68 <HAL_DMA_Abort_IT+0x9c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1f      	ldr	r2, [pc, #124]	; (8002ea4 <HAL_DMA_Abort_IT+0xd8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d01a      	beq.n	8002e62 <HAL_DMA_Abort_IT+0x96>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <HAL_DMA_Abort_IT+0xdc>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d012      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x90>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1c      	ldr	r2, [pc, #112]	; (8002eac <HAL_DMA_Abort_IT+0xe0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00a      	beq.n	8002e56 <HAL_DMA_Abort_IT+0x8a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <HAL_DMA_Abort_IT+0xe4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d102      	bne.n	8002e50 <HAL_DMA_Abort_IT+0x84>
 8002e4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e4e:	e00e      	b.n	8002e6e <HAL_DMA_Abort_IT+0xa2>
 8002e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e54:	e00b      	b.n	8002e6e <HAL_DMA_Abort_IT+0xa2>
 8002e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e5a:	e008      	b.n	8002e6e <HAL_DMA_Abort_IT+0xa2>
 8002e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e60:	e005      	b.n	8002e6e <HAL_DMA_Abort_IT+0xa2>
 8002e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e66:	e002      	b.n	8002e6e <HAL_DMA_Abort_IT+0xa2>
 8002e68:	2310      	movs	r3, #16
 8002e6a:	e000      	b.n	8002e6e <HAL_DMA_Abort_IT+0xa2>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	4a11      	ldr	r2, [pc, #68]	; (8002eb4 <HAL_DMA_Abort_IT+0xe8>)
 8002e70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4798      	blx	r3
    } 
  }
  return status;
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40020008 	.word	0x40020008
 8002ea0:	4002001c 	.word	0x4002001c
 8002ea4:	40020030 	.word	0x40020030
 8002ea8:	40020044 	.word	0x40020044
 8002eac:	40020058 	.word	0x40020058
 8002eb0:	4002006c 	.word	0x4002006c
 8002eb4:	40020000 	.word	0x40020000

08002eb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d04f      	beq.n	8002f80 <HAL_DMA_IRQHandler+0xc8>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d04a      	beq.n	8002f80 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0320 	and.w	r3, r3, #32
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0204 	bic.w	r2, r2, #4
 8002f06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a66      	ldr	r2, [pc, #408]	; (80030a8 <HAL_DMA_IRQHandler+0x1f0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d029      	beq.n	8002f66 <HAL_DMA_IRQHandler+0xae>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a65      	ldr	r2, [pc, #404]	; (80030ac <HAL_DMA_IRQHandler+0x1f4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d022      	beq.n	8002f62 <HAL_DMA_IRQHandler+0xaa>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a63      	ldr	r2, [pc, #396]	; (80030b0 <HAL_DMA_IRQHandler+0x1f8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01a      	beq.n	8002f5c <HAL_DMA_IRQHandler+0xa4>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a62      	ldr	r2, [pc, #392]	; (80030b4 <HAL_DMA_IRQHandler+0x1fc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d012      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x9e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a60      	ldr	r2, [pc, #384]	; (80030b8 <HAL_DMA_IRQHandler+0x200>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00a      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x98>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a5f      	ldr	r2, [pc, #380]	; (80030bc <HAL_DMA_IRQHandler+0x204>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d102      	bne.n	8002f4a <HAL_DMA_IRQHandler+0x92>
 8002f44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f48:	e00e      	b.n	8002f68 <HAL_DMA_IRQHandler+0xb0>
 8002f4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f4e:	e00b      	b.n	8002f68 <HAL_DMA_IRQHandler+0xb0>
 8002f50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f54:	e008      	b.n	8002f68 <HAL_DMA_IRQHandler+0xb0>
 8002f56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f5a:	e005      	b.n	8002f68 <HAL_DMA_IRQHandler+0xb0>
 8002f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f60:	e002      	b.n	8002f68 <HAL_DMA_IRQHandler+0xb0>
 8002f62:	2340      	movs	r3, #64	; 0x40
 8002f64:	e000      	b.n	8002f68 <HAL_DMA_IRQHandler+0xb0>
 8002f66:	2304      	movs	r3, #4
 8002f68:	4a55      	ldr	r2, [pc, #340]	; (80030c0 <HAL_DMA_IRQHandler+0x208>)
 8002f6a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8094 	beq.w	800309e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002f7e:	e08e      	b.n	800309e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	2202      	movs	r2, #2
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d056      	beq.n	800303e <HAL_DMA_IRQHandler+0x186>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d051      	beq.n	800303e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10b      	bne.n	8002fc0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 020a 	bic.w	r2, r2, #10
 8002fb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a38      	ldr	r2, [pc, #224]	; (80030a8 <HAL_DMA_IRQHandler+0x1f0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d029      	beq.n	800301e <HAL_DMA_IRQHandler+0x166>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a37      	ldr	r2, [pc, #220]	; (80030ac <HAL_DMA_IRQHandler+0x1f4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d022      	beq.n	800301a <HAL_DMA_IRQHandler+0x162>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a35      	ldr	r2, [pc, #212]	; (80030b0 <HAL_DMA_IRQHandler+0x1f8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01a      	beq.n	8003014 <HAL_DMA_IRQHandler+0x15c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a34      	ldr	r2, [pc, #208]	; (80030b4 <HAL_DMA_IRQHandler+0x1fc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d012      	beq.n	800300e <HAL_DMA_IRQHandler+0x156>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a32      	ldr	r2, [pc, #200]	; (80030b8 <HAL_DMA_IRQHandler+0x200>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d00a      	beq.n	8003008 <HAL_DMA_IRQHandler+0x150>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a31      	ldr	r2, [pc, #196]	; (80030bc <HAL_DMA_IRQHandler+0x204>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d102      	bne.n	8003002 <HAL_DMA_IRQHandler+0x14a>
 8002ffc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003000:	e00e      	b.n	8003020 <HAL_DMA_IRQHandler+0x168>
 8003002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003006:	e00b      	b.n	8003020 <HAL_DMA_IRQHandler+0x168>
 8003008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800300c:	e008      	b.n	8003020 <HAL_DMA_IRQHandler+0x168>
 800300e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003012:	e005      	b.n	8003020 <HAL_DMA_IRQHandler+0x168>
 8003014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003018:	e002      	b.n	8003020 <HAL_DMA_IRQHandler+0x168>
 800301a:	2320      	movs	r3, #32
 800301c:	e000      	b.n	8003020 <HAL_DMA_IRQHandler+0x168>
 800301e:	2302      	movs	r3, #2
 8003020:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <HAL_DMA_IRQHandler+0x208>)
 8003022:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	2b00      	cmp	r3, #0
 8003032:	d034      	beq.n	800309e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800303c:	e02f      	b.n	800309e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2208      	movs	r2, #8
 8003044:	409a      	lsls	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d028      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x1e8>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d023      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 020e 	bic.w	r2, r2, #14
 8003066:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003070:	2101      	movs	r1, #1
 8003072:	fa01 f202 	lsl.w	r2, r1, r2
 8003076:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	2b00      	cmp	r3, #0
 8003094:	d004      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	4798      	blx	r3
    }
  }
  return;
 800309e:	bf00      	nop
 80030a0:	bf00      	nop
}
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40020008 	.word	0x40020008
 80030ac:	4002001c 	.word	0x4002001c
 80030b0:	40020030 	.word	0x40020030
 80030b4:	40020044 	.word	0x40020044
 80030b8:	40020058 	.word	0x40020058
 80030bc:	4002006c 	.word	0x4002006c
 80030c0:	40020000 	.word	0x40020000

080030c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	2101      	movs	r1, #1
 80030dc:	fa01 f202 	lsl.w	r2, r1, r2
 80030e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d108      	bne.n	8003104 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003102:	e007      	b.n	8003114 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	60da      	str	r2, [r3, #12]
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
	...

08003120 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003120:	b480      	push	{r7}
 8003122:	b08b      	sub	sp, #44	; 0x2c
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800312e:	2300      	movs	r3, #0
 8003130:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003132:	e169      	b.n	8003408 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003134:	2201      	movs	r2, #1
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	429a      	cmp	r2, r3
 800314e:	f040 8158 	bne.w	8003402 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4a9a      	ldr	r2, [pc, #616]	; (80033c0 <HAL_GPIO_Init+0x2a0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d05e      	beq.n	800321a <HAL_GPIO_Init+0xfa>
 800315c:	4a98      	ldr	r2, [pc, #608]	; (80033c0 <HAL_GPIO_Init+0x2a0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d875      	bhi.n	800324e <HAL_GPIO_Init+0x12e>
 8003162:	4a98      	ldr	r2, [pc, #608]	; (80033c4 <HAL_GPIO_Init+0x2a4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d058      	beq.n	800321a <HAL_GPIO_Init+0xfa>
 8003168:	4a96      	ldr	r2, [pc, #600]	; (80033c4 <HAL_GPIO_Init+0x2a4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d86f      	bhi.n	800324e <HAL_GPIO_Init+0x12e>
 800316e:	4a96      	ldr	r2, [pc, #600]	; (80033c8 <HAL_GPIO_Init+0x2a8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d052      	beq.n	800321a <HAL_GPIO_Init+0xfa>
 8003174:	4a94      	ldr	r2, [pc, #592]	; (80033c8 <HAL_GPIO_Init+0x2a8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d869      	bhi.n	800324e <HAL_GPIO_Init+0x12e>
 800317a:	4a94      	ldr	r2, [pc, #592]	; (80033cc <HAL_GPIO_Init+0x2ac>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d04c      	beq.n	800321a <HAL_GPIO_Init+0xfa>
 8003180:	4a92      	ldr	r2, [pc, #584]	; (80033cc <HAL_GPIO_Init+0x2ac>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d863      	bhi.n	800324e <HAL_GPIO_Init+0x12e>
 8003186:	4a92      	ldr	r2, [pc, #584]	; (80033d0 <HAL_GPIO_Init+0x2b0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d046      	beq.n	800321a <HAL_GPIO_Init+0xfa>
 800318c:	4a90      	ldr	r2, [pc, #576]	; (80033d0 <HAL_GPIO_Init+0x2b0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d85d      	bhi.n	800324e <HAL_GPIO_Init+0x12e>
 8003192:	2b12      	cmp	r3, #18
 8003194:	d82a      	bhi.n	80031ec <HAL_GPIO_Init+0xcc>
 8003196:	2b12      	cmp	r3, #18
 8003198:	d859      	bhi.n	800324e <HAL_GPIO_Init+0x12e>
 800319a:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <HAL_GPIO_Init+0x80>)
 800319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a0:	0800321b 	.word	0x0800321b
 80031a4:	080031f5 	.word	0x080031f5
 80031a8:	08003207 	.word	0x08003207
 80031ac:	08003249 	.word	0x08003249
 80031b0:	0800324f 	.word	0x0800324f
 80031b4:	0800324f 	.word	0x0800324f
 80031b8:	0800324f 	.word	0x0800324f
 80031bc:	0800324f 	.word	0x0800324f
 80031c0:	0800324f 	.word	0x0800324f
 80031c4:	0800324f 	.word	0x0800324f
 80031c8:	0800324f 	.word	0x0800324f
 80031cc:	0800324f 	.word	0x0800324f
 80031d0:	0800324f 	.word	0x0800324f
 80031d4:	0800324f 	.word	0x0800324f
 80031d8:	0800324f 	.word	0x0800324f
 80031dc:	0800324f 	.word	0x0800324f
 80031e0:	0800324f 	.word	0x0800324f
 80031e4:	080031fd 	.word	0x080031fd
 80031e8:	08003211 	.word	0x08003211
 80031ec:	4a79      	ldr	r2, [pc, #484]	; (80033d4 <HAL_GPIO_Init+0x2b4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031f2:	e02c      	b.n	800324e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	623b      	str	r3, [r7, #32]
          break;
 80031fa:	e029      	b.n	8003250 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	3304      	adds	r3, #4
 8003202:	623b      	str	r3, [r7, #32]
          break;
 8003204:	e024      	b.n	8003250 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	3308      	adds	r3, #8
 800320c:	623b      	str	r3, [r7, #32]
          break;
 800320e:	e01f      	b.n	8003250 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	330c      	adds	r3, #12
 8003216:	623b      	str	r3, [r7, #32]
          break;
 8003218:	e01a      	b.n	8003250 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003222:	2304      	movs	r3, #4
 8003224:	623b      	str	r3, [r7, #32]
          break;
 8003226:	e013      	b.n	8003250 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003230:	2308      	movs	r3, #8
 8003232:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	611a      	str	r2, [r3, #16]
          break;
 800323a:	e009      	b.n	8003250 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800323c:	2308      	movs	r3, #8
 800323e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	615a      	str	r2, [r3, #20]
          break;
 8003246:	e003      	b.n	8003250 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003248:	2300      	movs	r3, #0
 800324a:	623b      	str	r3, [r7, #32]
          break;
 800324c:	e000      	b.n	8003250 <HAL_GPIO_Init+0x130>
          break;
 800324e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2bff      	cmp	r3, #255	; 0xff
 8003254:	d801      	bhi.n	800325a <HAL_GPIO_Init+0x13a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	e001      	b.n	800325e <HAL_GPIO_Init+0x13e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3304      	adds	r3, #4
 800325e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2bff      	cmp	r3, #255	; 0xff
 8003264:	d802      	bhi.n	800326c <HAL_GPIO_Init+0x14c>
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	e002      	b.n	8003272 <HAL_GPIO_Init+0x152>
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	3b08      	subs	r3, #8
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	210f      	movs	r1, #15
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	401a      	ands	r2, r3
 8003284:	6a39      	ldr	r1, [r7, #32]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	431a      	orrs	r2, r3
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 80b1 	beq.w	8003402 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032a0:	4b4d      	ldr	r3, [pc, #308]	; (80033d8 <HAL_GPIO_Init+0x2b8>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	4a4c      	ldr	r2, [pc, #304]	; (80033d8 <HAL_GPIO_Init+0x2b8>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6193      	str	r3, [r2, #24]
 80032ac:	4b4a      	ldr	r3, [pc, #296]	; (80033d8 <HAL_GPIO_Init+0x2b8>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032b8:	4a48      	ldr	r2, [pc, #288]	; (80033dc <HAL_GPIO_Init+0x2bc>)
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	089b      	lsrs	r3, r3, #2
 80032be:	3302      	adds	r3, #2
 80032c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	220f      	movs	r2, #15
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4013      	ands	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a40      	ldr	r2, [pc, #256]	; (80033e0 <HAL_GPIO_Init+0x2c0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d013      	beq.n	800330c <HAL_GPIO_Init+0x1ec>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a3f      	ldr	r2, [pc, #252]	; (80033e4 <HAL_GPIO_Init+0x2c4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00d      	beq.n	8003308 <HAL_GPIO_Init+0x1e8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a3e      	ldr	r2, [pc, #248]	; (80033e8 <HAL_GPIO_Init+0x2c8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d007      	beq.n	8003304 <HAL_GPIO_Init+0x1e4>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a3d      	ldr	r2, [pc, #244]	; (80033ec <HAL_GPIO_Init+0x2cc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d101      	bne.n	8003300 <HAL_GPIO_Init+0x1e0>
 80032fc:	2303      	movs	r3, #3
 80032fe:	e006      	b.n	800330e <HAL_GPIO_Init+0x1ee>
 8003300:	2304      	movs	r3, #4
 8003302:	e004      	b.n	800330e <HAL_GPIO_Init+0x1ee>
 8003304:	2302      	movs	r3, #2
 8003306:	e002      	b.n	800330e <HAL_GPIO_Init+0x1ee>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <HAL_GPIO_Init+0x1ee>
 800330c:	2300      	movs	r3, #0
 800330e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003310:	f002 0203 	and.w	r2, r2, #3
 8003314:	0092      	lsls	r2, r2, #2
 8003316:	4093      	lsls	r3, r2
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800331e:	492f      	ldr	r1, [pc, #188]	; (80033dc <HAL_GPIO_Init+0x2bc>)
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	3302      	adds	r3, #2
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d006      	beq.n	8003346 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003338:	4b2d      	ldr	r3, [pc, #180]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	492c      	ldr	r1, [pc, #176]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]
 8003344:	e006      	b.n	8003354 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003346:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	43db      	mvns	r3, r3
 800334e:	4928      	ldr	r1, [pc, #160]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 8003350:	4013      	ands	r3, r2
 8003352:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d006      	beq.n	800336e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003360:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	4922      	ldr	r1, [pc, #136]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
 800336c:	e006      	b.n	800337c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800336e:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	43db      	mvns	r3, r3
 8003376:	491e      	ldr	r1, [pc, #120]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 8003378:	4013      	ands	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d006      	beq.n	8003396 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003388:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	4918      	ldr	r1, [pc, #96]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	4313      	orrs	r3, r2
 8003392:	608b      	str	r3, [r1, #8]
 8003394:	e006      	b.n	80033a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003396:	4b16      	ldr	r3, [pc, #88]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	43db      	mvns	r3, r3
 800339e:	4914      	ldr	r1, [pc, #80]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d021      	beq.n	80033f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033b0:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	490e      	ldr	r1, [pc, #56]	; (80033f0 <HAL_GPIO_Init+0x2d0>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60cb      	str	r3, [r1, #12]
 80033bc:	e021      	b.n	8003402 <HAL_GPIO_Init+0x2e2>
 80033be:	bf00      	nop
 80033c0:	10320000 	.word	0x10320000
 80033c4:	10310000 	.word	0x10310000
 80033c8:	10220000 	.word	0x10220000
 80033cc:	10210000 	.word	0x10210000
 80033d0:	10120000 	.word	0x10120000
 80033d4:	10110000 	.word	0x10110000
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40010000 	.word	0x40010000
 80033e0:	40010800 	.word	0x40010800
 80033e4:	40010c00 	.word	0x40010c00
 80033e8:	40011000 	.word	0x40011000
 80033ec:	40011400 	.word	0x40011400
 80033f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HAL_GPIO_Init+0x304>)
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	4909      	ldr	r1, [pc, #36]	; (8003424 <HAL_GPIO_Init+0x304>)
 80033fe:	4013      	ands	r3, r2
 8003400:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	3301      	adds	r3, #1
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	fa22 f303 	lsr.w	r3, r2, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	f47f ae8e 	bne.w	8003134 <HAL_GPIO_Init+0x14>
  }
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	372c      	adds	r7, #44	; 0x2c
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	40010400 	.word	0x40010400

08003428 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	887b      	ldrh	r3, [r7, #2]
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003440:	2301      	movs	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
 8003444:	e001      	b.n	800344a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800344a:	7bfb      	ldrb	r3, [r7, #15]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	807b      	strh	r3, [r7, #2]
 8003462:	4613      	mov	r3, r2
 8003464:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003466:	787b      	ldrb	r3, [r7, #1]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800346c:	887a      	ldrh	r2, [r7, #2]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003472:	e003      	b.n	800347c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003474:	887b      	ldrh	r3, [r7, #2]
 8003476:	041a      	lsls	r2, r3, #16
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	611a      	str	r2, [r3, #16]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	460b      	mov	r3, r1
 8003490:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	887b      	ldrh	r3, [r7, #2]
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800349e:	887a      	ldrh	r2, [r7, #2]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80034a4:	e002      	b.n	80034ac <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034a6:	887a      	ldrh	r2, [r7, #2]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	611a      	str	r2, [r3, #16]
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
	...

080034b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034c2:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034ce:	4a05      	ldr	r2, [pc, #20]	; (80034e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd fe14 	bl	8001104 <HAL_GPIO_EXTI_Callback>
  }
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40010400 	.word	0x40010400

080034e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e11b      	b.n	8003732 <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fe fab2 	bl	8001a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2224      	movs	r2, #36	; 0x24
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800352c:	f000 fcf0 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 8003530:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4a81      	ldr	r2, [pc, #516]	; (800373c <HAL_I2C_Init+0x254>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d807      	bhi.n	800354c <HAL_I2C_Init+0x64>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a80      	ldr	r2, [pc, #512]	; (8003740 <HAL_I2C_Init+0x258>)
 8003540:	4293      	cmp	r3, r2
 8003542:	bf94      	ite	ls
 8003544:	2301      	movls	r3, #1
 8003546:	2300      	movhi	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e006      	b.n	800355a <HAL_I2C_Init+0x72>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a7d      	ldr	r2, [pc, #500]	; (8003744 <HAL_I2C_Init+0x25c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	bf94      	ite	ls
 8003554:	2301      	movls	r3, #1
 8003556:	2300      	movhi	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e0e7      	b.n	8003732 <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4a78      	ldr	r2, [pc, #480]	; (8003748 <HAL_I2C_Init+0x260>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	0c9b      	lsrs	r3, r3, #18
 800356c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a6a      	ldr	r2, [pc, #424]	; (800373c <HAL_I2C_Init+0x254>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d802      	bhi.n	800359c <HAL_I2C_Init+0xb4>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3301      	adds	r3, #1
 800359a:	e009      	b.n	80035b0 <HAL_I2C_Init+0xc8>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	4a69      	ldr	r2, [pc, #420]	; (800374c <HAL_I2C_Init+0x264>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	099b      	lsrs	r3, r3, #6
 80035ae:	3301      	adds	r3, #1
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	430b      	orrs	r3, r1
 80035b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	495c      	ldr	r1, [pc, #368]	; (800373c <HAL_I2C_Init+0x254>)
 80035cc:	428b      	cmp	r3, r1
 80035ce:	d819      	bhi.n	8003604 <HAL_I2C_Init+0x11c>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1e59      	subs	r1, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	fbb1 f3f3 	udiv	r3, r1, r3
 80035de:	1c59      	adds	r1, r3, #1
 80035e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035e4:	400b      	ands	r3, r1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_I2C_Init+0x118>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1e59      	subs	r1, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035f8:	3301      	adds	r3, #1
 80035fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fe:	e051      	b.n	80036a4 <HAL_I2C_Init+0x1bc>
 8003600:	2304      	movs	r3, #4
 8003602:	e04f      	b.n	80036a4 <HAL_I2C_Init+0x1bc>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d111      	bne.n	8003630 <HAL_I2C_Init+0x148>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1e58      	subs	r0, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	440b      	add	r3, r1
 800361a:	fbb0 f3f3 	udiv	r3, r0, r3
 800361e:	3301      	adds	r3, #1
 8003620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	e012      	b.n	8003656 <HAL_I2C_Init+0x16e>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1e58      	subs	r0, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	0099      	lsls	r1, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	fbb0 f3f3 	udiv	r3, r0, r3
 8003646:	3301      	adds	r3, #1
 8003648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364c:	2b00      	cmp	r3, #0
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Init+0x176>
 800365a:	2301      	movs	r3, #1
 800365c:	e022      	b.n	80036a4 <HAL_I2C_Init+0x1bc>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10e      	bne.n	8003684 <HAL_I2C_Init+0x19c>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1e58      	subs	r0, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6859      	ldr	r1, [r3, #4]
 800366e:	460b      	mov	r3, r1
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	440b      	add	r3, r1
 8003674:	fbb0 f3f3 	udiv	r3, r0, r3
 8003678:	3301      	adds	r3, #1
 800367a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003682:	e00f      	b.n	80036a4 <HAL_I2C_Init+0x1bc>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1e58      	subs	r0, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	0099      	lsls	r1, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	fbb0 f3f3 	udiv	r3, r0, r3
 800369a:	3301      	adds	r3, #1
 800369c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	6809      	ldr	r1, [r1, #0]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69da      	ldr	r2, [r3, #28]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6911      	ldr	r1, [r2, #16]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68d2      	ldr	r2, [r2, #12]
 80036de:	4311      	orrs	r1, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	430b      	orrs	r3, r1
 80036e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	000186a0 	.word	0x000186a0
 8003740:	001e847f 	.word	0x001e847f
 8003744:	003d08ff 	.word	0x003d08ff
 8003748:	431bde83 	.word	0x431bde83
 800374c:	10624dd3 	.word	0x10624dd3

08003750 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003754:	4b03      	ldr	r3, [pc, #12]	; (8003764 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]
}
 800375a:	bf00      	nop
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	420e0020 	.word	0x420e0020

08003768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e26c      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 8087 	beq.w	8003896 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003788:	4b92      	ldr	r3, [pc, #584]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b04      	cmp	r3, #4
 8003792:	d00c      	beq.n	80037ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003794:	4b8f      	ldr	r3, [pc, #572]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 030c 	and.w	r3, r3, #12
 800379c:	2b08      	cmp	r3, #8
 800379e:	d112      	bne.n	80037c6 <HAL_RCC_OscConfig+0x5e>
 80037a0:	4b8c      	ldr	r3, [pc, #560]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ac:	d10b      	bne.n	80037c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ae:	4b89      	ldr	r3, [pc, #548]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d06c      	beq.n	8003894 <HAL_RCC_OscConfig+0x12c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d168      	bne.n	8003894 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e246      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ce:	d106      	bne.n	80037de <HAL_RCC_OscConfig+0x76>
 80037d0:	4b80      	ldr	r3, [pc, #512]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a7f      	ldr	r2, [pc, #508]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	e02e      	b.n	800383c <HAL_RCC_OscConfig+0xd4>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x98>
 80037e6:	4b7b      	ldr	r3, [pc, #492]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a7a      	ldr	r2, [pc, #488]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b78      	ldr	r3, [pc, #480]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a77      	ldr	r2, [pc, #476]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80037f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e01d      	b.n	800383c <HAL_RCC_OscConfig+0xd4>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0xbc>
 800380a:	4b72      	ldr	r3, [pc, #456]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a71      	ldr	r2, [pc, #452]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4b6f      	ldr	r3, [pc, #444]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a6e      	ldr	r2, [pc, #440]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e00b      	b.n	800383c <HAL_RCC_OscConfig+0xd4>
 8003824:	4b6b      	ldr	r3, [pc, #428]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a6a      	ldr	r2, [pc, #424]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 800382a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	4b68      	ldr	r3, [pc, #416]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a67      	ldr	r2, [pc, #412]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d013      	beq.n	800386c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fe fbf6 	bl	8002034 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800384c:	f7fe fbf2 	bl	8002034 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	; 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e1fa      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385e:	4b5d      	ldr	r3, [pc, #372]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0xe4>
 800386a:	e014      	b.n	8003896 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fe fbe2 	bl	8002034 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003874:	f7fe fbde 	bl	8002034 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	; 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e1e6      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003886:	4b53      	ldr	r3, [pc, #332]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x10c>
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d063      	beq.n	800396a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038a2:	4b4c      	ldr	r3, [pc, #304]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038ae:	4b49      	ldr	r3, [pc, #292]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d11c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x18c>
 80038ba:	4b46      	ldr	r3, [pc, #280]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d116      	bne.n	80038f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c6:	4b43      	ldr	r3, [pc, #268]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_RCC_OscConfig+0x176>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d001      	beq.n	80038de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e1ba      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038de:	4b3d      	ldr	r3, [pc, #244]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4939      	ldr	r1, [pc, #228]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f2:	e03a      	b.n	800396a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d020      	beq.n	800393e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038fc:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003902:	f7fe fb97 	bl	8002034 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800390a:	f7fe fb93 	bl	8002034 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e19b      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391c:	4b2d      	ldr	r3, [pc, #180]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003928:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4927      	ldr	r1, [pc, #156]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
 800393c:	e015      	b.n	800396a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393e:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fe fb76 	bl	8002034 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394c:	f7fe fb72 	bl	8002034 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e17a      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395e:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d03a      	beq.n	80039ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d019      	beq.n	80039b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <HAL_RCC_OscConfig+0x274>)
 8003980:	2201      	movs	r2, #1
 8003982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003984:	f7fe fb56 	bl	8002034 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398c:	f7fe fb52 	bl	8002034 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e15a      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039aa:	2001      	movs	r0, #1
 80039ac:	f000 fad8 	bl	8003f60 <RCC_Delay>
 80039b0:	e01c      	b.n	80039ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b2:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <HAL_RCC_OscConfig+0x274>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b8:	f7fe fb3c 	bl	8002034 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039be:	e00f      	b.n	80039e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c0:	f7fe fb38 	bl	8002034 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d908      	bls.n	80039e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e140      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000
 80039d8:	42420000 	.word	0x42420000
 80039dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e0:	4b9e      	ldr	r3, [pc, #632]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e9      	bne.n	80039c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80a6 	beq.w	8003b46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fe:	4b97      	ldr	r3, [pc, #604]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10d      	bne.n	8003a26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	4b94      	ldr	r3, [pc, #592]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	4a93      	ldr	r2, [pc, #588]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a14:	61d3      	str	r3, [r2, #28]
 8003a16:	4b91      	ldr	r3, [pc, #580]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a26:	4b8e      	ldr	r3, [pc, #568]	; (8003c60 <HAL_RCC_OscConfig+0x4f8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d118      	bne.n	8003a64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a32:	4b8b      	ldr	r3, [pc, #556]	; (8003c60 <HAL_RCC_OscConfig+0x4f8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a8a      	ldr	r2, [pc, #552]	; (8003c60 <HAL_RCC_OscConfig+0x4f8>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3e:	f7fe faf9 	bl	8002034 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a46:	f7fe faf5 	bl	8002034 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b64      	cmp	r3, #100	; 0x64
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e0fd      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	4b81      	ldr	r3, [pc, #516]	; (8003c60 <HAL_RCC_OscConfig+0x4f8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x312>
 8003a6c:	4b7b      	ldr	r3, [pc, #492]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4a7a      	ldr	r2, [pc, #488]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6213      	str	r3, [r2, #32]
 8003a78:	e02d      	b.n	8003ad6 <HAL_RCC_OscConfig+0x36e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x334>
 8003a82:	4b76      	ldr	r3, [pc, #472]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	4a75      	ldr	r2, [pc, #468]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	6213      	str	r3, [r2, #32]
 8003a8e:	4b73      	ldr	r3, [pc, #460]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	4a72      	ldr	r2, [pc, #456]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	6213      	str	r3, [r2, #32]
 8003a9a:	e01c      	b.n	8003ad6 <HAL_RCC_OscConfig+0x36e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	2b05      	cmp	r3, #5
 8003aa2:	d10c      	bne.n	8003abe <HAL_RCC_OscConfig+0x356>
 8003aa4:	4b6d      	ldr	r3, [pc, #436]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	4a6c      	ldr	r2, [pc, #432]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003aaa:	f043 0304 	orr.w	r3, r3, #4
 8003aae:	6213      	str	r3, [r2, #32]
 8003ab0:	4b6a      	ldr	r3, [pc, #424]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4a69      	ldr	r2, [pc, #420]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6213      	str	r3, [r2, #32]
 8003abc:	e00b      	b.n	8003ad6 <HAL_RCC_OscConfig+0x36e>
 8003abe:	4b67      	ldr	r3, [pc, #412]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	4a66      	ldr	r2, [pc, #408]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	6213      	str	r3, [r2, #32]
 8003aca:	4b64      	ldr	r3, [pc, #400]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	4a63      	ldr	r2, [pc, #396]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003ad0:	f023 0304 	bic.w	r3, r3, #4
 8003ad4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d015      	beq.n	8003b0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ade:	f7fe faa9 	bl	8002034 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fe faa5 	bl	8002034 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e0ab      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afc:	4b57      	ldr	r3, [pc, #348]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ee      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x37e>
 8003b08:	e014      	b.n	8003b34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0a:	f7fe fa93 	bl	8002034 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b10:	e00a      	b.n	8003b28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f7fe fa8f 	bl	8002034 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e095      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b28:	4b4c      	ldr	r3, [pc, #304]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1ee      	bne.n	8003b12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d105      	bne.n	8003b46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3a:	4b48      	ldr	r3, [pc, #288]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	4a47      	ldr	r2, [pc, #284]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8081 	beq.w	8003c52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b50:	4b42      	ldr	r3, [pc, #264]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d061      	beq.n	8003c20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d146      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b64:	4b3f      	ldr	r3, [pc, #252]	; (8003c64 <HAL_RCC_OscConfig+0x4fc>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6a:	f7fe fa63 	bl	8002034 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b72:	f7fe fa5f 	bl	8002034 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e067      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b84:	4b35      	ldr	r3, [pc, #212]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d108      	bne.n	8003bac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b9a:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	492d      	ldr	r1, [pc, #180]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bac:	4b2b      	ldr	r3, [pc, #172]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a19      	ldr	r1, [r3, #32]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	4927      	ldr	r1, [pc, #156]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc4:	4b27      	ldr	r3, [pc, #156]	; (8003c64 <HAL_RCC_OscConfig+0x4fc>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bca:	f7fe fa33 	bl	8002034 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd2:	f7fe fa2f 	bl	8002034 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e037      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x46a>
 8003bf0:	e02f      	b.n	8003c52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf2:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <HAL_RCC_OscConfig+0x4fc>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fa1c 	bl	8002034 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fe fa18 	bl	8002034 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e020      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x498>
 8003c1e:	e018      	b.n	8003c52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e013      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <HAL_RCC_OscConfig+0x4f4>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d106      	bne.n	8003c4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d001      	beq.n	8003c52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40007000 	.word	0x40007000
 8003c64:	42420060 	.word	0x42420060

08003c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0d0      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b6a      	ldr	r3, [pc, #424]	; (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d910      	bls.n	8003cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b67      	ldr	r3, [pc, #412]	; (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 0207 	bic.w	r2, r3, #7
 8003c92:	4965      	ldr	r1, [pc, #404]	; (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b63      	ldr	r3, [pc, #396]	; (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0b8      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d020      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc4:	4b59      	ldr	r3, [pc, #356]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a58      	ldr	r2, [pc, #352]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003cca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cdc:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4a52      	ldr	r2, [pc, #328]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ce6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce8:	4b50      	ldr	r3, [pc, #320]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	494d      	ldr	r1, [pc, #308]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d040      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	4b47      	ldr	r3, [pc, #284]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d115      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e07f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d26:	4b41      	ldr	r3, [pc, #260]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e073      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d36:	4b3d      	ldr	r3, [pc, #244]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e06b      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d46:	4b39      	ldr	r3, [pc, #228]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4936      	ldr	r1, [pc, #216]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d58:	f7fe f96c 	bl	8002034 <HAL_GetTick>
 8003d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d60:	f7fe f968 	bl	8002034 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e053      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	4b2d      	ldr	r3, [pc, #180]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 020c 	and.w	r2, r3, #12
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d1eb      	bne.n	8003d60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d88:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d210      	bcs.n	8003db8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 0207 	bic.w	r2, r3, #7
 8003d9e:	4922      	ldr	r1, [pc, #136]	; (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e032      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc4:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4916      	ldr	r1, [pc, #88]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	490e      	ldr	r1, [pc, #56]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003df6:	f000 f821 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	490a      	ldr	r1, [pc, #40]	; (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003e08:	5ccb      	ldrb	r3, [r1, r3]
 8003e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <HAL_RCC_ClockConfig+0x1cc>)
 8003e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <HAL_RCC_ClockConfig+0x1d0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe f8ca 	bl	8001fb0 <HAL_InitTick>

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40022000 	.word	0x40022000
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	08006790 	.word	0x08006790
 8003e34:	20000000 	.word	0x20000000
 8003e38:	20000004 	.word	0x20000004

08003e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e3c:	b490      	push	{r4, r7}
 8003e3e:	b08a      	sub	sp, #40	; 0x28
 8003e40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e42:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e44:	1d3c      	adds	r4, r7, #4
 8003e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e4c:	f240 2301 	movw	r3, #513	; 0x201
 8003e50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	2300      	movs	r3, #0
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e66:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d002      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0x40>
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d003      	beq.n	8003e82 <HAL_RCC_GetSysClockFreq+0x46>
 8003e7a:	e02d      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e7e:	623b      	str	r3, [r7, #32]
      break;
 8003e80:	e02d      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	0c9b      	lsrs	r3, r3, #18
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e8e:	4413      	add	r3, r2
 8003e90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d013      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ea0:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	0c5b      	lsrs	r3, r3, #17
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003eae:	4413      	add	r3, r2
 8003eb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003eb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	4a0e      	ldr	r2, [pc, #56]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eba:	fb02 f203 	mul.w	r2, r2, r3
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec6:	e004      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	4a0b      	ldr	r2, [pc, #44]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ecc:	fb02 f303 	mul.w	r3, r2, r3
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	623b      	str	r3, [r7, #32]
      break;
 8003ed6:	e002      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eda:	623b      	str	r3, [r7, #32]
      break;
 8003edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ede:	6a3b      	ldr	r3, [r7, #32]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3728      	adds	r7, #40	; 0x28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc90      	pop	{r4, r7}
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	08006700 	.word	0x08006700
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	007a1200 	.word	0x007a1200
 8003ef8:	003d0900 	.word	0x003d0900

08003efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f00:	4b02      	ldr	r3, [pc, #8]	; (8003f0c <HAL_RCC_GetHCLKFreq+0x10>)
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	20000000 	.word	0x20000000

08003f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f14:	f7ff fff2 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4903      	ldr	r1, [pc, #12]	; (8003f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40021000 	.word	0x40021000
 8003f34:	080067a0 	.word	0x080067a0

08003f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f3c:	f7ff ffde 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f40:	4602      	mov	r2, r0
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	0adb      	lsrs	r3, r3, #11
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	4903      	ldr	r1, [pc, #12]	; (8003f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f4e:	5ccb      	ldrb	r3, [r1, r3]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	080067a0 	.word	0x080067a0

08003f60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f68:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <RCC_Delay+0x34>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <RCC_Delay+0x38>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	0a5b      	lsrs	r3, r3, #9
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	fb02 f303 	mul.w	r3, r2, r3
 8003f7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f7c:	bf00      	nop
  }
  while (Delay --);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1e5a      	subs	r2, r3, #1
 8003f82:	60fa      	str	r2, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f9      	bne.n	8003f7c <RCC_Delay+0x1c>
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr
 8003f94:	20000000 	.word	0x20000000
 8003f98:	10624dd3 	.word	0x10624dd3

08003f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d07d      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fbc:	4b4f      	ldr	r3, [pc, #316]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10d      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc8:	4b4c      	ldr	r3, [pc, #304]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	4a4b      	ldr	r2, [pc, #300]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	61d3      	str	r3, [r2, #28]
 8003fd4:	4b49      	ldr	r3, [pc, #292]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe4:	4b46      	ldr	r3, [pc, #280]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d118      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff0:	4b43      	ldr	r3, [pc, #268]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a42      	ldr	r2, [pc, #264]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ffa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ffc:	f7fe f81a 	bl	8002034 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004002:	e008      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004004:	f7fe f816 	bl	8002034 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e06d      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004016:	4b3a      	ldr	r3, [pc, #232]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004022:	4b36      	ldr	r3, [pc, #216]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d02e      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	429a      	cmp	r2, r3
 800403e:	d027      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004040:	4b2e      	ldr	r3, [pc, #184]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004048:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800404a:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004050:	4b2c      	ldr	r3, [pc, #176]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004056:	4a29      	ldr	r2, [pc, #164]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d014      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004066:	f7fd ffe5 	bl	8002034 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406c:	e00a      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fd ffe1 	bl	8002034 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e036      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004084:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0ee      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004090:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4917      	ldr	r1, [pc, #92]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d105      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a8:	4b14      	ldr	r3, [pc, #80]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	4a13      	ldr	r2, [pc, #76]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040c0:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	490b      	ldr	r1, [pc, #44]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040de:	4b07      	ldr	r3, [pc, #28]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	4904      	ldr	r1, [pc, #16]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000
 8004100:	40007000 	.word	0x40007000
 8004104:	42420440 	.word	0x42420440

08004108 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004108:	b590      	push	{r4, r7, lr}
 800410a:	b08d      	sub	sp, #52	; 0x34
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004110:	4b5a      	ldr	r3, [pc, #360]	; (800427c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004112:	f107 040c 	add.w	r4, r7, #12
 8004116:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800411c:	f240 2301 	movw	r3, #513	; 0x201
 8004120:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
 8004126:	2300      	movs	r3, #0
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800412a:	2300      	movs	r3, #0
 800412c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	2300      	movs	r3, #0
 8004134:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b10      	cmp	r3, #16
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b10      	cmp	r3, #16
 8004140:	f200 8091 	bhi.w	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d04c      	beq.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d07c      	beq.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004150:	e089      	b.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8004152:	4b4b      	ldr	r3, [pc, #300]	; (8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004158:	4b49      	ldr	r3, [pc, #292]	; (8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8082 	beq.w	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	0c9b      	lsrs	r3, r3, #18
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004172:	4413      	add	r3, r2
 8004174:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004178:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d018      	beq.n	80041b6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004184:	4b3e      	ldr	r3, [pc, #248]	; (8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	0c5b      	lsrs	r3, r3, #17
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004192:	4413      	add	r3, r2
 8004194:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00d      	beq.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80041a4:	4a37      	ldr	r2, [pc, #220]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b4:	e004      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	4a33      	ldr	r2, [pc, #204]	; (8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
 80041be:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80041c0:	4b2f      	ldr	r3, [pc, #188]	; (8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041cc:	d102      	bne.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80041d2:	e04a      	b.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80041d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4a2c      	ldr	r2, [pc, #176]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80041e2:	e042      	b.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80041e4:	4b26      	ldr	r3, [pc, #152]	; (8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f4:	d108      	bne.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004204:	62bb      	str	r3, [r7, #40]	; 0x28
 8004206:	e01f      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004212:	d109      	bne.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8004220:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004224:	62bb      	str	r3, [r7, #40]	; 0x28
 8004226:	e00f      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004232:	d11c      	bne.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004234:	4b12      	ldr	r3, [pc, #72]	; (8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d016      	beq.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8004240:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004246:	e012      	b.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004248:	e011      	b.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800424a:	f7ff fe75 	bl	8003f38 <HAL_RCC_GetPCLK2Freq>
 800424e:	4602      	mov	r2, r0
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	0b9b      	lsrs	r3, r3, #14
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	3301      	adds	r3, #1
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004264:	e004      	b.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004266:	bf00      	nop
 8004268:	e002      	b.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800426a:	bf00      	nop
 800426c:	e000      	b.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800426e:	bf00      	nop
    }
  }
  return (frequency);
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004272:	4618      	mov	r0, r3
 8004274:	3734      	adds	r7, #52	; 0x34
 8004276:	46bd      	mov	sp, r7
 8004278:	bd90      	pop	{r4, r7, pc}
 800427a:	bf00      	nop
 800427c:	08006710 	.word	0x08006710
 8004280:	40021000 	.word	0x40021000
 8004284:	007a1200 	.word	0x007a1200
 8004288:	003d0900 	.word	0x003d0900
 800428c:	aaaaaaab 	.word	0xaaaaaaab

08004290 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e084      	b.n	80043b0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	7c5b      	ldrb	r3, [r3, #17]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fd fc1e 	bl	8001af8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f9c8 	bl	8004658 <HAL_RTC_WaitForSynchro>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d004      	beq.n	80042d8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2204      	movs	r2, #4
 80042d2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e06b      	b.n	80043b0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fa81 	bl	80047e0 <RTC_EnterInitMode>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d004      	beq.n	80042ee <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2204      	movs	r2, #4
 80042e8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e060      	b.n	80043b0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0207 	bic.w	r2, r2, #7
 80042fc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004306:	4b2c      	ldr	r3, [pc, #176]	; (80043b8 <HAL_RTC_Init+0x128>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	4a2b      	ldr	r2, [pc, #172]	; (80043b8 <HAL_RTC_Init+0x128>)
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004312:	4b29      	ldr	r3, [pc, #164]	; (80043b8 <HAL_RTC_Init+0x128>)
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	4926      	ldr	r1, [pc, #152]	; (80043b8 <HAL_RTC_Init+0x128>)
 8004320:	4313      	orrs	r3, r2
 8004322:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800432c:	d003      	beq.n	8004336 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e00e      	b.n	8004354 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004336:	2001      	movs	r0, #1
 8004338:	f7ff fee6 	bl	8004108 <HAL_RCCEx_GetPeriphCLKFreq>
 800433c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d104      	bne.n	800434e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2204      	movs	r2, #4
 8004348:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e030      	b.n	80043b0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3b01      	subs	r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f023 010f 	bic.w	r1, r3, #15
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	0c1a      	lsrs	r2, r3, #16
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	0c1b      	lsrs	r3, r3, #16
 8004372:	041b      	lsls	r3, r3, #16
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	b291      	uxth	r1, r2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	430b      	orrs	r3, r1
 800437e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fa55 	bl	8004830 <RTC_ExitInitMode>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d004      	beq.n	8004396 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2204      	movs	r2, #4
 8004390:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e00c      	b.n	80043b0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80043ae:	2300      	movs	r3, #0
  }
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40006c00 	.word	0x40006c00

080043bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043bc:	b590      	push	{r4, r7, lr}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_RTC_SetTime+0x20>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e080      	b.n	80044e2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	7c1b      	ldrb	r3, [r3, #16]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_RTC_SetTime+0x30>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e07a      	b.n	80044e2 <HAL_RTC_SetTime+0x126>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2202      	movs	r2, #2
 80043f6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d113      	bne.n	8004426 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004408:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	785b      	ldrb	r3, [r3, #1]
 8004410:	4619      	mov	r1, r3
 8004412:	460b      	mov	r3, r1
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	1a5b      	subs	r3, r3, r1
 8004418:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800441a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004420:	4413      	add	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	e01e      	b.n	8004464 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fa28 	bl	8004880 <RTC_Bcd2ToByte>
 8004430:	4603      	mov	r3, r0
 8004432:	461a      	mov	r2, r3
 8004434:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004438:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	785b      	ldrb	r3, [r3, #1]
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fa1d 	bl	8004880 <RTC_Bcd2ToByte>
 8004446:	4603      	mov	r3, r0
 8004448:	461a      	mov	r2, r3
 800444a:	4613      	mov	r3, r2
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	1a9b      	subs	r3, r3, r2
 8004450:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004452:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	789b      	ldrb	r3, [r3, #2]
 8004458:	4618      	mov	r0, r3
 800445a:	f000 fa11 	bl	8004880 <RTC_Bcd2ToByte>
 800445e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004460:	4423      	add	r3, r4
 8004462:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004464:	6979      	ldr	r1, [r7, #20]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f953 	bl	8004712 <RTC_WriteTimeCounter>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d007      	beq.n	8004482 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2204      	movs	r2, #4
 8004476:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e02f      	b.n	80044e2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0205 	bic.w	r2, r2, #5
 8004490:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f964 	bl	8004760 <RTC_ReadAlarmCounter>
 8004498:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a0:	d018      	beq.n	80044d4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d214      	bcs.n	80044d4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80044b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80044b4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80044b6:	6939      	ldr	r1, [r7, #16]
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f96a 	bl	8004792 <RTC_WriteAlarmCounter>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d007      	beq.n	80044d4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2204      	movs	r2, #4
 80044c8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e006      	b.n	80044e2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80044e0:	2300      	movs	r3, #0
  }
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd90      	pop	{r4, r7, pc}
	...

080044ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61fb      	str	r3, [r7, #28]
 80044fc:	2300      	movs	r3, #0
 80044fe:	61bb      	str	r3, [r7, #24]
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <HAL_RTC_SetDate+0x24>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e097      	b.n	8004644 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	7c1b      	ldrb	r3, [r3, #16]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_RTC_SetDate+0x34>
 800451c:	2302      	movs	r3, #2
 800451e:	e091      	b.n	8004644 <HAL_RTC_SetDate+0x158>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2202      	movs	r2, #2
 800452a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10c      	bne.n	800454c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	78da      	ldrb	r2, [r3, #3]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	785a      	ldrb	r2, [r3, #1]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	789a      	ldrb	r2, [r3, #2]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	739a      	strb	r2, [r3, #14]
 800454a:	e01a      	b.n	8004582 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	78db      	ldrb	r3, [r3, #3]
 8004550:	4618      	mov	r0, r3
 8004552:	f000 f995 	bl	8004880 <RTC_Bcd2ToByte>
 8004556:	4603      	mov	r3, r0
 8004558:	461a      	mov	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	785b      	ldrb	r3, [r3, #1]
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f98c 	bl	8004880 <RTC_Bcd2ToByte>
 8004568:	4603      	mov	r3, r0
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	789b      	ldrb	r3, [r3, #2]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 f983 	bl	8004880 <RTC_Bcd2ToByte>
 800457a:	4603      	mov	r3, r0
 800457c:	461a      	mov	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	7bdb      	ldrb	r3, [r3, #15]
 8004586:	4618      	mov	r0, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	7b59      	ldrb	r1, [r3, #13]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	7b9b      	ldrb	r3, [r3, #14]
 8004590:	461a      	mov	r2, r3
 8004592:	f000 f993 	bl	80048bc <RTC_WeekDayNum>
 8004596:	4603      	mov	r3, r0
 8004598:	461a      	mov	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	7b1a      	ldrb	r2, [r3, #12]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f883 	bl	80046b2 <RTC_ReadTimeCounter>
 80045ac:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	4a26      	ldr	r2, [pc, #152]	; (800464c <HAL_RTC_SetDate+0x160>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	0adb      	lsrs	r3, r3, #11
 80045b8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b18      	cmp	r3, #24
 80045be:	d93a      	bls.n	8004636 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4a23      	ldr	r2, [pc, #140]	; (8004650 <HAL_RTC_SetDate+0x164>)
 80045c4:	fba2 2303 	umull	r2, r3, r2, r3
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	4a22      	ldr	r2, [pc, #136]	; (8004654 <HAL_RTC_SetDate+0x168>)
 80045cc:	fb02 f303 	mul.w	r3, r2, r3
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80045d6:	69f9      	ldr	r1, [r7, #28]
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f89a 	bl	8004712 <RTC_WriteTimeCounter>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2204      	movs	r2, #4
 80045e8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e027      	b.n	8004644 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f8b3 	bl	8004760 <RTC_ReadAlarmCounter>
 80045fa:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004602:	d018      	beq.n	8004636 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	429a      	cmp	r2, r3
 800460a:	d214      	bcs.n	8004636 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004612:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004616:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004618:	69b9      	ldr	r1, [r7, #24]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f8b9 	bl	8004792 <RTC_WriteAlarmCounter>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2204      	movs	r2, #4
 800462a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e006      	b.n	8004644 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3720      	adds	r7, #32
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	91a2b3c5 	.word	0x91a2b3c5
 8004650:	aaaaaaab 	.word	0xaaaaaaab
 8004654:	00015180 	.word	0x00015180

08004658 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e01d      	b.n	80046aa <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0208 	bic.w	r2, r2, #8
 800467c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800467e:	f7fd fcd9 	bl	8002034 <HAL_GetTick>
 8004682:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004684:	e009      	b.n	800469a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004686:	f7fd fcd5 	bl	8002034 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004694:	d901      	bls.n	800469a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e007      	b.n	80046aa <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0ee      	beq.n	8004686 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b087      	sub	sp, #28
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	827b      	strh	r3, [r7, #18]
 80046be:	2300      	movs	r3, #0
 80046c0:	823b      	strh	r3, [r7, #16]
 80046c2:	2300      	movs	r3, #0
 80046c4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80046e2:	8a7a      	ldrh	r2, [r7, #18]
 80046e4:	8a3b      	ldrh	r3, [r7, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d008      	beq.n	80046fc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80046ea:	8a3b      	ldrh	r3, [r7, #16]
 80046ec:	041a      	lsls	r2, r3, #16
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	e004      	b.n	8004706 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80046fc:	8a7b      	ldrh	r3, [r7, #18]
 80046fe:	041a      	lsls	r2, r3, #16
 8004700:	89fb      	ldrh	r3, [r7, #14]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004706:	697b      	ldr	r3, [r7, #20]
}
 8004708:	4618      	mov	r0, r3
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr

08004712 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f85d 	bl	80047e0 <RTC_EnterInitMode>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
 8004730:	e011      	b.n	8004756 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	0c12      	lsrs	r2, r2, #16
 800473a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	b292      	uxth	r2, r2
 8004744:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f872 	bl	8004830 <RTC_ExitInitMode>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004756:	7bfb      	ldrb	r3, [r7, #15]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	81fb      	strh	r3, [r7, #14]
 800476c:	2300      	movs	r3, #0
 800476e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004780:	89fb      	ldrh	r3, [r7, #14]
 8004782:	041a      	lsls	r2, r3, #16
 8004784:	89bb      	ldrh	r3, [r7, #12]
 8004786:	4313      	orrs	r3, r2
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr

08004792 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f81d 	bl	80047e0 <RTC_EnterInitMode>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	73fb      	strb	r3, [r7, #15]
 80047b0:	e011      	b.n	80047d6 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	0c12      	lsrs	r2, r2, #16
 80047ba:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	b292      	uxth	r2, r2
 80047c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f832 	bl	8004830 <RTC_ExitInitMode>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80047ec:	f7fd fc22 	bl	8002034 <HAL_GetTick>
 80047f0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80047f2:	e009      	b.n	8004808 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80047f4:	f7fd fc1e 	bl	8002034 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004802:	d901      	bls.n	8004808 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e00f      	b.n	8004828 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0ee      	beq.n	80047f4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0210 	orr.w	r2, r2, #16
 8004824:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0210 	bic.w	r2, r2, #16
 800484a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800484c:	f7fd fbf2 	bl	8002034 <HAL_GetTick>
 8004850:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004852:	e009      	b.n	8004868 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004854:	f7fd fbee 	bl	8002034 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004862:	d901      	bls.n	8004868 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e007      	b.n	8004878 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0ee      	beq.n	8004854 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800488e:	79fb      	ldrb	r3, [r7, #7]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	4413      	add	r3, r2
 80048ae:	b2db      	uxtb	r3, r3
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr
	...

080048bc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	70fb      	strb	r3, [r7, #3]
 80048c8:	4613      	mov	r3, r2
 80048ca:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80048da:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d82d      	bhi.n	800493e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	4613      	mov	r3, r2
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	4413      	add	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	4a2c      	ldr	r2, [pc, #176]	; (80049a0 <RTC_WeekDayNum+0xe4>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	085a      	lsrs	r2, r3, #1
 80048f6:	78bb      	ldrb	r3, [r7, #2]
 80048f8:	441a      	add	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	441a      	add	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	3b01      	subs	r3, #1
 8004902:	089b      	lsrs	r3, r3, #2
 8004904:	441a      	add	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	3b01      	subs	r3, #1
 800490a:	4926      	ldr	r1, [pc, #152]	; (80049a4 <RTC_WeekDayNum+0xe8>)
 800490c:	fba1 1303 	umull	r1, r3, r1, r3
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	1ad2      	subs	r2, r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	3b01      	subs	r3, #1
 8004918:	4922      	ldr	r1, [pc, #136]	; (80049a4 <RTC_WeekDayNum+0xe8>)
 800491a:	fba1 1303 	umull	r1, r3, r1, r3
 800491e:	09db      	lsrs	r3, r3, #7
 8004920:	4413      	add	r3, r2
 8004922:	1d1a      	adds	r2, r3, #4
 8004924:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <RTC_WeekDayNum+0xec>)
 8004926:	fba3 1302 	umull	r1, r3, r3, r2
 800492a:	1ad1      	subs	r1, r2, r3
 800492c:	0849      	lsrs	r1, r1, #1
 800492e:	440b      	add	r3, r1
 8004930:	0899      	lsrs	r1, r3, #2
 8004932:	460b      	mov	r3, r1
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	1a5b      	subs	r3, r3, r1
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	e029      	b.n	8004992 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	4613      	mov	r3, r2
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	4413      	add	r3, r2
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <RTC_WeekDayNum+0xe4>)
 800494c:	fba2 2303 	umull	r2, r3, r2, r3
 8004950:	085a      	lsrs	r2, r3, #1
 8004952:	78bb      	ldrb	r3, [r7, #2]
 8004954:	441a      	add	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	441a      	add	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	089b      	lsrs	r3, r3, #2
 800495e:	441a      	add	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4910      	ldr	r1, [pc, #64]	; (80049a4 <RTC_WeekDayNum+0xe8>)
 8004964:	fba1 1303 	umull	r1, r3, r1, r3
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	1ad2      	subs	r2, r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	490d      	ldr	r1, [pc, #52]	; (80049a4 <RTC_WeekDayNum+0xe8>)
 8004970:	fba1 1303 	umull	r1, r3, r1, r3
 8004974:	09db      	lsrs	r3, r3, #7
 8004976:	4413      	add	r3, r2
 8004978:	1c9a      	adds	r2, r3, #2
 800497a:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <RTC_WeekDayNum+0xec>)
 800497c:	fba3 1302 	umull	r1, r3, r3, r2
 8004980:	1ad1      	subs	r1, r2, r3
 8004982:	0849      	lsrs	r1, r1, #1
 8004984:	440b      	add	r3, r1
 8004986:	0899      	lsrs	r1, r3, #2
 8004988:	460b      	mov	r3, r1
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	1a5b      	subs	r3, r3, r1
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	b2db      	uxtb	r3, r3
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr
 80049a0:	38e38e39 	.word	0x38e38e39
 80049a4:	51eb851f 	.word	0x51eb851f
 80049a8:	24924925 	.word	0x24924925

080049ac <HAL_RTCEx_SetSecond_IT>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSecond_IT(RTC_HandleTypeDef *hrtc)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Check input parameters */
  if (hrtc == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_RTCEx_SetSecond_IT+0x12>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e01a      	b.n	80049f4 <HAL_RTCEx_SetSecond_IT+0x48>
  }

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	7c1b      	ldrb	r3, [r3, #16]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_RTCEx_SetSecond_IT+0x1e>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e014      	b.n	80049f4 <HAL_RTCEx_SetSecond_IT+0x48>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	745a      	strb	r2, [r3, #17]

  /* Enable Second interuption */
  __HAL_RTC_SECOND_ENABLE_IT(hrtc, RTC_IT_SEC);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0201 	orr.w	r2, r2, #1
 80049e4:	601a      	str	r2, [r3, #0]

  hrtc->State = HAL_RTC_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr

080049fe <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d024      	beq.n	8004a5e <HAL_RTCEx_RTCIRQHandler+0x60>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01d      	beq.n	8004a5e <HAL_RTCEx_RTCIRQHandler+0x60>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00b      	beq.n	8004a48 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f818 	bl	8004a66 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f06f 0204 	mvn.w	r2, #4
 8004a3e:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2204      	movs	r2, #4
 8004a44:	745a      	strb	r2, [r3, #17]
 8004a46:	e005      	b.n	8004a54 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7fc f915 	bl	8000c78 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0201 	mvn.w	r2, #1
 8004a5c:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004a5e:	bf00      	nop
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e01d      	b.n	8004ac6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fd f856 	bl	8001b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	f000 fa46 	bl	8004f48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0201 	orr.w	r2, r2, #1
 8004ae4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b06      	cmp	r3, #6
 8004af6:	d007      	beq.n	8004b08 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0201 	bic.w	r2, r2, #1
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6a1a      	ldr	r2, [r3, #32]
 8004b32:	f241 1311 	movw	r3, #4369	; 0x1111
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10f      	bne.n	8004b5c <HAL_TIM_Base_Stop_IT+0x48>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6a1a      	ldr	r2, [r3, #32]
 8004b42:	f240 4344 	movw	r3, #1092	; 0x444
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d107      	bne.n	8004b5c <HAL_TIM_Base_Stop_IT+0x48>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr

08004b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d122      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d11b      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0202 	mvn.w	r2, #2
 8004b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f9b1 	bl	8004f12 <HAL_TIM_IC_CaptureCallback>
 8004bb0:	e005      	b.n	8004bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f9a4 	bl	8004f00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f9b3 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d122      	bne.n	8004c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d11b      	bne.n	8004c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0204 	mvn.w	r2, #4
 8004be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f987 	bl	8004f12 <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f97a 	bl	8004f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f989 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d122      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d11b      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0208 	mvn.w	r2, #8
 8004c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2204      	movs	r2, #4
 8004c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f95d 	bl	8004f12 <HAL_TIM_IC_CaptureCallback>
 8004c58:	e005      	b.n	8004c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f950 	bl	8004f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f95f 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d122      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	d11b      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0210 	mvn.w	r2, #16
 8004c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2208      	movs	r2, #8
 8004c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f933 	bl	8004f12 <HAL_TIM_IC_CaptureCallback>
 8004cac:	e005      	b.n	8004cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f926 	bl	8004f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f935 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d10e      	bne.n	8004cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d107      	bne.n	8004cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0201 	mvn.w	r2, #1
 8004ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fc fa26 	bl	8001138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b80      	cmp	r3, #128	; 0x80
 8004cf8:	d10e      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d107      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fa5d 	bl	80051d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d10e      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d107      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f8f9 	bl	8004f36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	d10e      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d107      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0220 	mvn.w	r2, #32
 8004d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fa28 	bl	80051c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIM_ConfigClockSource+0x18>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e0b3      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x180>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc8:	d03e      	beq.n	8004e48 <HAL_TIM_ConfigClockSource+0xd0>
 8004dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dce:	f200 8087 	bhi.w	8004ee0 <HAL_TIM_ConfigClockSource+0x168>
 8004dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd6:	f000 8085 	beq.w	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dde:	d87f      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x168>
 8004de0:	2b70      	cmp	r3, #112	; 0x70
 8004de2:	d01a      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0xa2>
 8004de4:	2b70      	cmp	r3, #112	; 0x70
 8004de6:	d87b      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x168>
 8004de8:	2b60      	cmp	r3, #96	; 0x60
 8004dea:	d050      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0x116>
 8004dec:	2b60      	cmp	r3, #96	; 0x60
 8004dee:	d877      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x168>
 8004df0:	2b50      	cmp	r3, #80	; 0x50
 8004df2:	d03c      	beq.n	8004e6e <HAL_TIM_ConfigClockSource+0xf6>
 8004df4:	2b50      	cmp	r3, #80	; 0x50
 8004df6:	d873      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x168>
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	d058      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0x136>
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d86f      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x168>
 8004e00:	2b30      	cmp	r3, #48	; 0x30
 8004e02:	d064      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x156>
 8004e04:	2b30      	cmp	r3, #48	; 0x30
 8004e06:	d86b      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x168>
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d060      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x156>
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d867      	bhi.n	8004ee0 <HAL_TIM_ConfigClockSource+0x168>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d05c      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x156>
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d05a      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004e18:	e062      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6818      	ldr	r0, [r3, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6899      	ldr	r1, [r3, #8]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f000 f966 	bl	80050fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	609a      	str	r2, [r3, #8]
      break;
 8004e46:	e04e      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	6899      	ldr	r1, [r3, #8]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f000 f94f 	bl	80050fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e6a:	609a      	str	r2, [r3, #8]
      break;
 8004e6c:	e03b      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6859      	ldr	r1, [r3, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f000 f8c6 	bl	800500c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2150      	movs	r1, #80	; 0x50
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f91d 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004e8c:	e02b      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6859      	ldr	r1, [r3, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f000 f8e4 	bl	8005068 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2160      	movs	r1, #96	; 0x60
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 f90d 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004eac:	e01b      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6859      	ldr	r1, [r3, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f000 f8a6 	bl	800500c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2140      	movs	r1, #64	; 0x40
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 f8fd 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004ecc:	e00b      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4610      	mov	r0, r2
 8004eda:	f000 f8f4 	bl	80050c6 <TIM_ITRx_SetConfig>
      break;
 8004ede:	e002      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ee0:	bf00      	nop
 8004ee2:	e000      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ee4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr

08004f12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a29      	ldr	r2, [pc, #164]	; (8005000 <TIM_Base_SetConfig+0xb8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00b      	beq.n	8004f78 <TIM_Base_SetConfig+0x30>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f66:	d007      	beq.n	8004f78 <TIM_Base_SetConfig+0x30>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a26      	ldr	r2, [pc, #152]	; (8005004 <TIM_Base_SetConfig+0xbc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d003      	beq.n	8004f78 <TIM_Base_SetConfig+0x30>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a25      	ldr	r2, [pc, #148]	; (8005008 <TIM_Base_SetConfig+0xc0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d108      	bne.n	8004f8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a1c      	ldr	r2, [pc, #112]	; (8005000 <TIM_Base_SetConfig+0xb8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00b      	beq.n	8004faa <TIM_Base_SetConfig+0x62>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f98:	d007      	beq.n	8004faa <TIM_Base_SetConfig+0x62>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a19      	ldr	r2, [pc, #100]	; (8005004 <TIM_Base_SetConfig+0xbc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d003      	beq.n	8004faa <TIM_Base_SetConfig+0x62>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a18      	ldr	r2, [pc, #96]	; (8005008 <TIM_Base_SetConfig+0xc0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d108      	bne.n	8004fbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a07      	ldr	r2, [pc, #28]	; (8005000 <TIM_Base_SetConfig+0xb8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d103      	bne.n	8004ff0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	615a      	str	r2, [r3, #20]
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr
 8005000:	40012c00 	.word	0x40012c00
 8005004:	40000400 	.word	0x40000400
 8005008:	40000800 	.word	0x40000800

0800500c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	f023 0201 	bic.w	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f023 030a 	bic.w	r3, r3, #10
 8005048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	621a      	str	r2, [r3, #32]
}
 800505e:	bf00      	nop
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	f023 0210 	bic.w	r2, r3, #16
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005092:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	031b      	lsls	r3, r3, #12
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	621a      	str	r2, [r3, #32]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr

080050c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f043 0307 	orr.w	r3, r3, #7
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	609a      	str	r2, [r3, #8]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	4770      	bx	lr

080050fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b087      	sub	sp, #28
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005114:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	021a      	lsls	r2, r3, #8
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	431a      	orrs	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4313      	orrs	r3, r2
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	609a      	str	r2, [r3, #8]
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	bc80      	pop	{r7}
 8005136:	4770      	bx	lr

08005138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800514c:	2302      	movs	r3, #2
 800514e:	e032      	b.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005188:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	4313      	orrs	r3, r2
 8005192:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr

080051c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr

080051d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr

080051e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e03f      	b.n	8005276 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fc fd20 	bl	8001c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2224      	movs	r2, #36	; 0x24
 8005214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fc83 	bl	8005b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800523c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695a      	ldr	r2, [r3, #20]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800524c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800525c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e047      	b.n	8005320 <HAL_HalfDuplex_Init+0xa2>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7fc fcd3 	bl	8001c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2224      	movs	r2, #36	; 0x24
 80052ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fc36 	bl	8005b34 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691a      	ldr	r2, [r3, #16]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695a      	ldr	r2, [r3, #20]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80052e6:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0208 	orr.w	r2, r2, #8
 80052f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005306:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	4613      	mov	r3, r2
 8005336:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b20      	cmp	r3, #32
 8005346:	f040 8083 	bne.w	8005450 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <HAL_UART_Transmit+0x2e>
 8005350:	88fb      	ldrh	r3, [r7, #6]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e07b      	b.n	8005452 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_UART_Transmit+0x40>
 8005364:	2302      	movs	r3, #2
 8005366:	e074      	b.n	8005452 <HAL_UART_Transmit+0x12a>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2221      	movs	r2, #33	; 0x21
 800537a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800537e:	f7fc fe59 	bl	8002034 <HAL_GetTick>
 8005382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	88fa      	ldrh	r2, [r7, #6]
 8005388:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	88fa      	ldrh	r2, [r7, #6]
 800538e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005390:	e042      	b.n	8005418 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a8:	d122      	bne.n	80053f0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2200      	movs	r2, #0
 80053b2:	2180      	movs	r1, #128	; 0x80
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 fa54 	bl	8005862 <UART_WaitOnFlagUntilTimeout>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e046      	b.n	8005452 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053d6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d103      	bne.n	80053e8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	3302      	adds	r3, #2
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	e017      	b.n	8005418 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	3301      	adds	r3, #1
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	e013      	b.n	8005418 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2200      	movs	r2, #0
 80053f8:	2180      	movs	r1, #128	; 0x80
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 fa31 	bl	8005862 <UART_WaitOnFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e023      	b.n	8005452 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	60ba      	str	r2, [r7, #8]
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1b7      	bne.n	8005392 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2200      	movs	r2, #0
 800542a:	2140      	movs	r1, #64	; 0x40
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 fa18 	bl	8005862 <UART_WaitOnFlagUntilTimeout>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e00a      	b.n	8005452 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	e000      	b.n	8005452 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005450:	2302      	movs	r3, #2
  }
}
 8005452:	4618      	mov	r0, r3
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800545a:	b480      	push	{r7}
 800545c:	b085      	sub	sp, #20
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	4613      	mov	r3, r2
 8005466:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b20      	cmp	r3, #32
 8005472:	d130      	bne.n	80054d6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <HAL_UART_Transmit_IT+0x26>
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e029      	b.n	80054d8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_UART_Transmit_IT+0x38>
 800548e:	2302      	movs	r3, #2
 8005490:	e022      	b.n	80054d8 <HAL_UART_Transmit_IT+0x7e>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	88fa      	ldrh	r2, [r7, #6]
 80054a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	88fa      	ldrh	r2, [r7, #6]
 80054aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2221      	movs	r2, #33	; 0x21
 80054b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	e000      	b.n	80054d8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80054d6:	2302      	movs	r3, #2
  }
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc80      	pop	{r7}
 80054e0:	4770      	bx	lr

080054e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	4613      	mov	r3, r2
 80054ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d140      	bne.n	800557e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <HAL_UART_Receive_IT+0x26>
 8005502:	88fb      	ldrh	r3, [r7, #6]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e039      	b.n	8005580 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_UART_Receive_IT+0x38>
 8005516:	2302      	movs	r3, #2
 8005518:	e032      	b.n	8005580 <HAL_UART_Receive_IT+0x9e>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	88fa      	ldrh	r2, [r7, #6]
 8005532:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2222      	movs	r2, #34	; 0x22
 800553e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005558:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695a      	ldr	r2, [r3, #20]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0201 	orr.w	r2, r2, #1
 8005568:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0220 	orr.w	r2, r2, #32
 8005578:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	e000      	b.n	8005580 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800557e:	2302      	movs	r3, #2
  }
}
 8005580:	4618      	mov	r0, r3
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr
	...

0800558c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10d      	bne.n	80055de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d008      	beq.n	80055de <HAL_UART_IRQHandler+0x52>
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa2b 	bl	8005a32 <UART_Receive_IT>
      return;
 80055dc:	e0cb      	b.n	8005776 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 80ab 	beq.w	800573c <HAL_UART_IRQHandler+0x1b0>
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d105      	bne.n	80055fc <HAL_UART_IRQHandler+0x70>
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 80a0 	beq.w	800573c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_UART_IRQHandler+0x90>
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005614:	f043 0201 	orr.w	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <HAL_UART_IRQHandler+0xb0>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005634:	f043 0202 	orr.w	r2, r3, #2
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <HAL_UART_IRQHandler+0xd0>
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005654:	f043 0204 	orr.w	r2, r3, #4
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <HAL_UART_IRQHandler+0xf0>
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005674:	f043 0208 	orr.w	r2, r3, #8
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d077      	beq.n	8005774 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <HAL_UART_IRQHandler+0x112>
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f9ca 	bl	8005a32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bf14      	ite	ne
 80056ac:	2301      	movne	r3, #1
 80056ae:	2300      	moveq	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d102      	bne.n	80056c6 <HAL_UART_IRQHandler+0x13a>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d031      	beq.n	800572a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f915 	bl	80058f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d023      	beq.n	8005722 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	695a      	ldr	r2, [r3, #20]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d013      	beq.n	800571a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f6:	4a21      	ldr	r2, [pc, #132]	; (800577c <HAL_UART_IRQHandler+0x1f0>)
 80056f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd fb64 	bl	8002dcc <HAL_DMA_Abort_IT>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d016      	beq.n	8005738 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005718:	e00e      	b.n	8005738 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fb fbe0 	bl	8000ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005720:	e00a      	b.n	8005738 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fb fbdc 	bl	8000ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	e006      	b.n	8005738 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fb fbd8 	bl	8000ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005736:	e01d      	b.n	8005774 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	bf00      	nop
    return;
 800573a:	e01b      	b.n	8005774 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b00      	cmp	r3, #0
 8005744:	d008      	beq.n	8005758 <HAL_UART_IRQHandler+0x1cc>
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f901 	bl	8005958 <UART_Transmit_IT>
    return;
 8005756:	e00e      	b.n	8005776 <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <HAL_UART_IRQHandler+0x1ea>
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f948 	bl	8005a02 <UART_EndTransmit_IT>
    return;
 8005772:	e000      	b.n	8005776 <HAL_UART_IRQHandler+0x1ea>
    return;
 8005774:	bf00      	nop
  }
}
 8005776:	3720      	adds	r7, #32
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	08005931 	.word	0x08005931

08005780 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005788:	2300      	movs	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8005796:	2302      	movs	r3, #2
 8005798:	e020      	b.n	80057dc <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2224      	movs	r2, #36	; 0x24
 80057a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f023 030c 	bic.w	r3, r3, #12
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f043 0308 	orr.w	r3, r3, #8
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr

080057e6 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_HalfDuplex_EnableReceiver+0x1a>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e020      	b.n	8005842 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  huart->gState = HAL_UART_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2224      	movs	r2, #36	; 0x24
 800580c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 030c 	bic.w	r3, r3, #12
 800581e:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f043 0304 	orr.w	r3, r3, #4
 8005826:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr

08005862 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b084      	sub	sp, #16
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	603b      	str	r3, [r7, #0]
 800586e:	4613      	mov	r3, r2
 8005870:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005872:	e02c      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800587a:	d028      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0x30>
 8005882:	f7fc fbd7 	bl	8002034 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	429a      	cmp	r2, r3
 8005890:	d21d      	bcs.n	80058ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695a      	ldr	r2, [r3, #20]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0201 	bic.w	r2, r2, #1
 80058b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e00f      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4013      	ands	r3, r2
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	429a      	cmp	r2, r3
 80058dc:	bf0c      	ite	eq
 80058de:	2301      	moveq	r3, #1
 80058e0:	2300      	movne	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d0c3      	beq.n	8005874 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800590c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695a      	ldr	r2, [r3, #20]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0201 	bic.w	r2, r2, #1
 800591c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr

08005930 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f7fb fac8 	bl	8000ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005950:	bf00      	nop
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b21      	cmp	r3, #33	; 0x21
 800596a:	d144      	bne.n	80059f6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005974:	d11a      	bne.n	80059ac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	461a      	mov	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800598a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d105      	bne.n	80059a0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	1c9a      	adds	r2, r3, #2
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	621a      	str	r2, [r3, #32]
 800599e:	e00e      	b.n	80059be <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	621a      	str	r2, [r3, #32]
 80059aa:	e008      	b.n	80059be <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	1c59      	adds	r1, r3, #1
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6211      	str	r1, [r2, #32]
 80059b6:	781a      	ldrb	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	4619      	mov	r1, r3
 80059cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10f      	bne.n	80059f2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e000      	b.n	80059f8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80059f6:	2302      	movs	r3, #2
  }
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr

08005a02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fb fa0c 	bl	8000e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b22      	cmp	r3, #34	; 0x22
 8005a44:	d171      	bne.n	8005b2a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4e:	d123      	bne.n	8005a98 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a54:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10e      	bne.n	8005a7c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a74:	1c9a      	adds	r2, r3, #2
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	629a      	str	r2, [r3, #40]	; 0x28
 8005a7a:	e029      	b.n	8005ad0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	629a      	str	r2, [r3, #40]	; 0x28
 8005a96:	e01b      	b.n	8005ad0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10a      	bne.n	8005ab6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6858      	ldr	r0, [r3, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aaa:	1c59      	adds	r1, r3, #1
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6291      	str	r1, [r2, #40]	; 0x28
 8005ab0:	b2c2      	uxtb	r2, r0
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	e00c      	b.n	8005ad0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac2:	1c58      	adds	r0, r3, #1
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	6288      	str	r0, [r1, #40]	; 0x28
 8005ac8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4619      	mov	r1, r3
 8005ade:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d120      	bne.n	8005b26 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0220 	bic.w	r2, r2, #32
 8005af2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695a      	ldr	r2, [r3, #20]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0201 	bic.w	r2, r2, #1
 8005b12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7fb f99f 	bl	8000e60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e002      	b.n	8005b2c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	e000      	b.n	8005b2c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005b2a:	2302      	movs	r3, #2
  }
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b6e:	f023 030c 	bic.w	r3, r3, #12
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a52      	ldr	r2, [pc, #328]	; (8005ce0 <UART_SetConfig+0x1ac>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d14e      	bne.n	8005c3a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b9c:	f7fe f9cc 	bl	8003f38 <HAL_RCC_GetPCLK2Freq>
 8005ba0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009a      	lsls	r2, r3, #2
 8005bac:	441a      	add	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb8:	4a4a      	ldr	r2, [pc, #296]	; (8005ce4 <UART_SetConfig+0x1b0>)
 8005bba:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	0119      	lsls	r1, r3, #4
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	009a      	lsls	r2, r3, #2
 8005bcc:	441a      	add	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bd8:	4b42      	ldr	r3, [pc, #264]	; (8005ce4 <UART_SetConfig+0x1b0>)
 8005bda:	fba3 0302 	umull	r0, r3, r3, r2
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	2064      	movs	r0, #100	; 0x64
 8005be2:	fb00 f303 	mul.w	r3, r0, r3
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	3332      	adds	r3, #50	; 0x32
 8005bec:	4a3d      	ldr	r2, [pc, #244]	; (8005ce4 <UART_SetConfig+0x1b0>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bf8:	4419      	add	r1, r3
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	009a      	lsls	r2, r3, #2
 8005c04:	441a      	add	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c10:	4b34      	ldr	r3, [pc, #208]	; (8005ce4 <UART_SetConfig+0x1b0>)
 8005c12:	fba3 0302 	umull	r0, r3, r3, r2
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	2064      	movs	r0, #100	; 0x64
 8005c1a:	fb00 f303 	mul.w	r3, r0, r3
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	3332      	adds	r3, #50	; 0x32
 8005c24:	4a2f      	ldr	r2, [pc, #188]	; (8005ce4 <UART_SetConfig+0x1b0>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	f003 020f 	and.w	r2, r3, #15
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	440a      	add	r2, r1
 8005c36:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005c38:	e04d      	b.n	8005cd6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c3a:	f7fe f969 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 8005c3e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009a      	lsls	r2, r3, #2
 8005c4a:	441a      	add	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c56:	4a23      	ldr	r2, [pc, #140]	; (8005ce4 <UART_SetConfig+0x1b0>)
 8005c58:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	0119      	lsls	r1, r3, #4
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	4613      	mov	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	009a      	lsls	r2, r3, #2
 8005c6a:	441a      	add	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c76:	4b1b      	ldr	r3, [pc, #108]	; (8005ce4 <UART_SetConfig+0x1b0>)
 8005c78:	fba3 0302 	umull	r0, r3, r3, r2
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	2064      	movs	r0, #100	; 0x64
 8005c80:	fb00 f303 	mul.w	r3, r0, r3
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	3332      	adds	r3, #50	; 0x32
 8005c8a:	4a16      	ldr	r2, [pc, #88]	; (8005ce4 <UART_SetConfig+0x1b0>)
 8005c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c96:	4419      	add	r1, r3
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009a      	lsls	r2, r3, #2
 8005ca2:	441a      	add	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cae:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <UART_SetConfig+0x1b0>)
 8005cb0:	fba3 0302 	umull	r0, r3, r3, r2
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	2064      	movs	r0, #100	; 0x64
 8005cb8:	fb00 f303 	mul.w	r3, r0, r3
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	3332      	adds	r3, #50	; 0x32
 8005cc2:	4a08      	ldr	r2, [pc, #32]	; (8005ce4 <UART_SetConfig+0x1b0>)
 8005cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	f003 020f 	and.w	r2, r3, #15
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	440a      	add	r2, r1
 8005cd4:	609a      	str	r2, [r3, #8]
}
 8005cd6:	bf00      	nop
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40013800 	.word	0x40013800
 8005ce4:	51eb851f 	.word	0x51eb851f

08005ce8 <__errno>:
 8005ce8:	4b01      	ldr	r3, [pc, #4]	; (8005cf0 <__errno+0x8>)
 8005cea:	6818      	ldr	r0, [r3, #0]
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	2000000c 	.word	0x2000000c

08005cf4 <__libc_init_array>:
 8005cf4:	b570      	push	{r4, r5, r6, lr}
 8005cf6:	2600      	movs	r6, #0
 8005cf8:	4d0c      	ldr	r5, [pc, #48]	; (8005d2c <__libc_init_array+0x38>)
 8005cfa:	4c0d      	ldr	r4, [pc, #52]	; (8005d30 <__libc_init_array+0x3c>)
 8005cfc:	1b64      	subs	r4, r4, r5
 8005cfe:	10a4      	asrs	r4, r4, #2
 8005d00:	42a6      	cmp	r6, r4
 8005d02:	d109      	bne.n	8005d18 <__libc_init_array+0x24>
 8005d04:	f000 fc70 	bl	80065e8 <_init>
 8005d08:	2600      	movs	r6, #0
 8005d0a:	4d0a      	ldr	r5, [pc, #40]	; (8005d34 <__libc_init_array+0x40>)
 8005d0c:	4c0a      	ldr	r4, [pc, #40]	; (8005d38 <__libc_init_array+0x44>)
 8005d0e:	1b64      	subs	r4, r4, r5
 8005d10:	10a4      	asrs	r4, r4, #2
 8005d12:	42a6      	cmp	r6, r4
 8005d14:	d105      	bne.n	8005d22 <__libc_init_array+0x2e>
 8005d16:	bd70      	pop	{r4, r5, r6, pc}
 8005d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d1c:	4798      	blx	r3
 8005d1e:	3601      	adds	r6, #1
 8005d20:	e7ee      	b.n	8005d00 <__libc_init_array+0xc>
 8005d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d26:	4798      	blx	r3
 8005d28:	3601      	adds	r6, #1
 8005d2a:	e7f2      	b.n	8005d12 <__libc_init_array+0x1e>
 8005d2c:	080067dc 	.word	0x080067dc
 8005d30:	080067dc 	.word	0x080067dc
 8005d34:	080067dc 	.word	0x080067dc
 8005d38:	080067e0 	.word	0x080067e0

08005d3c <memset>:
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	4402      	add	r2, r0
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d100      	bne.n	8005d46 <memset+0xa>
 8005d44:	4770      	bx	lr
 8005d46:	f803 1b01 	strb.w	r1, [r3], #1
 8005d4a:	e7f9      	b.n	8005d40 <memset+0x4>

08005d4c <sniprintf>:
 8005d4c:	b40c      	push	{r2, r3}
 8005d4e:	b530      	push	{r4, r5, lr}
 8005d50:	4b17      	ldr	r3, [pc, #92]	; (8005db0 <sniprintf+0x64>)
 8005d52:	1e0c      	subs	r4, r1, #0
 8005d54:	681d      	ldr	r5, [r3, #0]
 8005d56:	b09d      	sub	sp, #116	; 0x74
 8005d58:	da08      	bge.n	8005d6c <sniprintf+0x20>
 8005d5a:	238b      	movs	r3, #139	; 0x8b
 8005d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d60:	602b      	str	r3, [r5, #0]
 8005d62:	b01d      	add	sp, #116	; 0x74
 8005d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d68:	b002      	add	sp, #8
 8005d6a:	4770      	bx	lr
 8005d6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005d70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005d74:	bf0c      	ite	eq
 8005d76:	4623      	moveq	r3, r4
 8005d78:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005d7c:	9304      	str	r3, [sp, #16]
 8005d7e:	9307      	str	r3, [sp, #28]
 8005d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d84:	9002      	str	r0, [sp, #8]
 8005d86:	9006      	str	r0, [sp, #24]
 8005d88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	ab21      	add	r3, sp, #132	; 0x84
 8005d90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d92:	a902      	add	r1, sp, #8
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	f000 f869 	bl	8005e6c <_svfiprintf_r>
 8005d9a:	1c43      	adds	r3, r0, #1
 8005d9c:	bfbc      	itt	lt
 8005d9e:	238b      	movlt	r3, #139	; 0x8b
 8005da0:	602b      	strlt	r3, [r5, #0]
 8005da2:	2c00      	cmp	r4, #0
 8005da4:	d0dd      	beq.n	8005d62 <sniprintf+0x16>
 8005da6:	2200      	movs	r2, #0
 8005da8:	9b02      	ldr	r3, [sp, #8]
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	e7d9      	b.n	8005d62 <sniprintf+0x16>
 8005dae:	bf00      	nop
 8005db0:	2000000c 	.word	0x2000000c

08005db4 <__ssputs_r>:
 8005db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db8:	688e      	ldr	r6, [r1, #8]
 8005dba:	4682      	mov	sl, r0
 8005dbc:	429e      	cmp	r6, r3
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	4690      	mov	r8, r2
 8005dc2:	461f      	mov	r7, r3
 8005dc4:	d838      	bhi.n	8005e38 <__ssputs_r+0x84>
 8005dc6:	898a      	ldrh	r2, [r1, #12]
 8005dc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005dcc:	d032      	beq.n	8005e34 <__ssputs_r+0x80>
 8005dce:	6825      	ldr	r5, [r4, #0]
 8005dd0:	6909      	ldr	r1, [r1, #16]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	eba5 0901 	sub.w	r9, r5, r1
 8005dd8:	6965      	ldr	r5, [r4, #20]
 8005dda:	444b      	add	r3, r9
 8005ddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005de0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005de4:	106d      	asrs	r5, r5, #1
 8005de6:	429d      	cmp	r5, r3
 8005de8:	bf38      	it	cc
 8005dea:	461d      	movcc	r5, r3
 8005dec:	0553      	lsls	r3, r2, #21
 8005dee:	d531      	bpl.n	8005e54 <__ssputs_r+0xa0>
 8005df0:	4629      	mov	r1, r5
 8005df2:	f000 fb53 	bl	800649c <_malloc_r>
 8005df6:	4606      	mov	r6, r0
 8005df8:	b950      	cbnz	r0, 8005e10 <__ssputs_r+0x5c>
 8005dfa:	230c      	movs	r3, #12
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e00:	f8ca 3000 	str.w	r3, [sl]
 8005e04:	89a3      	ldrh	r3, [r4, #12]
 8005e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e0a:	81a3      	strh	r3, [r4, #12]
 8005e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e10:	464a      	mov	r2, r9
 8005e12:	6921      	ldr	r1, [r4, #16]
 8005e14:	f000 face 	bl	80063b4 <memcpy>
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e22:	81a3      	strh	r3, [r4, #12]
 8005e24:	6126      	str	r6, [r4, #16]
 8005e26:	444e      	add	r6, r9
 8005e28:	6026      	str	r6, [r4, #0]
 8005e2a:	463e      	mov	r6, r7
 8005e2c:	6165      	str	r5, [r4, #20]
 8005e2e:	eba5 0509 	sub.w	r5, r5, r9
 8005e32:	60a5      	str	r5, [r4, #8]
 8005e34:	42be      	cmp	r6, r7
 8005e36:	d900      	bls.n	8005e3a <__ssputs_r+0x86>
 8005e38:	463e      	mov	r6, r7
 8005e3a:	4632      	mov	r2, r6
 8005e3c:	4641      	mov	r1, r8
 8005e3e:	6820      	ldr	r0, [r4, #0]
 8005e40:	f000 fac6 	bl	80063d0 <memmove>
 8005e44:	68a3      	ldr	r3, [r4, #8]
 8005e46:	6822      	ldr	r2, [r4, #0]
 8005e48:	1b9b      	subs	r3, r3, r6
 8005e4a:	4432      	add	r2, r6
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	60a3      	str	r3, [r4, #8]
 8005e50:	6022      	str	r2, [r4, #0]
 8005e52:	e7db      	b.n	8005e0c <__ssputs_r+0x58>
 8005e54:	462a      	mov	r2, r5
 8005e56:	f000 fb7b 	bl	8006550 <_realloc_r>
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d1e1      	bne.n	8005e24 <__ssputs_r+0x70>
 8005e60:	4650      	mov	r0, sl
 8005e62:	6921      	ldr	r1, [r4, #16]
 8005e64:	f000 face 	bl	8006404 <_free_r>
 8005e68:	e7c7      	b.n	8005dfa <__ssputs_r+0x46>
	...

08005e6c <_svfiprintf_r>:
 8005e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e70:	4698      	mov	r8, r3
 8005e72:	898b      	ldrh	r3, [r1, #12]
 8005e74:	4607      	mov	r7, r0
 8005e76:	061b      	lsls	r3, r3, #24
 8005e78:	460d      	mov	r5, r1
 8005e7a:	4614      	mov	r4, r2
 8005e7c:	b09d      	sub	sp, #116	; 0x74
 8005e7e:	d50e      	bpl.n	8005e9e <_svfiprintf_r+0x32>
 8005e80:	690b      	ldr	r3, [r1, #16]
 8005e82:	b963      	cbnz	r3, 8005e9e <_svfiprintf_r+0x32>
 8005e84:	2140      	movs	r1, #64	; 0x40
 8005e86:	f000 fb09 	bl	800649c <_malloc_r>
 8005e8a:	6028      	str	r0, [r5, #0]
 8005e8c:	6128      	str	r0, [r5, #16]
 8005e8e:	b920      	cbnz	r0, 8005e9a <_svfiprintf_r+0x2e>
 8005e90:	230c      	movs	r3, #12
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e98:	e0d1      	b.n	800603e <_svfiprintf_r+0x1d2>
 8005e9a:	2340      	movs	r3, #64	; 0x40
 8005e9c:	616b      	str	r3, [r5, #20]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ea2:	2320      	movs	r3, #32
 8005ea4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ea8:	2330      	movs	r3, #48	; 0x30
 8005eaa:	f04f 0901 	mov.w	r9, #1
 8005eae:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006058 <_svfiprintf_r+0x1ec>
 8005eb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eba:	4623      	mov	r3, r4
 8005ebc:	469a      	mov	sl, r3
 8005ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ec2:	b10a      	cbz	r2, 8005ec8 <_svfiprintf_r+0x5c>
 8005ec4:	2a25      	cmp	r2, #37	; 0x25
 8005ec6:	d1f9      	bne.n	8005ebc <_svfiprintf_r+0x50>
 8005ec8:	ebba 0b04 	subs.w	fp, sl, r4
 8005ecc:	d00b      	beq.n	8005ee6 <_svfiprintf_r+0x7a>
 8005ece:	465b      	mov	r3, fp
 8005ed0:	4622      	mov	r2, r4
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	f7ff ff6d 	bl	8005db4 <__ssputs_r>
 8005eda:	3001      	adds	r0, #1
 8005edc:	f000 80aa 	beq.w	8006034 <_svfiprintf_r+0x1c8>
 8005ee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ee2:	445a      	add	r2, fp
 8005ee4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 80a2 	beq.w	8006034 <_svfiprintf_r+0x1c8>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ef6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005efa:	f10a 0a01 	add.w	sl, sl, #1
 8005efe:	9304      	str	r3, [sp, #16]
 8005f00:	9307      	str	r3, [sp, #28]
 8005f02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f06:	931a      	str	r3, [sp, #104]	; 0x68
 8005f08:	4654      	mov	r4, sl
 8005f0a:	2205      	movs	r2, #5
 8005f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f10:	4851      	ldr	r0, [pc, #324]	; (8006058 <_svfiprintf_r+0x1ec>)
 8005f12:	f000 fa41 	bl	8006398 <memchr>
 8005f16:	9a04      	ldr	r2, [sp, #16]
 8005f18:	b9d8      	cbnz	r0, 8005f52 <_svfiprintf_r+0xe6>
 8005f1a:	06d0      	lsls	r0, r2, #27
 8005f1c:	bf44      	itt	mi
 8005f1e:	2320      	movmi	r3, #32
 8005f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f24:	0711      	lsls	r1, r2, #28
 8005f26:	bf44      	itt	mi
 8005f28:	232b      	movmi	r3, #43	; 0x2b
 8005f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f32:	2b2a      	cmp	r3, #42	; 0x2a
 8005f34:	d015      	beq.n	8005f62 <_svfiprintf_r+0xf6>
 8005f36:	4654      	mov	r4, sl
 8005f38:	2000      	movs	r0, #0
 8005f3a:	f04f 0c0a 	mov.w	ip, #10
 8005f3e:	9a07      	ldr	r2, [sp, #28]
 8005f40:	4621      	mov	r1, r4
 8005f42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f46:	3b30      	subs	r3, #48	; 0x30
 8005f48:	2b09      	cmp	r3, #9
 8005f4a:	d94e      	bls.n	8005fea <_svfiprintf_r+0x17e>
 8005f4c:	b1b0      	cbz	r0, 8005f7c <_svfiprintf_r+0x110>
 8005f4e:	9207      	str	r2, [sp, #28]
 8005f50:	e014      	b.n	8005f7c <_svfiprintf_r+0x110>
 8005f52:	eba0 0308 	sub.w	r3, r0, r8
 8005f56:	fa09 f303 	lsl.w	r3, r9, r3
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	46a2      	mov	sl, r4
 8005f5e:	9304      	str	r3, [sp, #16]
 8005f60:	e7d2      	b.n	8005f08 <_svfiprintf_r+0x9c>
 8005f62:	9b03      	ldr	r3, [sp, #12]
 8005f64:	1d19      	adds	r1, r3, #4
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	9103      	str	r1, [sp, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	bfbb      	ittet	lt
 8005f6e:	425b      	neglt	r3, r3
 8005f70:	f042 0202 	orrlt.w	r2, r2, #2
 8005f74:	9307      	strge	r3, [sp, #28]
 8005f76:	9307      	strlt	r3, [sp, #28]
 8005f78:	bfb8      	it	lt
 8005f7a:	9204      	strlt	r2, [sp, #16]
 8005f7c:	7823      	ldrb	r3, [r4, #0]
 8005f7e:	2b2e      	cmp	r3, #46	; 0x2e
 8005f80:	d10c      	bne.n	8005f9c <_svfiprintf_r+0x130>
 8005f82:	7863      	ldrb	r3, [r4, #1]
 8005f84:	2b2a      	cmp	r3, #42	; 0x2a
 8005f86:	d135      	bne.n	8005ff4 <_svfiprintf_r+0x188>
 8005f88:	9b03      	ldr	r3, [sp, #12]
 8005f8a:	3402      	adds	r4, #2
 8005f8c:	1d1a      	adds	r2, r3, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	9203      	str	r2, [sp, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	bfb8      	it	lt
 8005f96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f9a:	9305      	str	r3, [sp, #20]
 8005f9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006068 <_svfiprintf_r+0x1fc>
 8005fa0:	2203      	movs	r2, #3
 8005fa2:	4650      	mov	r0, sl
 8005fa4:	7821      	ldrb	r1, [r4, #0]
 8005fa6:	f000 f9f7 	bl	8006398 <memchr>
 8005faa:	b140      	cbz	r0, 8005fbe <_svfiprintf_r+0x152>
 8005fac:	2340      	movs	r3, #64	; 0x40
 8005fae:	eba0 000a 	sub.w	r0, r0, sl
 8005fb2:	fa03 f000 	lsl.w	r0, r3, r0
 8005fb6:	9b04      	ldr	r3, [sp, #16]
 8005fb8:	3401      	adds	r4, #1
 8005fba:	4303      	orrs	r3, r0
 8005fbc:	9304      	str	r3, [sp, #16]
 8005fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc2:	2206      	movs	r2, #6
 8005fc4:	4825      	ldr	r0, [pc, #148]	; (800605c <_svfiprintf_r+0x1f0>)
 8005fc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fca:	f000 f9e5 	bl	8006398 <memchr>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d038      	beq.n	8006044 <_svfiprintf_r+0x1d8>
 8005fd2:	4b23      	ldr	r3, [pc, #140]	; (8006060 <_svfiprintf_r+0x1f4>)
 8005fd4:	bb1b      	cbnz	r3, 800601e <_svfiprintf_r+0x1b2>
 8005fd6:	9b03      	ldr	r3, [sp, #12]
 8005fd8:	3307      	adds	r3, #7
 8005fda:	f023 0307 	bic.w	r3, r3, #7
 8005fde:	3308      	adds	r3, #8
 8005fe0:	9303      	str	r3, [sp, #12]
 8005fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe4:	4433      	add	r3, r6
 8005fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe8:	e767      	b.n	8005eba <_svfiprintf_r+0x4e>
 8005fea:	460c      	mov	r4, r1
 8005fec:	2001      	movs	r0, #1
 8005fee:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ff2:	e7a5      	b.n	8005f40 <_svfiprintf_r+0xd4>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f04f 0c0a 	mov.w	ip, #10
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	3401      	adds	r4, #1
 8005ffe:	9305      	str	r3, [sp, #20]
 8006000:	4620      	mov	r0, r4
 8006002:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006006:	3a30      	subs	r2, #48	; 0x30
 8006008:	2a09      	cmp	r2, #9
 800600a:	d903      	bls.n	8006014 <_svfiprintf_r+0x1a8>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0c5      	beq.n	8005f9c <_svfiprintf_r+0x130>
 8006010:	9105      	str	r1, [sp, #20]
 8006012:	e7c3      	b.n	8005f9c <_svfiprintf_r+0x130>
 8006014:	4604      	mov	r4, r0
 8006016:	2301      	movs	r3, #1
 8006018:	fb0c 2101 	mla	r1, ip, r1, r2
 800601c:	e7f0      	b.n	8006000 <_svfiprintf_r+0x194>
 800601e:	ab03      	add	r3, sp, #12
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	462a      	mov	r2, r5
 8006024:	4638      	mov	r0, r7
 8006026:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <_svfiprintf_r+0x1f8>)
 8006028:	a904      	add	r1, sp, #16
 800602a:	f3af 8000 	nop.w
 800602e:	1c42      	adds	r2, r0, #1
 8006030:	4606      	mov	r6, r0
 8006032:	d1d6      	bne.n	8005fe2 <_svfiprintf_r+0x176>
 8006034:	89ab      	ldrh	r3, [r5, #12]
 8006036:	065b      	lsls	r3, r3, #25
 8006038:	f53f af2c 	bmi.w	8005e94 <_svfiprintf_r+0x28>
 800603c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800603e:	b01d      	add	sp, #116	; 0x74
 8006040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006044:	ab03      	add	r3, sp, #12
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	462a      	mov	r2, r5
 800604a:	4638      	mov	r0, r7
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <_svfiprintf_r+0x1f8>)
 800604e:	a904      	add	r1, sp, #16
 8006050:	f000 f87c 	bl	800614c <_printf_i>
 8006054:	e7eb      	b.n	800602e <_svfiprintf_r+0x1c2>
 8006056:	bf00      	nop
 8006058:	080067a8 	.word	0x080067a8
 800605c:	080067b2 	.word	0x080067b2
 8006060:	00000000 	.word	0x00000000
 8006064:	08005db5 	.word	0x08005db5
 8006068:	080067ae 	.word	0x080067ae

0800606c <_printf_common>:
 800606c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006070:	4616      	mov	r6, r2
 8006072:	4699      	mov	r9, r3
 8006074:	688a      	ldr	r2, [r1, #8]
 8006076:	690b      	ldr	r3, [r1, #16]
 8006078:	4607      	mov	r7, r0
 800607a:	4293      	cmp	r3, r2
 800607c:	bfb8      	it	lt
 800607e:	4613      	movlt	r3, r2
 8006080:	6033      	str	r3, [r6, #0]
 8006082:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006086:	460c      	mov	r4, r1
 8006088:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800608c:	b10a      	cbz	r2, 8006092 <_printf_common+0x26>
 800608e:	3301      	adds	r3, #1
 8006090:	6033      	str	r3, [r6, #0]
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	0699      	lsls	r1, r3, #26
 8006096:	bf42      	ittt	mi
 8006098:	6833      	ldrmi	r3, [r6, #0]
 800609a:	3302      	addmi	r3, #2
 800609c:	6033      	strmi	r3, [r6, #0]
 800609e:	6825      	ldr	r5, [r4, #0]
 80060a0:	f015 0506 	ands.w	r5, r5, #6
 80060a4:	d106      	bne.n	80060b4 <_printf_common+0x48>
 80060a6:	f104 0a19 	add.w	sl, r4, #25
 80060aa:	68e3      	ldr	r3, [r4, #12]
 80060ac:	6832      	ldr	r2, [r6, #0]
 80060ae:	1a9b      	subs	r3, r3, r2
 80060b0:	42ab      	cmp	r3, r5
 80060b2:	dc28      	bgt.n	8006106 <_printf_common+0x9a>
 80060b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060b8:	1e13      	subs	r3, r2, #0
 80060ba:	6822      	ldr	r2, [r4, #0]
 80060bc:	bf18      	it	ne
 80060be:	2301      	movne	r3, #1
 80060c0:	0692      	lsls	r2, r2, #26
 80060c2:	d42d      	bmi.n	8006120 <_printf_common+0xb4>
 80060c4:	4649      	mov	r1, r9
 80060c6:	4638      	mov	r0, r7
 80060c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060cc:	47c0      	blx	r8
 80060ce:	3001      	adds	r0, #1
 80060d0:	d020      	beq.n	8006114 <_printf_common+0xa8>
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	68e5      	ldr	r5, [r4, #12]
 80060d6:	f003 0306 	and.w	r3, r3, #6
 80060da:	2b04      	cmp	r3, #4
 80060dc:	bf18      	it	ne
 80060de:	2500      	movne	r5, #0
 80060e0:	6832      	ldr	r2, [r6, #0]
 80060e2:	f04f 0600 	mov.w	r6, #0
 80060e6:	68a3      	ldr	r3, [r4, #8]
 80060e8:	bf08      	it	eq
 80060ea:	1aad      	subeq	r5, r5, r2
 80060ec:	6922      	ldr	r2, [r4, #16]
 80060ee:	bf08      	it	eq
 80060f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060f4:	4293      	cmp	r3, r2
 80060f6:	bfc4      	itt	gt
 80060f8:	1a9b      	subgt	r3, r3, r2
 80060fa:	18ed      	addgt	r5, r5, r3
 80060fc:	341a      	adds	r4, #26
 80060fe:	42b5      	cmp	r5, r6
 8006100:	d11a      	bne.n	8006138 <_printf_common+0xcc>
 8006102:	2000      	movs	r0, #0
 8006104:	e008      	b.n	8006118 <_printf_common+0xac>
 8006106:	2301      	movs	r3, #1
 8006108:	4652      	mov	r2, sl
 800610a:	4649      	mov	r1, r9
 800610c:	4638      	mov	r0, r7
 800610e:	47c0      	blx	r8
 8006110:	3001      	adds	r0, #1
 8006112:	d103      	bne.n	800611c <_printf_common+0xb0>
 8006114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800611c:	3501      	adds	r5, #1
 800611e:	e7c4      	b.n	80060aa <_printf_common+0x3e>
 8006120:	2030      	movs	r0, #48	; 0x30
 8006122:	18e1      	adds	r1, r4, r3
 8006124:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800612e:	4422      	add	r2, r4
 8006130:	3302      	adds	r3, #2
 8006132:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006136:	e7c5      	b.n	80060c4 <_printf_common+0x58>
 8006138:	2301      	movs	r3, #1
 800613a:	4622      	mov	r2, r4
 800613c:	4649      	mov	r1, r9
 800613e:	4638      	mov	r0, r7
 8006140:	47c0      	blx	r8
 8006142:	3001      	adds	r0, #1
 8006144:	d0e6      	beq.n	8006114 <_printf_common+0xa8>
 8006146:	3601      	adds	r6, #1
 8006148:	e7d9      	b.n	80060fe <_printf_common+0x92>
	...

0800614c <_printf_i>:
 800614c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006150:	460c      	mov	r4, r1
 8006152:	7e27      	ldrb	r7, [r4, #24]
 8006154:	4691      	mov	r9, r2
 8006156:	2f78      	cmp	r7, #120	; 0x78
 8006158:	4680      	mov	r8, r0
 800615a:	469a      	mov	sl, r3
 800615c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800615e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006162:	d807      	bhi.n	8006174 <_printf_i+0x28>
 8006164:	2f62      	cmp	r7, #98	; 0x62
 8006166:	d80a      	bhi.n	800617e <_printf_i+0x32>
 8006168:	2f00      	cmp	r7, #0
 800616a:	f000 80d9 	beq.w	8006320 <_printf_i+0x1d4>
 800616e:	2f58      	cmp	r7, #88	; 0x58
 8006170:	f000 80a4 	beq.w	80062bc <_printf_i+0x170>
 8006174:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800617c:	e03a      	b.n	80061f4 <_printf_i+0xa8>
 800617e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006182:	2b15      	cmp	r3, #21
 8006184:	d8f6      	bhi.n	8006174 <_printf_i+0x28>
 8006186:	a001      	add	r0, pc, #4	; (adr r0, 800618c <_printf_i+0x40>)
 8006188:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800618c:	080061e5 	.word	0x080061e5
 8006190:	080061f9 	.word	0x080061f9
 8006194:	08006175 	.word	0x08006175
 8006198:	08006175 	.word	0x08006175
 800619c:	08006175 	.word	0x08006175
 80061a0:	08006175 	.word	0x08006175
 80061a4:	080061f9 	.word	0x080061f9
 80061a8:	08006175 	.word	0x08006175
 80061ac:	08006175 	.word	0x08006175
 80061b0:	08006175 	.word	0x08006175
 80061b4:	08006175 	.word	0x08006175
 80061b8:	08006307 	.word	0x08006307
 80061bc:	08006229 	.word	0x08006229
 80061c0:	080062e9 	.word	0x080062e9
 80061c4:	08006175 	.word	0x08006175
 80061c8:	08006175 	.word	0x08006175
 80061cc:	08006329 	.word	0x08006329
 80061d0:	08006175 	.word	0x08006175
 80061d4:	08006229 	.word	0x08006229
 80061d8:	08006175 	.word	0x08006175
 80061dc:	08006175 	.word	0x08006175
 80061e0:	080062f1 	.word	0x080062f1
 80061e4:	680b      	ldr	r3, [r1, #0]
 80061e6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061ea:	1d1a      	adds	r2, r3, #4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	600a      	str	r2, [r1, #0]
 80061f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061f4:	2301      	movs	r3, #1
 80061f6:	e0a4      	b.n	8006342 <_printf_i+0x1f6>
 80061f8:	6825      	ldr	r5, [r4, #0]
 80061fa:	6808      	ldr	r0, [r1, #0]
 80061fc:	062e      	lsls	r6, r5, #24
 80061fe:	f100 0304 	add.w	r3, r0, #4
 8006202:	d50a      	bpl.n	800621a <_printf_i+0xce>
 8006204:	6805      	ldr	r5, [r0, #0]
 8006206:	600b      	str	r3, [r1, #0]
 8006208:	2d00      	cmp	r5, #0
 800620a:	da03      	bge.n	8006214 <_printf_i+0xc8>
 800620c:	232d      	movs	r3, #45	; 0x2d
 800620e:	426d      	negs	r5, r5
 8006210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006214:	230a      	movs	r3, #10
 8006216:	485e      	ldr	r0, [pc, #376]	; (8006390 <_printf_i+0x244>)
 8006218:	e019      	b.n	800624e <_printf_i+0x102>
 800621a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800621e:	6805      	ldr	r5, [r0, #0]
 8006220:	600b      	str	r3, [r1, #0]
 8006222:	bf18      	it	ne
 8006224:	b22d      	sxthne	r5, r5
 8006226:	e7ef      	b.n	8006208 <_printf_i+0xbc>
 8006228:	680b      	ldr	r3, [r1, #0]
 800622a:	6825      	ldr	r5, [r4, #0]
 800622c:	1d18      	adds	r0, r3, #4
 800622e:	6008      	str	r0, [r1, #0]
 8006230:	0628      	lsls	r0, r5, #24
 8006232:	d501      	bpl.n	8006238 <_printf_i+0xec>
 8006234:	681d      	ldr	r5, [r3, #0]
 8006236:	e002      	b.n	800623e <_printf_i+0xf2>
 8006238:	0669      	lsls	r1, r5, #25
 800623a:	d5fb      	bpl.n	8006234 <_printf_i+0xe8>
 800623c:	881d      	ldrh	r5, [r3, #0]
 800623e:	2f6f      	cmp	r7, #111	; 0x6f
 8006240:	bf0c      	ite	eq
 8006242:	2308      	moveq	r3, #8
 8006244:	230a      	movne	r3, #10
 8006246:	4852      	ldr	r0, [pc, #328]	; (8006390 <_printf_i+0x244>)
 8006248:	2100      	movs	r1, #0
 800624a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800624e:	6866      	ldr	r6, [r4, #4]
 8006250:	2e00      	cmp	r6, #0
 8006252:	bfa8      	it	ge
 8006254:	6821      	ldrge	r1, [r4, #0]
 8006256:	60a6      	str	r6, [r4, #8]
 8006258:	bfa4      	itt	ge
 800625a:	f021 0104 	bicge.w	r1, r1, #4
 800625e:	6021      	strge	r1, [r4, #0]
 8006260:	b90d      	cbnz	r5, 8006266 <_printf_i+0x11a>
 8006262:	2e00      	cmp	r6, #0
 8006264:	d04d      	beq.n	8006302 <_printf_i+0x1b6>
 8006266:	4616      	mov	r6, r2
 8006268:	fbb5 f1f3 	udiv	r1, r5, r3
 800626c:	fb03 5711 	mls	r7, r3, r1, r5
 8006270:	5dc7      	ldrb	r7, [r0, r7]
 8006272:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006276:	462f      	mov	r7, r5
 8006278:	42bb      	cmp	r3, r7
 800627a:	460d      	mov	r5, r1
 800627c:	d9f4      	bls.n	8006268 <_printf_i+0x11c>
 800627e:	2b08      	cmp	r3, #8
 8006280:	d10b      	bne.n	800629a <_printf_i+0x14e>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	07df      	lsls	r7, r3, #31
 8006286:	d508      	bpl.n	800629a <_printf_i+0x14e>
 8006288:	6923      	ldr	r3, [r4, #16]
 800628a:	6861      	ldr	r1, [r4, #4]
 800628c:	4299      	cmp	r1, r3
 800628e:	bfde      	ittt	le
 8006290:	2330      	movle	r3, #48	; 0x30
 8006292:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006296:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800629a:	1b92      	subs	r2, r2, r6
 800629c:	6122      	str	r2, [r4, #16]
 800629e:	464b      	mov	r3, r9
 80062a0:	4621      	mov	r1, r4
 80062a2:	4640      	mov	r0, r8
 80062a4:	f8cd a000 	str.w	sl, [sp]
 80062a8:	aa03      	add	r2, sp, #12
 80062aa:	f7ff fedf 	bl	800606c <_printf_common>
 80062ae:	3001      	adds	r0, #1
 80062b0:	d14c      	bne.n	800634c <_printf_i+0x200>
 80062b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062b6:	b004      	add	sp, #16
 80062b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062bc:	4834      	ldr	r0, [pc, #208]	; (8006390 <_printf_i+0x244>)
 80062be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062c2:	680e      	ldr	r6, [r1, #0]
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80062ca:	061f      	lsls	r7, r3, #24
 80062cc:	600e      	str	r6, [r1, #0]
 80062ce:	d514      	bpl.n	80062fa <_printf_i+0x1ae>
 80062d0:	07d9      	lsls	r1, r3, #31
 80062d2:	bf44      	itt	mi
 80062d4:	f043 0320 	orrmi.w	r3, r3, #32
 80062d8:	6023      	strmi	r3, [r4, #0]
 80062da:	b91d      	cbnz	r5, 80062e4 <_printf_i+0x198>
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	f023 0320 	bic.w	r3, r3, #32
 80062e2:	6023      	str	r3, [r4, #0]
 80062e4:	2310      	movs	r3, #16
 80062e6:	e7af      	b.n	8006248 <_printf_i+0xfc>
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	f043 0320 	orr.w	r3, r3, #32
 80062ee:	6023      	str	r3, [r4, #0]
 80062f0:	2378      	movs	r3, #120	; 0x78
 80062f2:	4828      	ldr	r0, [pc, #160]	; (8006394 <_printf_i+0x248>)
 80062f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062f8:	e7e3      	b.n	80062c2 <_printf_i+0x176>
 80062fa:	065e      	lsls	r6, r3, #25
 80062fc:	bf48      	it	mi
 80062fe:	b2ad      	uxthmi	r5, r5
 8006300:	e7e6      	b.n	80062d0 <_printf_i+0x184>
 8006302:	4616      	mov	r6, r2
 8006304:	e7bb      	b.n	800627e <_printf_i+0x132>
 8006306:	680b      	ldr	r3, [r1, #0]
 8006308:	6826      	ldr	r6, [r4, #0]
 800630a:	1d1d      	adds	r5, r3, #4
 800630c:	6960      	ldr	r0, [r4, #20]
 800630e:	600d      	str	r5, [r1, #0]
 8006310:	0635      	lsls	r5, r6, #24
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	d501      	bpl.n	800631a <_printf_i+0x1ce>
 8006316:	6018      	str	r0, [r3, #0]
 8006318:	e002      	b.n	8006320 <_printf_i+0x1d4>
 800631a:	0671      	lsls	r1, r6, #25
 800631c:	d5fb      	bpl.n	8006316 <_printf_i+0x1ca>
 800631e:	8018      	strh	r0, [r3, #0]
 8006320:	2300      	movs	r3, #0
 8006322:	4616      	mov	r6, r2
 8006324:	6123      	str	r3, [r4, #16]
 8006326:	e7ba      	b.n	800629e <_printf_i+0x152>
 8006328:	680b      	ldr	r3, [r1, #0]
 800632a:	1d1a      	adds	r2, r3, #4
 800632c:	600a      	str	r2, [r1, #0]
 800632e:	681e      	ldr	r6, [r3, #0]
 8006330:	2100      	movs	r1, #0
 8006332:	4630      	mov	r0, r6
 8006334:	6862      	ldr	r2, [r4, #4]
 8006336:	f000 f82f 	bl	8006398 <memchr>
 800633a:	b108      	cbz	r0, 8006340 <_printf_i+0x1f4>
 800633c:	1b80      	subs	r0, r0, r6
 800633e:	6060      	str	r0, [r4, #4]
 8006340:	6863      	ldr	r3, [r4, #4]
 8006342:	6123      	str	r3, [r4, #16]
 8006344:	2300      	movs	r3, #0
 8006346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800634a:	e7a8      	b.n	800629e <_printf_i+0x152>
 800634c:	4632      	mov	r2, r6
 800634e:	4649      	mov	r1, r9
 8006350:	4640      	mov	r0, r8
 8006352:	6923      	ldr	r3, [r4, #16]
 8006354:	47d0      	blx	sl
 8006356:	3001      	adds	r0, #1
 8006358:	d0ab      	beq.n	80062b2 <_printf_i+0x166>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	079b      	lsls	r3, r3, #30
 800635e:	d413      	bmi.n	8006388 <_printf_i+0x23c>
 8006360:	68e0      	ldr	r0, [r4, #12]
 8006362:	9b03      	ldr	r3, [sp, #12]
 8006364:	4298      	cmp	r0, r3
 8006366:	bfb8      	it	lt
 8006368:	4618      	movlt	r0, r3
 800636a:	e7a4      	b.n	80062b6 <_printf_i+0x16a>
 800636c:	2301      	movs	r3, #1
 800636e:	4632      	mov	r2, r6
 8006370:	4649      	mov	r1, r9
 8006372:	4640      	mov	r0, r8
 8006374:	47d0      	blx	sl
 8006376:	3001      	adds	r0, #1
 8006378:	d09b      	beq.n	80062b2 <_printf_i+0x166>
 800637a:	3501      	adds	r5, #1
 800637c:	68e3      	ldr	r3, [r4, #12]
 800637e:	9903      	ldr	r1, [sp, #12]
 8006380:	1a5b      	subs	r3, r3, r1
 8006382:	42ab      	cmp	r3, r5
 8006384:	dcf2      	bgt.n	800636c <_printf_i+0x220>
 8006386:	e7eb      	b.n	8006360 <_printf_i+0x214>
 8006388:	2500      	movs	r5, #0
 800638a:	f104 0619 	add.w	r6, r4, #25
 800638e:	e7f5      	b.n	800637c <_printf_i+0x230>
 8006390:	080067b9 	.word	0x080067b9
 8006394:	080067ca 	.word	0x080067ca

08006398 <memchr>:
 8006398:	4603      	mov	r3, r0
 800639a:	b510      	push	{r4, lr}
 800639c:	b2c9      	uxtb	r1, r1
 800639e:	4402      	add	r2, r0
 80063a0:	4293      	cmp	r3, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	d101      	bne.n	80063aa <memchr+0x12>
 80063a6:	2000      	movs	r0, #0
 80063a8:	e003      	b.n	80063b2 <memchr+0x1a>
 80063aa:	7804      	ldrb	r4, [r0, #0]
 80063ac:	3301      	adds	r3, #1
 80063ae:	428c      	cmp	r4, r1
 80063b0:	d1f6      	bne.n	80063a0 <memchr+0x8>
 80063b2:	bd10      	pop	{r4, pc}

080063b4 <memcpy>:
 80063b4:	440a      	add	r2, r1
 80063b6:	4291      	cmp	r1, r2
 80063b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80063bc:	d100      	bne.n	80063c0 <memcpy+0xc>
 80063be:	4770      	bx	lr
 80063c0:	b510      	push	{r4, lr}
 80063c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c6:	4291      	cmp	r1, r2
 80063c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063cc:	d1f9      	bne.n	80063c2 <memcpy+0xe>
 80063ce:	bd10      	pop	{r4, pc}

080063d0 <memmove>:
 80063d0:	4288      	cmp	r0, r1
 80063d2:	b510      	push	{r4, lr}
 80063d4:	eb01 0402 	add.w	r4, r1, r2
 80063d8:	d902      	bls.n	80063e0 <memmove+0x10>
 80063da:	4284      	cmp	r4, r0
 80063dc:	4623      	mov	r3, r4
 80063de:	d807      	bhi.n	80063f0 <memmove+0x20>
 80063e0:	1e43      	subs	r3, r0, #1
 80063e2:	42a1      	cmp	r1, r4
 80063e4:	d008      	beq.n	80063f8 <memmove+0x28>
 80063e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063ee:	e7f8      	b.n	80063e2 <memmove+0x12>
 80063f0:	4601      	mov	r1, r0
 80063f2:	4402      	add	r2, r0
 80063f4:	428a      	cmp	r2, r1
 80063f6:	d100      	bne.n	80063fa <memmove+0x2a>
 80063f8:	bd10      	pop	{r4, pc}
 80063fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006402:	e7f7      	b.n	80063f4 <memmove+0x24>

08006404 <_free_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	4605      	mov	r5, r0
 8006408:	2900      	cmp	r1, #0
 800640a:	d043      	beq.n	8006494 <_free_r+0x90>
 800640c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006410:	1f0c      	subs	r4, r1, #4
 8006412:	2b00      	cmp	r3, #0
 8006414:	bfb8      	it	lt
 8006416:	18e4      	addlt	r4, r4, r3
 8006418:	f000 f8d0 	bl	80065bc <__malloc_lock>
 800641c:	4a1e      	ldr	r2, [pc, #120]	; (8006498 <_free_r+0x94>)
 800641e:	6813      	ldr	r3, [r2, #0]
 8006420:	4610      	mov	r0, r2
 8006422:	b933      	cbnz	r3, 8006432 <_free_r+0x2e>
 8006424:	6063      	str	r3, [r4, #4]
 8006426:	6014      	str	r4, [r2, #0]
 8006428:	4628      	mov	r0, r5
 800642a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800642e:	f000 b8cb 	b.w	80065c8 <__malloc_unlock>
 8006432:	42a3      	cmp	r3, r4
 8006434:	d90a      	bls.n	800644c <_free_r+0x48>
 8006436:	6821      	ldr	r1, [r4, #0]
 8006438:	1862      	adds	r2, r4, r1
 800643a:	4293      	cmp	r3, r2
 800643c:	bf01      	itttt	eq
 800643e:	681a      	ldreq	r2, [r3, #0]
 8006440:	685b      	ldreq	r3, [r3, #4]
 8006442:	1852      	addeq	r2, r2, r1
 8006444:	6022      	streq	r2, [r4, #0]
 8006446:	6063      	str	r3, [r4, #4]
 8006448:	6004      	str	r4, [r0, #0]
 800644a:	e7ed      	b.n	8006428 <_free_r+0x24>
 800644c:	461a      	mov	r2, r3
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	b10b      	cbz	r3, 8006456 <_free_r+0x52>
 8006452:	42a3      	cmp	r3, r4
 8006454:	d9fa      	bls.n	800644c <_free_r+0x48>
 8006456:	6811      	ldr	r1, [r2, #0]
 8006458:	1850      	adds	r0, r2, r1
 800645a:	42a0      	cmp	r0, r4
 800645c:	d10b      	bne.n	8006476 <_free_r+0x72>
 800645e:	6820      	ldr	r0, [r4, #0]
 8006460:	4401      	add	r1, r0
 8006462:	1850      	adds	r0, r2, r1
 8006464:	4283      	cmp	r3, r0
 8006466:	6011      	str	r1, [r2, #0]
 8006468:	d1de      	bne.n	8006428 <_free_r+0x24>
 800646a:	6818      	ldr	r0, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	4401      	add	r1, r0
 8006470:	6011      	str	r1, [r2, #0]
 8006472:	6053      	str	r3, [r2, #4]
 8006474:	e7d8      	b.n	8006428 <_free_r+0x24>
 8006476:	d902      	bls.n	800647e <_free_r+0x7a>
 8006478:	230c      	movs	r3, #12
 800647a:	602b      	str	r3, [r5, #0]
 800647c:	e7d4      	b.n	8006428 <_free_r+0x24>
 800647e:	6820      	ldr	r0, [r4, #0]
 8006480:	1821      	adds	r1, r4, r0
 8006482:	428b      	cmp	r3, r1
 8006484:	bf01      	itttt	eq
 8006486:	6819      	ldreq	r1, [r3, #0]
 8006488:	685b      	ldreq	r3, [r3, #4]
 800648a:	1809      	addeq	r1, r1, r0
 800648c:	6021      	streq	r1, [r4, #0]
 800648e:	6063      	str	r3, [r4, #4]
 8006490:	6054      	str	r4, [r2, #4]
 8006492:	e7c9      	b.n	8006428 <_free_r+0x24>
 8006494:	bd38      	pop	{r3, r4, r5, pc}
 8006496:	bf00      	nop
 8006498:	20000138 	.word	0x20000138

0800649c <_malloc_r>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	1ccd      	adds	r5, r1, #3
 80064a0:	f025 0503 	bic.w	r5, r5, #3
 80064a4:	3508      	adds	r5, #8
 80064a6:	2d0c      	cmp	r5, #12
 80064a8:	bf38      	it	cc
 80064aa:	250c      	movcc	r5, #12
 80064ac:	2d00      	cmp	r5, #0
 80064ae:	4606      	mov	r6, r0
 80064b0:	db01      	blt.n	80064b6 <_malloc_r+0x1a>
 80064b2:	42a9      	cmp	r1, r5
 80064b4:	d903      	bls.n	80064be <_malloc_r+0x22>
 80064b6:	230c      	movs	r3, #12
 80064b8:	6033      	str	r3, [r6, #0]
 80064ba:	2000      	movs	r0, #0
 80064bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064be:	f000 f87d 	bl	80065bc <__malloc_lock>
 80064c2:	4921      	ldr	r1, [pc, #132]	; (8006548 <_malloc_r+0xac>)
 80064c4:	680a      	ldr	r2, [r1, #0]
 80064c6:	4614      	mov	r4, r2
 80064c8:	b99c      	cbnz	r4, 80064f2 <_malloc_r+0x56>
 80064ca:	4f20      	ldr	r7, [pc, #128]	; (800654c <_malloc_r+0xb0>)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	b923      	cbnz	r3, 80064da <_malloc_r+0x3e>
 80064d0:	4621      	mov	r1, r4
 80064d2:	4630      	mov	r0, r6
 80064d4:	f000 f862 	bl	800659c <_sbrk_r>
 80064d8:	6038      	str	r0, [r7, #0]
 80064da:	4629      	mov	r1, r5
 80064dc:	4630      	mov	r0, r6
 80064de:	f000 f85d 	bl	800659c <_sbrk_r>
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	d123      	bne.n	800652e <_malloc_r+0x92>
 80064e6:	230c      	movs	r3, #12
 80064e8:	4630      	mov	r0, r6
 80064ea:	6033      	str	r3, [r6, #0]
 80064ec:	f000 f86c 	bl	80065c8 <__malloc_unlock>
 80064f0:	e7e3      	b.n	80064ba <_malloc_r+0x1e>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	1b5b      	subs	r3, r3, r5
 80064f6:	d417      	bmi.n	8006528 <_malloc_r+0x8c>
 80064f8:	2b0b      	cmp	r3, #11
 80064fa:	d903      	bls.n	8006504 <_malloc_r+0x68>
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	441c      	add	r4, r3
 8006500:	6025      	str	r5, [r4, #0]
 8006502:	e004      	b.n	800650e <_malloc_r+0x72>
 8006504:	6863      	ldr	r3, [r4, #4]
 8006506:	42a2      	cmp	r2, r4
 8006508:	bf0c      	ite	eq
 800650a:	600b      	streq	r3, [r1, #0]
 800650c:	6053      	strne	r3, [r2, #4]
 800650e:	4630      	mov	r0, r6
 8006510:	f000 f85a 	bl	80065c8 <__malloc_unlock>
 8006514:	f104 000b 	add.w	r0, r4, #11
 8006518:	1d23      	adds	r3, r4, #4
 800651a:	f020 0007 	bic.w	r0, r0, #7
 800651e:	1ac2      	subs	r2, r0, r3
 8006520:	d0cc      	beq.n	80064bc <_malloc_r+0x20>
 8006522:	1a1b      	subs	r3, r3, r0
 8006524:	50a3      	str	r3, [r4, r2]
 8006526:	e7c9      	b.n	80064bc <_malloc_r+0x20>
 8006528:	4622      	mov	r2, r4
 800652a:	6864      	ldr	r4, [r4, #4]
 800652c:	e7cc      	b.n	80064c8 <_malloc_r+0x2c>
 800652e:	1cc4      	adds	r4, r0, #3
 8006530:	f024 0403 	bic.w	r4, r4, #3
 8006534:	42a0      	cmp	r0, r4
 8006536:	d0e3      	beq.n	8006500 <_malloc_r+0x64>
 8006538:	1a21      	subs	r1, r4, r0
 800653a:	4630      	mov	r0, r6
 800653c:	f000 f82e 	bl	800659c <_sbrk_r>
 8006540:	3001      	adds	r0, #1
 8006542:	d1dd      	bne.n	8006500 <_malloc_r+0x64>
 8006544:	e7cf      	b.n	80064e6 <_malloc_r+0x4a>
 8006546:	bf00      	nop
 8006548:	20000138 	.word	0x20000138
 800654c:	2000013c 	.word	0x2000013c

08006550 <_realloc_r>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	4607      	mov	r7, r0
 8006554:	4614      	mov	r4, r2
 8006556:	460e      	mov	r6, r1
 8006558:	b921      	cbnz	r1, 8006564 <_realloc_r+0x14>
 800655a:	4611      	mov	r1, r2
 800655c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006560:	f7ff bf9c 	b.w	800649c <_malloc_r>
 8006564:	b922      	cbnz	r2, 8006570 <_realloc_r+0x20>
 8006566:	f7ff ff4d 	bl	8006404 <_free_r>
 800656a:	4625      	mov	r5, r4
 800656c:	4628      	mov	r0, r5
 800656e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006570:	f000 f830 	bl	80065d4 <_malloc_usable_size_r>
 8006574:	42a0      	cmp	r0, r4
 8006576:	d20f      	bcs.n	8006598 <_realloc_r+0x48>
 8006578:	4621      	mov	r1, r4
 800657a:	4638      	mov	r0, r7
 800657c:	f7ff ff8e 	bl	800649c <_malloc_r>
 8006580:	4605      	mov	r5, r0
 8006582:	2800      	cmp	r0, #0
 8006584:	d0f2      	beq.n	800656c <_realloc_r+0x1c>
 8006586:	4631      	mov	r1, r6
 8006588:	4622      	mov	r2, r4
 800658a:	f7ff ff13 	bl	80063b4 <memcpy>
 800658e:	4631      	mov	r1, r6
 8006590:	4638      	mov	r0, r7
 8006592:	f7ff ff37 	bl	8006404 <_free_r>
 8006596:	e7e9      	b.n	800656c <_realloc_r+0x1c>
 8006598:	4635      	mov	r5, r6
 800659a:	e7e7      	b.n	800656c <_realloc_r+0x1c>

0800659c <_sbrk_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	2300      	movs	r3, #0
 80065a0:	4d05      	ldr	r5, [pc, #20]	; (80065b8 <_sbrk_r+0x1c>)
 80065a2:	4604      	mov	r4, r0
 80065a4:	4608      	mov	r0, r1
 80065a6:	602b      	str	r3, [r5, #0]
 80065a8:	f7fb fc5c 	bl	8001e64 <_sbrk>
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d102      	bne.n	80065b6 <_sbrk_r+0x1a>
 80065b0:	682b      	ldr	r3, [r5, #0]
 80065b2:	b103      	cbz	r3, 80065b6 <_sbrk_r+0x1a>
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	bd38      	pop	{r3, r4, r5, pc}
 80065b8:	200003c4 	.word	0x200003c4

080065bc <__malloc_lock>:
 80065bc:	4801      	ldr	r0, [pc, #4]	; (80065c4 <__malloc_lock+0x8>)
 80065be:	f000 b811 	b.w	80065e4 <__retarget_lock_acquire_recursive>
 80065c2:	bf00      	nop
 80065c4:	200003cc 	.word	0x200003cc

080065c8 <__malloc_unlock>:
 80065c8:	4801      	ldr	r0, [pc, #4]	; (80065d0 <__malloc_unlock+0x8>)
 80065ca:	f000 b80c 	b.w	80065e6 <__retarget_lock_release_recursive>
 80065ce:	bf00      	nop
 80065d0:	200003cc 	.word	0x200003cc

080065d4 <_malloc_usable_size_r>:
 80065d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d8:	1f18      	subs	r0, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bfbc      	itt	lt
 80065de:	580b      	ldrlt	r3, [r1, r0]
 80065e0:	18c0      	addlt	r0, r0, r3
 80065e2:	4770      	bx	lr

080065e4 <__retarget_lock_acquire_recursive>:
 80065e4:	4770      	bx	lr

080065e6 <__retarget_lock_release_recursive>:
 80065e6:	4770      	bx	lr

080065e8 <_init>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	bf00      	nop
 80065ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ee:	bc08      	pop	{r3}
 80065f0:	469e      	mov	lr, r3
 80065f2:	4770      	bx	lr

080065f4 <_fini>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	bf00      	nop
 80065f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fa:	bc08      	pop	{r3}
 80065fc:	469e      	mov	lr, r3
 80065fe:	4770      	bx	lr
